{"version":3,"sources":["webpack:///main.js","webpack:///webpack/bootstrap 2bdb529e7aa78df1527a","webpack:///./src/atom/main.js","webpack:///./src/atom/editor-tools/editor-tools.js","webpack:///external \"path\"","webpack:///./src/atom/core/atomWrapper.js","webpack:///./src/atom/editor-tools/details-view.js","webpack:///external \"atom-ui-lib\"","webpack:///./src/atom/util/ScrollViewUI.js","webpack:///external \"atom-space-pen-views\"","webpack:///./src/atom/editor-tools/details.js","webpack:///./src/atom/editor-tools/detailElements.js","webpack:///external \"underscore\"","webpack:///./src/atom/dialogs/assist-utils.js","webpack:///external \"fs\"","webpack:///./src/atom/core/linter-ui.js","webpack:///./src/atom/util/unit.js","webpack:///external \"basarat-text-buffer\"","webpack:///./src/atom/core/editorManager.js","webpack:///external \"raml-language-server\"","webpack:///./src/atom/editor-tools/reconciler.js","webpack:///external \"promise-polyfill\"","webpack:///./src/atom/editor-tools/outline-view.js","webpack:///./src/atom/core/markOccurences.js","webpack:///./src/atom/quick-commands/quick-commands.js","webpack:///./src/atom/quick-commands/quick-commands-ui.js","webpack:///./src/atom/quick-commands/code-commands.js","webpack:///./src/atom/suggestion/provider.js","webpack:///./src/atom/core/patchElements.js","webpack:///external \"atom\"","webpack:///./src/atom/quick-commands/command-manager.js","webpack:///./src/atom/context-menu/contextMenu.js","webpack:///./src/atom/context-menu/contextMenuImpl.js","webpack:///external \"mkdirp\"","webpack:///./src/atom/context-menu/actionUIManager.js","webpack:///./src/atom/context-menu/actions/completeBody/ui.js","webpack:///./src/atom/context-menu/actions/newMethod/ui.js","webpack:///./src/atom/context-menu/actions/simpleAction/ui.js","webpack:///external \"atom-package-deps\""],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","package_entry_point","editorTools","quickCommands","provider","decl","linterUI","patchElements","CompositeDisposable","commandManager","contextMenu","contextMenuImpl","activate","state","install","then","subscriptions","add","atom","commands","api-workbench:editor-tools","initEditorTools","api-workbench:go-to-definition","gotoDeclaration","api-workbench:find-usages","findUsages","api-workbench:rename","renameRAMLElement","api-workbench:new-project","newProject","doPatch","initialize","registerCommands","initializeActionBasedMenu","getProvider","provideLinter","consumeLinter","linterApi","initEditorObservers","deactivate","dispose","config","grammars","type","default","openConsoleInSplitPane","display","manager","EditorManager","editorToolsStatus","opened","aquireManager","doSplit","value","dir","SplitDirections","RIGHT","newPane","BOTTOM","workspace","getActivePane","splitDown","TOP","splitUp","LEFT","splitLeft","splitRight","addItem","Object","defineProperty","path","detailsView","outlineView","ramlServer","markOccurrences","_this","this","_initialized","updateCount","outlineCount","_cleanOutline","performanceDebug","fire","placeholder","window","markOccurrencesReconciler","Reconciler","getNodeClientConnection","onDidChangeActivePaneItem","e","updateEverything","observeTextEditors","editor","onDidDestroy","getPath","documentClosed","onDidChangeCursorPosition","event","cursorChanged","newBufferPosition","addAutoCloseListener","addListenersForStructure","prototype","console","log","currentEditor","getCurrentEditor","getCurrentPosition","currentPosition","clearOccurences","schedule","MarkOccurrenceRunnable","buffer","getBuffer","pos","characterIndexForPosition","getCursorBufferPosition","positionChanged","unitPath","internalScheduleUpdateViews","count","setTimeout","updateViews","scheduleViewsUpdate","internalScheduleOutlineUpdate","updateOutline","scheduleOutlineUpdate","onDidDestroyPane","evt","edcount","getPaneItems","filter","undefined","length","global","cleanCache","paneForItem","_view","destroy","_details","getOrCreateView","RamlOutline","setUnit","getDetails","DETAILS_SUPPORT","RamlDetails","updateDetails","update","reparseAST","_path","isETPane","pane","items","getItems","indexOf","aw","fpane","setViewsDisplayStyle","visible","element","style","isRaml","editorPath","extName","extname","getActiveTextEditor","patched","addListenersToEditor","positionUpdated","cedit","onDidChange","x","addListenersOnMove","onStructureReport","report","categoryNames","categoryName","structure","push","categoryNamesString","join","debug","movingPane","onDidAddPaneItem","item","moveItemToPane","setActiveItem","setText","text","isFromEdgeRow","currentRow","row","previousRow","getLastRow","ds","Date","getMilliseconds","show","d1","newPosition","require","open","pathsToOpen","Workspace","callback","addModalPanel","arg","getActiveEditor","addRightPanel","args","CommandManager","selector","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","create","UI","SC","details","reconciler_1","_super","allowStructureChanges","disposables","addClass","connection","onDetailsReport","reconciler","getTitle","attached","innerHTML","_children","container","vc","addChild","ui","appendChild","setResource","detailsNode","context","wasSchema","schemaView","displayEmpty","updateDetailsPanel","clear","_unitPath","_position","oldItem","detach","position","force","uri","localModel","getLatestVersion","latestVersion","version","Scrollable","SpacePenViews","content","v","div","class","tabindex","caption","scroll","top","left","scrollTop","scrollLeft","size","bottom","clientHeight","right","clientWidth","changed","refresh","setParent","_parent","removeChild","child","doRender","innerRenderUI","selfRender","document","createElement","html","start","forEach","el","renderUI","parent","children","isAttached","ScrollView","detailsReport","panel","updateTextOnDone","cfg","l","styles","emitter","handlersByEventName","sadd","concat","sremove","schange","cfgCh","addGrammar","updateGrammar","emptyGrammarListeners","nullGrammar","rend","empty","detailElements","buildItem","render","toFocus","field","getActualField","focus","getModel","setCursorBufferPosition","focusedPosition","focusedPropertyName","errLabel","h3","applyStyling","TextClasses","WARNING","setStyle","margin","Error","nodes","Api","properties","actions","Resource","Method","DataElement","Response","filterOut","isUpdateModelRunnable","runnable","getUri","dialog","root","TopLevelNode","_i","_a","title","_b","_c","childOfChild","buildItemInCategory","CheckBoxField","valueText","JSONSchemaField","XMLSchemaField","MarkdownField","options","SelectBox","SimpleMultiEditor","LowLevelTreeField","StructuredField","TypeDisplayItem","TypeSelectBox","ExampleField","XMLExampleField","PropertyEditorInfo","addItemToCategory","lastSelectedCaption","_","assistUtils","inRender","UpdateModelRunnable","newValue","cancelled","run","Promise","resolve","changeDetailValue","conflicts","other","cancel","isCanceled","Item","_title","description","listeners","needsSeparateLabel","addListener","r","removeListener","i","setDescription","desc","setTitle","t","name","setError","clearErrors","WrapPanel","setCaption","Category","apply","arguments","plainChildren","categories","it","rr","section","createSection","_result","showDescription","descriptionLabel","label","contributeTop","wrappedChild","createWrappedChild","subCategories","cats","remap","newCats","showHeader","Section","pnl","Panel","TabFolder","tf","Icon","NONE","firstLabel","ep","setOnSelected","selectedComponent","subCategoryByNameOrCreate","find","rs","errorLabel","BUG","ERROR","hc","setDisplay","result","_options","_panel","n","tabsCount","get","header","setSelectedIndex","documentation","INBOX","SUBTLE","CheckBox2","setLabelWidth","CheckBox","outlineNode","rendered","oldValue","fromEditorToModel","fld","getBinding","detailsChangeRunnable","changedDocuments","applyChangedDocuments","gotoPosition","toLocalValue","inputValue","toUIValue","fromModelToEditor","set","createField","texfField","trim","MarkdownFieldUI","onchange","setMini","setGrammar","setLabelHeight","setRequired","AtomEditorElement","XMLField","JSONField","select","SelectField","setOptions","TreeField","renderer","node","CIRCUIT_BOARD","HIGHLIGHT","SUCCESS","getChildren","viewer","treeViewer","setInput","tm","createRAMLFile","baseUri","sample","raml1","apiLines","typesLines","resourceLines","NewProjectDialog","splitOnLines","lines","match","cleanEmptyLines","activeEditor","bufferPos","positionForCharacterIndex","setSelectedBufferRange","end","offset","openDeclaration","locations","p1","range","p2","revalidate","relint","getEditorByUriOrPath","changedDocuments_1","changedDocument","oldContents","getText","fs","readFileSync","toString","newText","textEdits","textEditProcessor","applyDocumentEdits","writeFileSync","findCurrentName","contents","stopCharacters","beginning","currentOffset","currentChar","charAt","found","stopCharacters_1","stopChar","stopCharacters_2","substring","currentName","prompt","newName","rename","findUsagesImpl","findReferences","sv","SearchResultView","addBottomPanel","apititle","_raml1","_defStructure","_createSampleResource","sourceValue","generateDefaultProjectParentFolder","fdUtils","getHome","extraContent","s","validateProjectLocation","toValidate","errorStatus","parentDirectory","dirname","existsSync","okStatus","validateTitle","zz","BOOK","pad","LayoutType","BLOCK","statusLabel","slf","CustomField","code","StatusCode","projectLocationInput","addValidator","st","setIcon","message","titleStatusLabel","titleStatusMessage","titleTextField","status","r1","checkBox","setValue","getValue","r2","r3","buttonBar","setPercentWidth","button","ButtonSizes","NORMAL","ButtonHighlights","NO_HIGHLIGHT","onOk","createIfNotExist","ps","mkdirSync","load","SEARCH","view","list","location","res","a","y","SMALL","PRIMARY","editorManager","toggleEditorTools","emit","oldText","linter","isRAMLUnit","unitUtils","tabWarnings","textEditor","tab","filePath","trace","column","postPocessError","error","buffers","reject","readFile","err","data","TextBuffer","clientConnection","debugDetail","traceErrors","tracePromises","map","traceError","all","findAndRemoveExpectedReports","versionLimit","expectedValidationReports","reportExpected","expectedVersion","runValidationSheduleUpdater","documentChanged","latestRecievedReport","issues","lint","promise","errors","promises","tabs","combErrors","warnings","grammarScopes","scope","lintOnFly","raml_language_server_1","original","JSON","parse","stringify","newKey","tr","mes","ms","ValidationReportExpected","onValidationReport","pointOfViewUri","expectedReports","expectedReports_1","expectedReport","man","PromiseConstructor","logger","timeout","waitingList","runningList","addToWaitingList","removeFromWaitingList","currentlyRunning","findConflictingInRunningList","addToRunningList","removeFromRunningList","current","index","splice","fullStructurePath","model","simpleTree","input","selectionListener","opener","HLRenderer","setBasicLabelFunction","setKeyProvider","key","addSelectionListener","createTree","resourcesModel","StructureCategories","ResourcesCategory","typesModel","SchemasAndTypesCategory","traitsModel","ResourceTypesAndTraitsCategory","otherModel","OtherCategory","outline","selectionChanged","schemas","types","folder","selectedTab","selection","getSelection","elements","SelectionChangedEvent","customizePanel","_rs","sender","_viewers","getNodePType","category","setSelection","_selectedNode","structurePromise","getStructure","catch","attach","_isAttached","$this","$","outerHTML","forEachViewer","command","HLNodeType","iconNameToIconEnum","iconName","textHighlightNameToTextClass","highlightName","icon","DASH","highLight","textStyle","typeText","ARROW_SMALL_LEFT","markOccurences","occurences","layer","getOccurencesLayer","occurence","markBufferRange","decorateMarkerLayer","layerId","occurencesLayerId","getMarkerLayer","addMarkerLayer","getMarkOccurrencesPath","ranges","bufferRanges","runSynchronously","otherPath","cm","showCommands","cc","registerQuickCommands","et","qcui","QuickCommand","priority","when","registerAsAtomCommand","target","atomCommand","disposed","unregister","SelectListView","register","cmd","qcmd","atomTarget","predicate","joinedCommands","commandId","getDynamicCommands","currentCommand","keys","sort","aspv","_confirmed","filterKey","getFilterKey","viewForItem","hide","confirmed","getSelectedItemView","storeFocusedElement","setItems","focusFilterEditor","onDidInsertSuggestion","triggerPosition","suggestion","annotation","txt","newPos","insert","replacementPrefix","extra","getSuggestions","request","bufferPosition","disableForSelector","filterSuggestions","inclusionPriority","excludeLowerPriority","oldRegister","registerElement","proto","oldAttachedCallback","attachedCallback","parentElement","addCommand","callBack","tag","listCommands","disposable","commandInfo","commandIdToCommandInfo","tagCommands","tagToCommands","deleteUnmanagedCommand","registeredCommands","selectorBasedListenersByCommandName","deleteManagedCommand","infoIndex","currentInfo","deleteCommandsByTag","commandName","initialized","packages","activatePackage","listener","prePanelDisplay","listenersArray","didDispatch","sequenceNumber","registerContributor","contributor","contributors","DYNAMIC_COMMAND_TAG","contributorId","calculationStarted","calculateItems","calculationFinished","originalShowForEvent","showForEvent","preMenuDisplay","postMenuDisplay","calculateMenuItemsTree","treeRoots","nodeSets","cleanExistingSets","itemSet","findOrCreateItemSet","menuItem","constructAtomMenuItem","submenu","onClick","childMenuItem","existingSet","itemSets","currentSet","DYNAMIC_SET_TAG","specificity","usedSelectors","existingSets","addMenuItem","shouldDisplay","deleteMenuItems","deleteMenuItem","contributorPromises","contributorItems","addItemsTreeNode","roots","currentList","catIndex","currentSegment","existingNode","ContextMenuItemNode","leafNode","onClickHandler","action","executeContextAction","changes","_loop_1","change","editorFound_1","getTextEditors","mkdirp","sync","pathModule","changes_1","editorContextMenuContributor","calculateEditorContextActions","currentActions","handleActionUI","configureServerActions","actionBasedMenuInitialized","onDisplayActionUI","uiDisplayRequest","actionUI","actionUIManager","getUICode","IDE","uilibsModule","UIBuilder","uiBuilder","initialUIState","setServerConfiguration","actionsConfiguration","enableUIActions","nameOverride","actionID","completeBodyUI","newMethodUI","simpleActionUi","generateSchema","mediaType","generator","JsonSchemaGenerator","obj","schemaObject","schemaString","FillBodyDialog","getResult","sch","pass","property","valueType","detectType","isArray","passArray","passObject","registerProperty","propName","array","needXML","needJSON","jsexample","xmlexample","xmlschema","jsschema","resultPromise","updateButtons","createButton","setDisabled","em","HighLightClasses","createTextSection","te","lang","hs","setId","ts","_dialog","onDone","stretch","_dialog2","isPrimary","highlight","reverse","_closeDialog","addStatusListener","_dialogPanels","eventListener","height","body","getComputedStyle","parseFloat","overflowY","addEventListener","mdp","removeEventListener","pop","newMethod","inputState","method","mdesc","methodDescriptions","cdesc","statusCodeDescriptions","NO_RESPONCE","NO_RESPONCE_BT","bodyType","mdescLabel","LabelField","cdescLabel","methodSelect","responseSelect","responseTypeSelect","typeOfValue","realBodyType","bodyTypeSelect","bodyTypeOfValue","actualType","bodyTypeString","__ret","typeValues","isSchema","responseSection","savedResolve","savedReject","CODE","initialState","isParentNull","canceled","detailsTree","simpleModalDialog"],"mappings":"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","file":"main.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../typings/main.d.ts\" />\n\tvar editorTools = __webpack_require__(1);\n\tvar quickCommands = __webpack_require__(22);\n\tvar provider = __webpack_require__(25);\n\tvar decl = __webpack_require__(11);\n\tvar linterUI = __webpack_require__(13);\n\tvar patchElements = __webpack_require__(26);\n\tvar CompositeDisposable = __webpack_require__(27).CompositeDisposable;\n\t// import sharedASTInitializer = require(\"./shared-ast-initializer\")\n\tvar commandManager = __webpack_require__(28);\n\tvar contextMenu = __webpack_require__(29);\n\t// import quickFixActions = require(\"./context-menu/quickFix\")\n\t// import actions = require(\"./context-menu/actions\")\n\tvar contextMenuImpl = __webpack_require__(30);\n\tvar package_entry_point;\n\t(function (package_entry_point) {\n\t    var subscriptions = new CompositeDisposable();\n\t    function activate(state) {\n\t        __webpack_require__(36).install('api-workbench', true)\n\t            .then(function () {\n\t            subscriptions.add(atom.commands.add('atom-workspace', {\n\t                /*'api-workbench:popular-apis': apiList.showPopularApis,*/\n\t                'api-workbench:editor-tools': editorTools.initEditorTools,\n\t                /*'api-workbench:console': Console.toggle,*/\n\t                'api-workbench:go-to-definition': decl.gotoDeclaration,\n\t                'api-workbench:find-usages': decl.findUsages,\n\t                /*'api-workbench:quick-outline':quickOutline.show,\n\t                'api-workbench:quick-commands': quickCommands.showCommands,*/\n\t                'api-workbench:rename': decl.renameRAMLElement,\n\t                'api-workbench:new-project': decl.newProject,\n\t            }));\n\t            //subscriptions.add(atom.workspace.addOpener(Console.opener))\n\t            ////subscriptions.add(atom.workspace.addOpener(RamlScriptReport.opener))\n\t            patchElements.doPatch();\n\t            commandManager.initialize();\n\t            contextMenu.initialize();\n\t            // sharedASTInitializer.initialize()\n\t            quickCommands.registerCommands();\n\t            // quickFixActions.initialize()\n\t            // actions.register();\n\t            editorTools.initEditorTools();\n\t            contextMenuImpl.initializeActionBasedMenu('atom-text-editor[data-grammar=\"source raml\"],.raml-outline');\n\t        });\n\t    }\n\t    package_entry_point.activate = activate;\n\t    function getProvider() {\n\t        return provider;\n\t    }\n\t    package_entry_point.getProvider = getProvider;\n\t    function provideLinter() {\n\t        return linterUI;\n\t    }\n\t    package_entry_point.provideLinter = provideLinter;\n\t    function consumeLinter(linterApi) {\n\t        subscriptions.add(linterUI.initEditorObservers(linterApi));\n\t    }\n\t    package_entry_point.consumeLinter = consumeLinter;\n\t    function deactivate() {\n\t        subscriptions.dispose();\n\t    }\n\t    package_entry_point.deactivate = deactivate;\n\t    package_entry_point.config = {\n\t        grammars: {\n\t            type: 'array',\n\t            default: [\n\t                'source.raml'\n\t            ]\n\t        },\n\t        openConsoleInSplitPane: {\n\t            type: 'boolean',\n\t            default: true\n\t        }\n\t    };\n\t})(package_entry_point || (package_entry_point = {}));\n\tmodule.exports = package_entry_point;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdEQUFnRDtBQUtoRCx5REFBeUQ7QUFDekQsK0RBQWlFO0FBQ2pFLGdEQUFnRDtBQUVoRCw2Q0FBNkM7QUFDN0MsMkNBQTJDO0FBQzNDLG9EQUFvRDtBQUNwRCxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztBQUM5RCxvRUFBb0U7QUFDcEUsaUVBQW1FO0FBQ25FLHdEQUEwRDtBQUMxRCw4REFBOEQ7QUFDOUQscURBQXFEO0FBQ3JELGdFQUFrRTtBQUVsRSxJQUFPLG1CQUFtQixDQXFFekI7QUFyRUQsV0FBTyxtQkFBbUI7SUFFdEIsSUFBSSxhQUFhLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBRTdDLGtCQUEwQixLQUFLO1FBQzNCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDO2FBQ3RELElBQUksQ0FBQztZQUNGLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ2xELDBEQUEwRDtnQkFDMUQsNEJBQTRCLEVBQUMsV0FBVyxDQUFDLGVBQWU7Z0JBQ3hELDRDQUE0QztnQkFDNUMsZ0NBQWdDLEVBQUMsSUFBSSxDQUFDLGVBQWU7Z0JBQ3JELDJCQUEyQixFQUFDLElBQUksQ0FBQyxVQUFVO2dCQUMzQzs2RUFDNkQ7Z0JBQzdELHNCQUFzQixFQUFDLElBQUksQ0FBQyxpQkFBaUI7Z0JBQzdDLDJCQUEyQixFQUFDLElBQUksQ0FBQyxVQUFVO2FBRzlDLENBQUMsQ0FBQyxDQUFBO1lBRUgsNkRBQTZEO1lBQzdELHdFQUF3RTtZQUV4RSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFeEIsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFBO1lBQzNCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUN4QixvQ0FBb0M7WUFFcEMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUE7WUFDaEMsK0JBQStCO1lBQy9CLHNCQUFzQjtZQUV0QixXQUFXLENBQUMsZUFBZSxFQUFFLENBQUE7WUFFN0IsZUFBZSxDQUFDLHlCQUF5QixDQUFDLDREQUE0RCxDQUFDLENBQUE7UUFDM0csQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBbENlLDRCQUFRLFdBa0N2QixDQUFBO0lBR0Q7UUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFGZSwrQkFBVyxjQUUxQixDQUFBO0lBRUQ7UUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFGZSxpQ0FBYSxnQkFFNUIsQ0FBQTtJQUVELHVCQUE4QixTQUFTO1FBQ25DLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUZlLGlDQUFhLGdCQUU1QixDQUFBO0lBRUQ7UUFDSSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUZlLDhCQUFVLGFBRXpCLENBQUE7SUFFVSwwQkFBTSxHQUFHO1FBQ2hCLFFBQVEsRUFBRTtZQUNOLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFO2dCQUNMLGFBQWE7YUFDaEI7U0FDSjtRQUNELHNCQUFzQixFQUFFO1lBQ3BCLElBQUksRUFBRSxTQUFTO1lBQ2YsT0FBTyxFQUFFLElBQUk7U0FDaEI7S0FDSixDQUFBO0FBQ0wsQ0FBQyxFQXJFTSxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBcUV6QjtBQUNELGlCQUFRLG1CQUFtQixDQUFBIiwiZmlsZSI6InNyYy9hdG9tL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG4vLyBpbXBvcnQgQ29uc29sZSA9IHJlcXVpcmUoJy4vY29uc29sZS9pbmRleCcpO1xuaW1wb3J0IGFwaUxpc3QgPSByZXF1aXJlKCcuL3BvcHVsYXItYXBpcy9wb3B1bGFyLWFwaXMnKTtcbmltcG9ydCBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbmltcG9ydCBlZGl0b3JUb29scz1yZXF1aXJlKCcuL2VkaXRvci10b29scy9lZGl0b3ItdG9vbHMnKVxuaW1wb3J0IHF1aWNrQ29tbWFuZHMgPSByZXF1aXJlKCcuL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzJylcbmltcG9ydCBwcm92aWRlcj1yZXF1aXJlKFwiLi9zdWdnZXN0aW9uL3Byb3ZpZGVyXCIpXG5pbXBvcnQgcXVpY2tPdXRsaW5lPXJlcXVpcmUoXCIuL3F1aWNrLW91dGxpbmUvcXVpY2stb3V0bGluZVwiKVxuaW1wb3J0IGRlY2w9cmVxdWlyZShcIi4vZGlhbG9ncy9hc3Npc3QtdXRpbHNcIilcbmltcG9ydCBsaW50ZXJVST1yZXF1aXJlKFwiLi9jb3JlL2xpbnRlci11aVwiKVxuaW1wb3J0IHBhdGNoRWxlbWVudHM9cmVxdWlyZShcIi4vY29yZS9wYXRjaEVsZW1lbnRzXCIpXG52YXIgQ29tcG9zaXRlRGlzcG9zYWJsZSA9IHJlcXVpcmUoJ2F0b20nKS5Db21wb3NpdGVEaXNwb3NhYmxlO1xuLy8gaW1wb3J0IHNoYXJlZEFTVEluaXRpYWxpemVyID0gcmVxdWlyZShcIi4vc2hhcmVkLWFzdC1pbml0aWFsaXplclwiKVxuaW1wb3J0IGNvbW1hbmRNYW5hZ2VyID0gcmVxdWlyZShcIi4vcXVpY2stY29tbWFuZHMvY29tbWFuZC1tYW5hZ2VyXCIpXG5pbXBvcnQgY29udGV4dE1lbnUgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvY29udGV4dE1lbnVcIilcbi8vIGltcG9ydCBxdWlja0ZpeEFjdGlvbnMgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvcXVpY2tGaXhcIilcbi8vIGltcG9ydCBhY3Rpb25zID0gcmVxdWlyZShcIi4vY29udGV4dC1tZW51L2FjdGlvbnNcIilcbmltcG9ydCBjb250ZXh0TWVudUltcGwgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvY29udGV4dE1lbnVJbXBsXCIpXG5cbm1vZHVsZSBwYWNrYWdlX2VudHJ5X3BvaW50IHtcblxuICAgIHZhciBzdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlIChzdGF0ZSkge1xuICAgICAgICByZXF1aXJlKCdhdG9tLXBhY2thZ2UtZGVwcycpLmluc3RhbGwoJ2FwaS13b3JrYmVuY2gnLCB0cnVlKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICAgICAgICAgICAgICAgLyonYXBpLXdvcmtiZW5jaDpwb3B1bGFyLWFwaXMnOiBhcGlMaXN0LnNob3dQb3B1bGFyQXBpcywqL1xuICAgICAgICAgICAgICAgICAgICAnYXBpLXdvcmtiZW5jaDplZGl0b3ItdG9vbHMnOmVkaXRvclRvb2xzLmluaXRFZGl0b3JUb29scyxcbiAgICAgICAgICAgICAgICAgICAgLyonYXBpLXdvcmtiZW5jaDpjb25zb2xlJzogQ29uc29sZS50b2dnbGUsKi9cbiAgICAgICAgICAgICAgICAgICAgJ2FwaS13b3JrYmVuY2g6Z28tdG8tZGVmaW5pdGlvbic6ZGVjbC5nb3RvRGVjbGFyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICdhcGktd29ya2JlbmNoOmZpbmQtdXNhZ2VzJzpkZWNsLmZpbmRVc2FnZXMsXG4gICAgICAgICAgICAgICAgICAgIC8qJ2FwaS13b3JrYmVuY2g6cXVpY2stb3V0bGluZSc6cXVpY2tPdXRsaW5lLnNob3csXG4gICAgICAgICAgICAgICAgICAgICdhcGktd29ya2JlbmNoOnF1aWNrLWNvbW1hbmRzJzogcXVpY2tDb21tYW5kcy5zaG93Q29tbWFuZHMsKi9cbiAgICAgICAgICAgICAgICAgICAgJ2FwaS13b3JrYmVuY2g6cmVuYW1lJzpkZWNsLnJlbmFtZVJBTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnYXBpLXdvcmtiZW5jaDpuZXctcHJvamVjdCc6ZGVjbC5uZXdQcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOnNlbGVjdC1ub2RlJzpkZWNsLnNlbGVjdCwqL1xuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOnJldmFsaWRhdGUnOmRlY2wucmV2YWxpZGF0ZSovXG4gICAgICAgICAgICAgICAgfSkpXG5cbiAgICAgICAgICAgICAgICAvL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihDb25zb2xlLm9wZW5lcikpXG4gICAgICAgICAgICAgICAgLy8vL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihSYW1sU2NyaXB0UmVwb3J0Lm9wZW5lcikpXG5cbiAgICAgICAgICAgICAgICBwYXRjaEVsZW1lbnRzLmRvUGF0Y2goKTtcblxuICAgICAgICAgICAgICAgIGNvbW1hbmRNYW5hZ2VyLmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIC8vIHNoYXJlZEFTVEluaXRpYWxpemVyLmluaXRpYWxpemUoKVxuXG4gICAgICAgICAgICAgICAgcXVpY2tDb21tYW5kcy5yZWdpc3RlckNvbW1hbmRzKClcbiAgICAgICAgICAgICAgICAvLyBxdWlja0ZpeEFjdGlvbnMuaW5pdGlhbGl6ZSgpXG4gICAgICAgICAgICAgICAgLy8gYWN0aW9ucy5yZWdpc3RlcigpO1xuXG4gICAgICAgICAgICAgICAgZWRpdG9yVG9vbHMuaW5pdEVkaXRvclRvb2xzKClcblxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51SW1wbC5pbml0aWFsaXplQWN0aW9uQmFzZWRNZW51KCdhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cInNvdXJjZSByYW1sXCJdLC5yYW1sLW91dGxpbmUnKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRQcm92aWRlcigpe1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVMaW50ZXIoKXtcbiAgICAgICAgcmV0dXJuIGxpbnRlclVJO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb25zdW1lTGludGVyKGxpbnRlckFwaSkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLmFkZChsaW50ZXJVSS5pbml0RWRpdG9yT2JzZXJ2ZXJzKGxpbnRlckFwaSkpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCl7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gICAgfVxuXG4gICAgZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgICAgIGdyYW1tYXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgZGVmYXVsdDogW1xuICAgICAgICAgICAgICAgICdzb3VyY2UucmFtbCdcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3BlbkNvbnNvbGVJblNwbGl0UGFuZToge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0ID1wYWNrYWdlX2VudHJ5X3BvaW50XG4iXX0=\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar path = __webpack_require__(2);\n\tvar atom = __webpack_require__(3);\n\tvar detailsView = __webpack_require__(4);\n\tvar outlineView = __webpack_require__(20);\n\tvar ramlServer = __webpack_require__(17);\n\tvar markOccurrences = __webpack_require__(21);\n\tvar _bmc = 0;\n\tfunction benchmark(func) {\n\t    var t0 = new Date().getTime();\n\t    if (_bmc != 0 && func)\n\t        console.log(func + \" took \" + (t0 - _bmc) + \" miliseconds.\");\n\t    _bmc = t0;\n\t}\n\tvar EditorManager = /** @class */ (function () {\n\t    function EditorManager(display) {\n\t        if (display === void 0) { display = true; }\n\t        var _this = this;\n\t        this._initialized = false;\n\t        this.opened = false;\n\t        this.updateCount = 0;\n\t        this.outlineCount = 0;\n\t        this._cleanOutline = false;\n\t        this.performanceDebug = true;\n\t        this.fire = true;\n\t        this.placeholder = false;\n\t        manager = window[\"manager\"] = this;\n\t        this.markOccurrencesReconciler = new ramlServer.Reconciler(ramlServer.getNodeClientConnection(), 200);\n\t        atom.workspace.onDidChangeActivePaneItem(function (e) { return _this.updateEverything(display); });\n\t        atom.workspace.observeTextEditors(function (editor) {\n\t            editor.onDidDestroy(function () {\n\t                var path = editor.getPath();\n\t                ramlServer.getNodeClientConnection().documentClosed(path);\n\t            });\n\t            editor.onDidChangeCursorPosition(function (event) { return _this.cursorChanged(editor, event.newBufferPosition); });\n\t        });\n\t        this.updateEverything(display);\n\t        this.addAutoCloseListener();\n\t        this.addListenersForStructure();\n\t    }\n\t    EditorManager.prototype.getPath = function () {\n\t        console.log(\"ETM::GetPath\");\n\t        return this.currentEditor ? this.currentEditor.getPath() : null;\n\t    };\n\t    EditorManager.prototype.getCurrentEditor = function () { return this.currentEditor; };\n\t    EditorManager.prototype.getCurrentPosition = function () {\n\t        return this.currentPosition;\n\t    };\n\t    EditorManager.prototype.cursorChanged = function (editor, newBufferPosition) {\n\t        markOccurrences.clearOccurences(editor);\n\t        this.markOccurrencesReconciler.schedule(new markOccurrences.MarkOccurrenceRunnable(editor, newBufferPosition));\n\t        var buffer = editor.getBuffer();\n\t        var pos = buffer.characterIndexForPosition(editor.getCursorBufferPosition());\n\t        ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, pos);\n\t        this.currentPosition = pos;\n\t    };\n\t    EditorManager.prototype.internalScheduleUpdateViews = function (count) {\n\t        var _this = this;\n\t        this.updateCount = count;\n\t        setTimeout(function () {\n\t            if (_this.updateCount == count) {\n\t                _this.updateViews();\n\t            }\n\t        }, 500);\n\t    };\n\t    EditorManager.prototype.scheduleViewsUpdate = function () {\n\t        if (this.fire) {\n\t            this.internalScheduleUpdateViews(this.updateCount + 1);\n\t        }\n\t    };\n\t    EditorManager.prototype.internalScheduleOutlineUpdate = function (count) {\n\t        var _this = this;\n\t        this.outlineCount = count;\n\t        setTimeout(function () {\n\t            if (_this.outlineCount == count) {\n\t                _this.updateOutline();\n\t            }\n\t        }, 500);\n\t    };\n\t    EditorManager.prototype.scheduleOutlineUpdate = function () {\n\t        this.internalScheduleOutlineUpdate(this.outlineCount + 1);\n\t    };\n\t    EditorManager.prototype.addAutoCloseListener = function () {\n\t        var _this = this;\n\t        atom.workspace.onDidDestroyPane(function (evt) {\n\t            try {\n\t                var edcount = atom.workspace.getPaneItems().filter(function (e) {\n\t                    return e['softTabs'] != undefined;\n\t                }).length;\n\t                if (edcount == 0) {\n\t                    // this.ast=null;\n\t                    // this.unit=null;\n\t                    // this._currentNode=null;\n\t                    _this.currentEditor = null;\n\t                    if (global.cleanCache) {\n\t                        global.cleanCache();\n\t                    }\n\t                    if (atom.workspace.paneForItem(_this._view))\n\t                        atom.workspace.paneForItem(_this._view).destroy();\n\t                    if (atom.workspace.paneForItem(_this._details))\n\t                        atom.workspace.paneForItem(_this._details).destroy();\n\t                    _this.opened = false;\n\t                }\n\t            }\n\t            catch (e) {\n\t                //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n\t                console.log(e);\n\t            }\n\t        });\n\t    };\n\t    EditorManager.prototype.getOrCreateView = function () {\n\t        if (!this._view) {\n\t            this._view = new outlineView.RamlOutline();\n\t            if (this.unitPath) {\n\t                this._view.setUnit(this.unitPath);\n\t            }\n\t            // if (this.ast){\n\t            //     this._view.setUnit(this.ast);\n\t            // }\n\t        }\n\t        return this._view;\n\t    };\n\t    EditorManager.prototype.getDetails = function () {\n\t        if (!EditorManager.DETAILS_SUPPORT)\n\t            return null;\n\t        if (!this._details)\n\t            this._details = new detailsView.RamlDetails();\n\t        return this._details;\n\t    };\n\t    EditorManager.prototype.updateDetails = function () {\n\t        this.getDetails().update();\n\t    };\n\t    EditorManager.prototype.reparseAST = function () {\n\t        if (this.currentEditor) {\n\t            var _path = this.currentEditor.getPath();\n\t            var bf = this.currentEditor.getBuffer();\n\t            this.unitPath = _path;\n\t            // var prj = project.createProject(path.dirname(_path));\n\t            // var unit = prj.setCachedUnitContent(path.basename(_path), this.currentEditor.getBuffer().getText());\n\t            //\n\t            // unit.project().addTextChangeListener(delta=>{\n\t            //     if (delta.unit!=unit){\n\t            //         return;\n\t            //     }\n\t            //     var cm=delta.offset;\n\t            //     var end=delta.replacementLength;\n\t            //     var text=delta.text;\n\t            //     var buffer=(<atom.IBuffer>this.currentEditor.getBuffer());\n\t            //     var start=buffer.positionForCharacterIndex(cm);\n\t            //     var endPosition=buffer.positionForCharacterIndex(cm+end);\n\t            //     try {\n\t            //         this.fire=false;\n\t            //         (<any>buffer).setTextInRange({start: start, end: endPosition}, text);\n\t            //         this.scheduleOutlineUpdate();\n\t            //     } finally{\n\t            //         this.fire=true;\n\t            //     }\n\t            // });\n\t            // this.ast = unit.highLevel();\n\t            // this.unit = unit;\n\t        }\n\t    };\n\t    EditorManager.prototype.isETPane = function (pane) {\n\t        if (!this._view) {\n\t            return;\n\t        }\n\t        var items = pane.getItems();\n\t        return ((EditorManager.DETAILS_SUPPORT && items.indexOf(this.getDetails()) >= 0)\n\t            || items.indexOf(this._view) >= 0);\n\t    };\n\t    EditorManager.prototype.display = function () {\n\t        console.log(\"ETM::Display\");\n\t        var aw = atom.workspace;\n\t        var fpane = atom.workspace.paneForItem(this.getCurrentEditor());\n\t        if (!fpane)\n\t            return;\n\t        if (!aw.paneForItem(this.getOrCreateView()))\n\t            doSplit(this.getOrCreateView());\n\t        if (EditorManager.DETAILS_SUPPORT) {\n\t            if (!aw.paneForItem(manager.getDetails()))\n\t                doSplit(this.getDetails(), SplitDirections.BOTTOM);\n\t        }\n\t        this.opened = true;\n\t    };\n\t    // updateText(node?: ll.ILowLevelASTNode) {\n\t    //     this.fire = false;\n\t    //     var editor = this.currentEditor;\n\t    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n\t    //     editor.setText(this.unit.contents());\n\t    //     this.fire = true;\n\t    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n\t    // }\n\t    // selectNode(hnode: hl.IHighLevelNode) {\n\t    //     var node = hnode.lowLevel();\n\t    //     if (!node) return;\n\t    //     var editor = this.currentEditor;\n\t    //     if (!editor) return;\n\t    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n\t    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n\t    // }\n\t    EditorManager.prototype.setViewsDisplayStyle = function (visible) {\n\t        if (this._details && this._details.element) {\n\t            this._details.element.style.display = visible ? null : \"none\";\n\t        }\n\t        if (this._view && this._view.element) {\n\t            this._view.element.style.display = visible ? null : \"none\";\n\t        }\n\t    };\n\t    EditorManager.prototype.isRaml = function (editor) {\n\t        if (!editor) {\n\t            return false;\n\t        }\n\t        var editorPath = editor.getPath();\n\t        if (!editorPath) {\n\t            return false;\n\t        }\n\t        var extName = path.extname(editorPath);\n\t        if (extName !== '.raml') {\n\t            return false;\n\t        }\n\t        return true;\n\t    };\n\t    EditorManager.prototype.updateEverything = function (display) {\n\t        if (display === void 0) { display = true; }\n\t        var editor = atom.workspace.getActiveTextEditor();\n\t        if (editor) {\n\t            this.setViewsDisplayStyle(this.isRaml(editor));\n\t        }\n\t        if (!editor || editor == this.currentEditor || !this.isRaml(editor)) {\n\t            return;\n\t        }\n\t        this.currentEditor = editor;\n\t        if (this.opened == false && display)\n\t            this.display();\n\t        //we are not listening to the editor changes any more,\n\t        //instead we are listening to the reports of the server that something is avilable, like the structure\n\t        if (!editor.patched) {\n\t            this.addListenersToEditor(editor);\n\t        }\n\t        this.reparseAST();\n\t        var pos = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());\n\t        this.positionUpdated(pos);\n\t        this.scheduleViewsUpdate();\n\t    };\n\t    EditorManager.prototype.addListenersToEditor = function (cedit) {\n\t        var _this = this;\n\t        var buffer = cedit.getBuffer();\n\t        buffer.onDidChange(function (x) {\n\t            try {\n\t                //this.reparseAST();\n\t                var pos = buffer.characterIndexForPosition(cedit.getCursorBufferPosition());\n\t                _this.positionUpdated(pos);\n\t                //this.scheduleViewsUpdate();\n\t            }\n\t            catch (e) {\n\t                console.log(e);\n\t            }\n\t        });\n\t        //updating ast node on position change\n\t        // cedit.getLastCursor().onDidChangePosition(x=> {\n\t        //     if (!this.fire) return;\n\t        //     this.positionUpdated(buffer.characterIndexForPosition(cedit.getCursorBufferPosition()));\n\t        //     this.scheduleViewsUpdate();\n\t        // });\n\t        this.addListenersOnMove(cedit);\n\t        this.currentEditor.patched = true;\n\t    };\n\t    EditorManager.prototype.addListenersForStructure = function () {\n\t        var _this = this;\n\t        ramlServer.getNodeClientConnection().onStructureReport(function (report) {\n\t            var categoryNames = [];\n\t            for (var categoryName in report.structure)\n\t                categoryNames.push(categoryName);\n\t            var categoryNamesString = categoryNames.join();\n\t            ramlServer.getNodeClientConnection().debug(\"Got new structure report with categories \"\n\t                + categoryNamesString, \"EditorManager\", \"addListenersForStructure\");\n\t            var editor = atom.workspace.getActiveTextEditor();\n\t            if (!editor || !_this.isRaml(editor)) {\n\t                return;\n\t            }\n\t            _this.updateOutline();\n\t        });\n\t    };\n\t    EditorManager.prototype.addListenersOnMove = function (cedit) {\n\t        var _this = this;\n\t        var movingPane = false;\n\t        atom.workspace.onDidAddPaneItem(function (event) {\n\t            if (movingPane || _this.isETPane(event.pane) == false || event.item == _this.getOrCreateView() || (EditorManager.DETAILS_SUPPORT && event.item == _this.getDetails()))\n\t                return event;\n\t            setTimeout(function () {\n\t                try {\n\t                    var fpane = atom.workspace.paneForItem(cedit);\n\t                    if (fpane) {\n\t                        movingPane = true;\n\t                        event.pane.moveItemToPane(event.item, fpane, null);\n\t                        movingPane = false;\n\t                        fpane.setActiveItem(event.item);\n\t                        fpane.activate();\n\t                    }\n\t                }\n\t                catch (e) {\n\t                    //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n\t                    console.log(e);\n\t                }\n\t            }, 18);\n\t        });\n\t    };\n\t    // _currentNode: hl.IHighLevelNode;\n\t    // //_selectedNode: hl.IHighLevelNode;\n\t    // patchCurrentNode(n:hl.IHighLevelNode){\n\t    //     this._currentNode=n;\n\t    // }\n\t    //\n\t    // getCurrentNode() {\n\t    //     if (this._currentNode == null) return this._currentNode = this.ast;\n\t    //     else return this._currentNode;\n\t    // }\n\t    // setSelectedNode(node: hl.IHighLevelNode) {\n\t    //     //this._selectedNode = node;\n\t    //\n\t    //     if (this.unit){\n\t    //         var unitPath=this.unit.absolutePath();\n\t    //         while (node.lowLevel().unit().absolutePath()!=unitPath){\n\t    //             if (!node.parent()){\n\t    //                 break;\n\t    //             }\n\t    //             else{\n\t    //                 node=node.parent();\n\t    //             }\n\t    //         }\n\t    //     }\n\t    //     var id=node.id();\n\t    //     var anode=this.ast.findById(id);\n\t    //     if (anode){\n\t    //         node=anode;\n\t    //     }\n\t    //     if (this._details){\n\t    //         this._details.show(node);\n\t    //     }\n\t    //     var editor = this.getCurrentEditor();\n\t    //     if (editor) {\n\t    //         this.fire=false;\n\t    //         try {\n\t    //             var buffer = editor.getBuffer();\n\t    //             var posStart = buffer.positionForCharacterIndex(node.lowLevel().start());\n\t    //             var posEnd = buffer.positionForCharacterIndex(node.lowLevel().end());\n\t    //             editor.setCursorBufferPosition(posStart);\n\t    //             this.positionUpdated(buffer.characterIndexForPosition(editor.getCursorBufferPosition()));\n\t    //         }finally{\n\t    //             this.fire=true;\n\t    //         }\n\t    //     }\n\t    // }\n\t    // getSelectedNode() {\n\t    //     return this.getCurrentNode()\n\t    //     //else return this._selectedNode;\n\t    // }\n\t    EditorManager.prototype.setText = function (text) {\n\t        console.log(\"ETM::SetText\");\n\t        var editor = this.currentEditor;\n\t        if (editor == null)\n\t            return;\n\t        editor.setText(text);\n\t    };\n\t    EditorManager.prototype.isFromEdgeRow = function () {\n\t        var editor = this.getCurrentEditor();\n\t        if (!editor) {\n\t            return false;\n\t        }\n\t        var currentPosition = editor.getCursorBufferPosition();\n\t        if (!currentPosition) {\n\t            return false;\n\t        }\n\t        var currentRow = currentPosition.row;\n\t        var previousRow = editor.previousRow;\n\t        editor.previousRow = currentRow;\n\t        if (previousRow === undefined) {\n\t            return false;\n\t        }\n\t        if (previousRow === currentRow) {\n\t            return false;\n\t        }\n\t        if (previousRow === editor.getBuffer().getLastRow() || previousRow === 0) {\n\t            return true;\n\t        }\n\t    };\n\t    EditorManager.prototype.updateViews = function () {\n\t        //var cNode = this.getCurrentNode();\n\t        var ds = new Date().getMilliseconds();\n\t        if (EditorManager.DETAILS_SUPPORT && this._details) {\n\t            this.getDetails().show(manager.unitPath, manager.currentPosition, this.isFromEdgeRow());\n\t        }\n\t        if (this._view) {\n\t            this.getOrCreateView().setUnit(manager.unitPath);\n\t            // this.getOrCreateView().setUnit(manager.ast);\n\t            //this.getOrCreateView().setSelection(cNode);\n\t        }\n\t        var d1 = new Date().getMilliseconds();\n\t        if (this.performanceDebug) {\n\t            console.log(\"Views update:\" + (d1 - ds));\n\t        }\n\t    };\n\t    EditorManager.prototype.updateOutline = function () {\n\t        ramlServer.getNodeClientConnection().debug(\"Updating outline\", \"EditorManager\", \"updateOutline\");\n\t        if (this._view) {\n\t            this.getOrCreateView().setUnit(manager.unitPath);\n\t        }\n\t    };\n\t    EditorManager.prototype.positionUpdated = function (newPosition) {\n\t        this.currentPosition = newPosition;\n\t        if (this._details) {\n\t            ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, this.currentPosition);\n\t            // this.getDetails().show(manager.unitPath, this.currentPosition, this.isFromEdgeRow());\n\t        }\n\t        // if (this.ast){\n\t        //     this._currentNode=this.ast.findElementAtOffset(this.currentPosition);\n\t        // }\n\t    };\n\t    EditorManager.DETAILS_SUPPORT = true;\n\t    return EditorManager;\n\t}());\n\tvar manager = null;\n\tfunction initEditorTools(display) {\n\t    if (display === void 0) { display = true; }\n\t    if (manager == null)\n\t        manager = new EditorManager(display);\n\t    else if (display)\n\t        manager.display();\n\t}\n\texports.initEditorTools = initEditorTools;\n\tfunction editorToolsStatus() {\n\t    return manager != null && manager.opened;\n\t}\n\texports.editorToolsStatus = editorToolsStatus;\n\tfunction aquireManager() {\n\t    if (!manager) {\n\t        manager = new EditorManager(true);\n\t    }\n\t    return manager;\n\t}\n\texports.aquireManager = aquireManager;\n\t// export function updateAndSelect(node:hl.IHighLevelNode){\n\t//     if (aquireManager()._view) {\n\t//         aquireManager()._view.refresh();\n\t//     }\n\t//     aquireManager().updateText();\n\t//     aquireManager().selectNode(node);\n\t// }\n\tvar SplitDirections;\n\t(function (SplitDirections) {\n\t    SplitDirections[SplitDirections[\"RIGHT\"] = 0] = \"RIGHT\";\n\t    SplitDirections[SplitDirections[\"LEFT\"] = 1] = \"LEFT\";\n\t    SplitDirections[SplitDirections[\"TOP\"] = 2] = \"TOP\";\n\t    SplitDirections[SplitDirections[\"BOTTOM\"] = 3] = \"BOTTOM\";\n\t})(SplitDirections = exports.SplitDirections || (exports.SplitDirections = {}));\n\tfunction doSplit(value, dir) {\n\t    if (dir === void 0) { dir = SplitDirections.RIGHT; }\n\t    var newPane = null;\n\t    switch (dir) {\n\t        case SplitDirections.BOTTOM:\n\t            newPane = atom.workspace.getActivePane().splitDown({});\n\t            break;\n\t        case SplitDirections.TOP:\n\t            newPane = atom.workspace.getActivePane().splitUp({});\n\t            break;\n\t        case SplitDirections.LEFT:\n\t            newPane = atom.workspace.getActivePane().splitLeft({});\n\t            break;\n\t        case SplitDirections.RIGHT:\n\t            newPane = atom.workspace.getActivePane().splitRight({});\n\t            break;\n\t    }\n\t    newPane.addItem(value);\n\t    return newPane;\n\t}\n\texports.doSplit = doSplit;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"path\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar Workspace = /** @class */ (function () {\n\t    function Workspace() {\n\t    }\n\t    Workspace.prototype.onDidChangeActivePaneItem = function (callback) {\n\t        return atom.workspace.onDidChangeActivePaneItem(callback);\n\t    };\n\t    Workspace.prototype.addModalPanel = function (arg) {\n\t        return atom.workspace.addModalPanel(arg);\n\t    };\n\t    Workspace.prototype.getActiveTextEditor = function () {\n\t        return atom.workspace.getActiveTextEditor();\n\t    };\n\t    Workspace.prototype.getActivePane = function () {\n\t        return atom.workspace.getActivePane();\n\t    };\n\t    Workspace.prototype.getActiveEditor = function () {\n\t        return atom.workspace.getActiveEditor();\n\t    };\n\t    Workspace.prototype.addRightPanel = function (arg) {\n\t        return atom.workspace.addRightPanel(arg);\n\t    };\n\t    Workspace.prototype.paneForItem = function (arg) {\n\t        return atom.workspace.paneForItem(arg);\n\t    };\n\t    Workspace.prototype.getPaneItems = function () {\n\t        return atom.workspace.getPaneItems();\n\t    };\n\t    Workspace.prototype.onDidAddPaneItem = function (callback) {\n\t        return atom.workspace.onDidAddPaneItem(callback);\n\t    };\n\t    Workspace.prototype.onDidDestroyPane = function (callback) {\n\t        return atom.workspace.onDidDestroyPane(callback);\n\t    };\n\t    Workspace.prototype.open = function (path, args) {\n\t        atom.workspace.open(path, args);\n\t    };\n\t    Workspace.prototype.observeTextEditors = function (callback) {\n\t        atom.workspace.observeTextEditors(callback);\n\t    };\n\t    return Workspace;\n\t}());\n\texports.Workspace = Workspace;\n\tfunction open(pathsToOpen) {\n\t    atom.open(pathsToOpen);\n\t}\n\texports.open = open;\n\texports.workspace = new Workspace();\n\tvar CommandManager = /** @class */ (function () {\n\t    function CommandManager() {\n\t    }\n\t    CommandManager.prototype.add = function (selector, type, callback) {\n\t        return atom.commands.add(selector, type, callback);\n\t    };\n\t    return CommandManager;\n\t}());\n\texports.CommandManager = CommandManager;\n\texports.commands = new CommandManager();\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvYXRvbVdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQ7SUFBQTtJQTRDQSxDQUFDO0lBM0NHLDZDQUF5QixHQUF6QixVQUEwQixRQUEwQjtRQUNoRCxNQUFNLENBQU8sSUFBSSxDQUFDLFNBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsaUNBQWEsR0FBYixVQUFjLEdBQW9CO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsdUNBQW1CLEdBQW5CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsaUNBQWEsR0FBYjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxtQ0FBZSxHQUFmO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFhLEdBQWIsVUFBYyxHQUFRO1FBQ2xCLE1BQU0sQ0FBTyxJQUFJLENBQUMsU0FBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLEdBQVE7UUFDaEIsTUFBTSxDQUFPLElBQUksQ0FBQyxTQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxnQ0FBWSxHQUFaO1FBQ0ksTUFBTSxDQUFRLElBQUksQ0FBQyxTQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUNELG9DQUFnQixHQUFoQixVQUFpQixRQUFvRTtRQUNqRixNQUFNLENBQVEsSUFBSSxDQUFDLFNBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0Qsb0NBQWdCLEdBQWhCLFVBQWlCLFFBQTBDO1FBQ3ZELE1BQU0sQ0FBUSxJQUFJLENBQUMsU0FBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCx3QkFBSSxHQUFKLFVBQUssSUFBSSxFQUFFLElBQUk7UUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHNDQUFrQixHQUFsQixVQUFtQixRQUFxQztRQUNwRCxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTCxnQkFBQztBQUFELENBNUNBLEFBNENDLElBQUE7QUE1Q1ksOEJBQVM7QUE4Q3RCLGNBQXFCLFdBQVc7SUFDdEIsSUFBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRkQsb0JBRUM7QUE2RVUsUUFBQSxTQUFTLEdBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQU1qRDtJQUFBO0lBSUEsQ0FBQztJQUhHLDRCQUFHLEdBQUgsVUFBSSxRQUFnQixFQUFFLElBQVksRUFBRSxRQUFvQjtRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQUpZLHdDQUFjO0FBTWhCLFFBQUEsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9hdG9tV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5leHBvcnQgY2xhc3MgV29ya3NwYWNlIHtcbiAgICBvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrOihhcmc6YW55KSA9PiB2b2lkKTp2b2lkIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBhZGRNb2RhbFBhbmVsKGFyZzpBZGRNb2RhbFBhbmVsQXJnKTphbnkge1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbChhcmcpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZVRleHRFZGl0b3IoKTogSVRleHRFZGl0b3Ige1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZVBhbmUoKTogSVBhbmUge1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZSgpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZUVkaXRvcigpOiBJRWRpdG9yIHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZUVkaXRvcigpO1xuICAgIH1cblxuICAgIGFkZFJpZ2h0UGFuZWwoYXJnOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5hZGRSaWdodFBhbmVsKGFyZyk7XG4gICAgfVxuXG4gICAgcGFuZUZvckl0ZW0oYXJnOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5wYW5lRm9ySXRlbShhcmcpO1xuICAgIH1cbiAgICBnZXRQYW5lSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiAoPGFueT4gYXRvbS53b3Jrc3BhY2UpLmdldFBhbmVJdGVtcygpO1xuICAgIH1cbiAgICBvbkRpZEFkZFBhbmVJdGVtKGNhbGxiYWNrOiAoZXZlbnQ6IHsgaXRlbTogYW55OyBwYW5lOiBJUGFuZTsgaW5kZXg6IG51bWJlciB9KSA9PiB2b2lkKSB7XG4gICAgICAgIHJldHVybiAoPGFueT4gYXRvbS53b3Jrc3BhY2UpLm9uRGlkQWRkUGFuZUl0ZW0oY2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkRpZERlc3Ryb3lQYW5lKGNhbGxiYWNrOiAoZXZlbnQ6IHsgcGFuZTogSVBhbmUgfSkgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gKDxhbnk+IGF0b20ud29ya3NwYWNlKS5vbkRpZERlc3Ryb3lQYW5lKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb3BlbihwYXRoLCBhcmdzKSB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4ocGF0aCwgYXJncyk7XG4gICAgfVxuXG4gICAgb2JzZXJ2ZVRleHRFZGl0b3JzKGNhbGxiYWNrIDogKGVkaXRvcjpJVGV4dEVkaXRvcik9PnZvaWQpIHtcbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuKHBhdGhzVG9PcGVuKSB7XG4gICAgKDxhbnk+YXRvbSkub3BlbihwYXRoc1RvT3Blbik7XG59XG5cbmludGVyZmFjZSBJUGFuZSB7XG4gICAgc3BsaXRVcChhcmc6YW55KTogSVBhbmU7XG5cbiAgICBzcGxpdERvd24oYXJnOmFueSk6IElQYW5lO1xuXG4gICAgc3BsaXRMZWZ0KGFyZzphbnkpOiBJUGFuZTtcblxuICAgIHNwbGl0UmlnaHQoYXJnOmFueSk6IElQYW5lO1xuXG4gICAgYWRkSXRlbShpdGVtOmFueSwgaW5kZXg6bnVtYmVyKTtcblxuICAgIGFjdGl2YXRlSXRlbUF0SW5kZXgoYXJnOiBhbnkpO1xuICAgIFxuICAgIG1vdmVJdGVtVG9QYW5lKGl0ZW06YW55LCBwYW5lOklQYW5lLCBpbmRleDpudW1iZXIpOnZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnR7XG4gICAgcm93Om51bWJlcjtcbiAgICBjb2x1bW46bnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhbmdlIHtcbiAgICBzdGFydDpQb2ludDtcbiAgICBlbmQ6UG9pbnQ7XG59XG5cbmV4cG9ydCAgaW50ZXJmYWNlICBJQ3Vyc29yIHtcbiAgICBnZXRCdWZmZXJQb3NpdGlvbigpOiBQb2ludDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSAgSUJ1ZmZlciB7XG4gICAgcG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChpbmRleE9mOmFueSk6IFBvaW50O1xuICAgIGNoYXJhY3RlckluZGV4Rm9yUG9zaXRpb24ocG9zaXRpb246UG9pbnQpOm51bWJlcjtcblxuICAgIHJhbmdlRm9yUm93KGFueSk6IFJhbmdlO1xuXG4gICAgc2V0VGV4dCh0ZXh0KTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlICBJVGV4dEVkaXRvciB7XG4gICAgZ2V0VGV4dCgpOiBzdHJpbmc7XG5cbiAgICBnZXRQYXRoKCk6IHN0cmluZztcblxuICAgIGdldExhc3RDdXJzb3IoKTogSUN1cnNvcjtcblxuICAgIGdldEJ1ZmZlcigpOiBJQnVmZmVyO1xuXG4gICAgc2V0VGV4dCh0ZXh0KTtcblxuICAgIGdldEN1cnNvckJ1ZmZlclBvc2l0aW9uKCk6UG9pbnQ7XG5cbiAgICBvbkRpZERlc3Ryb3koY2FsbGJhY2s6KCk9PnZvaWQpO1xuXG4gICAgb25EaWRDaGFuZ2VDdXJzb3JQb3NpdGlvbihjYWxsYmFjazogKGV2ZW50OntcbiAgICAgICAgIG9sZEJ1ZmZlclBvc2l0aW9uOlBvaW50LFxuICAgICAgICAgb2xkU2NyZWVuUG9zaXRpb246UG9pbnQsXG4gICAgICAgICBuZXdCdWZmZXJQb3NpdGlvbjpQb2ludCxcbiAgICAgICAgIG5ld1NjcmVlblBvc2l0aW9uOlBvaW50LFxuICAgICAgICAgdGV4dENoYW5nZWQ6Ym9vbGVhbixcbiAgICAgICAgIGN1cnNvcjogSUN1cnNvclxuICAgICB9KT0+dm9pZCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgIElFZGl0b3Ige1xuICAgIGdldEJ1ZmZlcigpOiBJQnVmZmVyO1xuXG4gICAgc2V0U2VsZWN0ZWRCdWZmZXJSYW5nZShyYW5nZTogYW55LCBhcmc6IGFueSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkTW9kYWxQYW5lbEFyZyB7XG4gICAgaXRlbTogYW55O1xufVxuXG5leHBvcnQgdmFyIHdvcmtzcGFjZTpXb3Jrc3BhY2UgPSBuZXcgV29ya3NwYWNlKCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbW1hbmRNYW5hZ2VyIHtcbiAgICBhZGQoc2VsZWN0b3I6IHN0cmluZywgdHlwZTogc3RyaW5nLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IEF0b21Db3JlLkRpc3Bvc2FibGU7XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kTWFuYWdlciB7XG4gICAgYWRkKHNlbGVjdG9yOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuIGF0b20uY29tbWFuZHMuYWRkKHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5leHBvcnQgdmFyIGNvbW1hbmRzID0gbmV3IENvbW1hbmRNYW5hZ2VyKCk7Il19\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar UI = __webpack_require__(5);\n\tvar SC = __webpack_require__(6);\n\tvar CompositeDisposable = UI.CompositeDisposable;\n\tvar details = __webpack_require__(8);\n\tvar editorTools = __webpack_require__(1);\n\tvar ramlServer = __webpack_require__(17);\n\tvar reconciler_1 = __webpack_require__(18);\n\tvar RamlDetails = /** @class */ (function (_super) {\n\t    __extends(RamlDetails, _super);\n\t    function RamlDetails(allowStructureChanges) {\n\t        if (allowStructureChanges === void 0) { allowStructureChanges = true; }\n\t        var _this = _super.call(this) || this;\n\t        _this.allowStructureChanges = allowStructureChanges;\n\t        _this.disposables = new CompositeDisposable();\n\t        _this.addClass('raml-details');\n\t        var connection = ramlServer.getNodeClientConnection();\n\t        connection.onDetailsReport(function (report) { return _this.onDetailsReport(report); });\n\t        _this.reconciler = new reconciler_1.Reconciler(connection, 800);\n\t        return _this;\n\t    }\n\t    RamlDetails.prototype.getTitle = function () {\n\t        return \"Details\";\n\t    };\n\t    RamlDetails.prototype.attached = function () {\n\t        try {\n\t            this.element.innerHTML = \"<div></div>\";\n\t            this._children = [];\n\t            this.container = UI.vc();\n\t            this.addChild(this.container);\n\t            this.ui().appendChild(this.container.ui());\n\t            _super.prototype.attached.call(this);\n\t        }\n\t        catch (e) {\n\t        }\n\t    };\n\t    RamlDetails.prototype.setResource = function (detailsNode, context) {\n\t        if (this.wasSchema) {\n\t            this.schemaView.dispose();\n\t            this.schemaView = null;\n\t        }\n\t        this.wasSchema = false;\n\t        window[\"detailsnode\"] = detailsNode;\n\t        window[\"detailscontext\"] = context;\n\t        if (detailsNode == null)\n\t            this.displayEmpty();\n\t        details.updateDetailsPanel(detailsNode, context, this.container, true);\n\t    };\n\t    RamlDetails.prototype.update = function () {\n\t        if (window[\"detailsnode\"]) {\n\t            this.setResource(window[\"detailsnode\"], window[\"detailscontext\"]);\n\t        }\n\t    };\n\t    RamlDetails.prototype.displayEmpty = function () {\n\t        this.container.clear();\n\t        // if (!editorTools.aquireManager().ast) {\n\t        //     this.container.addChild(UI.h3(\"Our API is fabulously empty\").margin(8, 8, 20, 8));\n\t        //     var create = new UI.Button(\"Create new API\", UI.ButtonSizes.LARGE, UI.ButtonHighlights.SUCCESS, UI.Icon.REPO_CLONE, ()=>dialogs.newApi());\n\t        //     create.margin(8, 8, 20, 0);\n\t        //     this.container.addChild(create);\n\t        // }\n\t    };\n\t    RamlDetails.prototype.destroy = function () {\n\t        editorTools.aquireManager()._details = null;\n\t        this.disposables.dispose();\n\t        this._unitPath = null;\n\t        this._position = null;\n\t        this.container.dispose();\n\t        this.container = null;\n\t        window[\"detailsnode\"] = null;\n\t        window[\"detailscontext\"] = null;\n\t        this._children = [];\n\t        if (details.oldItem) {\n\t            details.oldItem.detach();\n\t        }\n\t        if (this.wasSchema) {\n\t            this.schemaView.dispose();\n\t            this.schemaView = null;\n\t        }\n\t        details.oldItem = null;\n\t    };\n\t    RamlDetails.prototype.show = function (unitPath, position, force) {\n\t        var _this = this;\n\t        if (force === void 0) { force = false; }\n\t        if (!force && this._unitPath == unitPath && this._position === position)\n\t            return;\n\t        this._unitPath = unitPath;\n\t        this._position = position;\n\t        var reconciler = this.reconciler;\n\t        try {\n\t            // if (isSchema(node))\n\t            //     this.setSchema(this._node);\n\t            // else\n\t            //     this.setResource(node);\n\t            ramlServer.getNodeClientConnection().getDetails(unitPath, position).then(function (detailsNode) {\n\t                _this.setResource(detailsNode, {\n\t                    uri: unitPath,\n\t                    position: position,\n\t                    localModel: false,\n\t                    reconciler: reconciler\n\t                });\n\t            });\n\t        }\n\t        catch (e) { }\n\t    };\n\t    RamlDetails.prototype.onDetailsReport = function (report) {\n\t        var _this = this;\n\t        if (report.uri != this._unitPath)\n\t            return;\n\t        var reconciler = this.reconciler;\n\t        //if (this._position == report.position) return;\n\t        ramlServer.getNodeClientConnection().getLatestVersion(report.uri).then(function (latestVersion) {\n\t            //ignoring outdated reports\n\t            if (report.version != null && report.version < latestVersion)\n\t                return;\n\t            _this.setResource(report.details, {\n\t                uri: report.uri,\n\t                position: report.position,\n\t                localModel: false,\n\t                reconciler: reconciler,\n\t            });\n\t        });\n\t    };\n\t    return RamlDetails;\n\t}(SC.Scrollable));\n\texports.RamlDetails = RamlDetails;\n\t// function isSchema(p: hl.IHighLevelNode) {\n\t//     if (!p){\n\t//         return false;\n\t//     }\n\t//     return universeHelpers.isGlobalSchemaType(p.definition());\n\t// } \n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom-ui-lib\");\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/**\n\t * Created by kor on 22/06/15.\n\t */\n\tvar SpacePenViews = __webpack_require__(7);\n\tvar Scrollable = /** @class */ (function (_super) {\n\t    __extends(Scrollable, _super);\n\t    function Scrollable() {\n\t        var _this = _super.call(this) || this;\n\t        _this._children = [];\n\t        return _this;\n\t    }\n\t    Scrollable.content = function () {\n\t        var v = this.div({ class: 'scrollpad pane-item padded', tabindex: -1, style: \"overflow:scroll;\" });\n\t        return v;\n\t    };\n\t    Scrollable.prototype.dispose = function () {\n\t    };\n\t    Scrollable.prototype.caption = function () { return \"\"; };\n\t    Scrollable.prototype.scroll = function (top, left) {\n\t        this.element.scrollTop = top;\n\t        this.element.scrollLeft = left;\n\t    };\n\t    Scrollable.prototype.size = function () {\n\t        return {\n\t            top: this.element.scrollTop,\n\t            left: this.element.scrollLeft,\n\t            bottom: this.element.scrollTop + this.element.clientHeight,\n\t            right: this.element.scrollLeft + this.element.clientWidth\n\t        };\n\t    };\n\t    Scrollable.prototype.changed = function () { };\n\t    Scrollable.prototype.refresh = function () { };\n\t    Scrollable.prototype.ui = function () {\n\t        return this.element;\n\t    };\n\t    Scrollable.prototype.setParent = function (p) {\n\t        if (this._parent != null)\n\t            this._parent.removeChild(this);\n\t        this._parent = p;\n\t    };\n\t    //TODO REMOVE COPY PASTE\n\t    Scrollable.prototype.addChild = function (child) {\n\t        child.setParent(this);\n\t        this._children.push(child);\n\t        //this.changed();\n\t    };\n\t    Scrollable.prototype.removeChild = function (child) {\n\t        this._children = this._children.filter(function (x) { return x != child; });\n\t        // this.changed();\n\t    };\n\t    Scrollable.prototype.doRender = function () {\n\t        return this.innerRenderUI();\n\t    };\n\t    /**\n\t     *\n\t     * @returns not null element;\n\t     */\n\t    Scrollable.prototype.selfRender = function () {\n\t        return document.createElement(\"div\");\n\t    };\n\t    Scrollable.prototype.attached = function () {\n\t        this.html(this.innerRenderUI());\n\t    };\n\t    Scrollable.prototype.innerRenderUI = function () {\n\t        var start = this.selfRender();\n\t        this._children.forEach(function (x) {\n\t            var el = x.renderUI();\n\t            if (el) {\n\t                start.appendChild(el);\n\t            }\n\t        });\n\t        return start;\n\t    };\n\t    Scrollable.prototype.renderUI = function () {\n\t        return this.element;\n\t    };\n\t    Scrollable.prototype.parent = function () {\n\t        return null;\n\t    };\n\t    Scrollable.prototype.children = function () {\n\t        return this._children;\n\t    };\n\t    Scrollable.prototype.isAttached = function () {\n\t        return true;\n\t    };\n\t    return Scrollable;\n\t}(SpacePenViews.ScrollView));\n\texports.Scrollable = Scrollable;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvU2Nyb2xsVmlld1VJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsb0RBQXVEO0FBRXZEO0lBQWdDLDhCQUF3QjtJQUlwRDtRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQUpBLGVBQVMsR0FBcUIsRUFBRSxDQUFBOztJQUlqQyxDQUFDO0lBQ00sa0JBQU8sR0FBZDtRQUNJLElBQUksQ0FBQyxHQUFTLElBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUE7UUFFekcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCw0QkFBTyxHQUFQO0lBRUEsQ0FBQztJQUlELDRCQUFPLEdBQVAsY0FBWSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV4QiwyQkFBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLElBQVk7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNJLE1BQU0sQ0FBQztZQUNILEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO1lBQzFELEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7U0FDNUQsQ0FBQTtJQUNMLENBQUM7SUFFRCw0QkFBTyxHQUFQLGNBQVksQ0FBQztJQUNiLDRCQUFPLEdBQVAsY0FBWSxDQUFDO0lBR2IsdUJBQUUsR0FBRjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFJRCw4QkFBUyxHQUFULFVBQVUsQ0FBaUI7UUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELHdCQUF3QjtJQUN4Qiw2QkFBUSxHQUFSLFVBQVMsS0FBNEM7UUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixpQkFBaUI7SUFDckIsQ0FBQztJQUNELGdDQUFXLEdBQVgsVUFBWSxLQUFxQjtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxJQUFJLEtBQUssRUFBVixDQUFVLENBQUMsQ0FBQztRQUN2RCxrQkFBa0I7SUFDdEIsQ0FBQztJQUNELDZCQUFRLEdBQVI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDRDs7O09BR0c7SUFDSywrQkFBVSxHQUFsQjtRQUNJLE1BQU0sQ0FBTSxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ1UsSUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsa0NBQWEsR0FBYjtRQUNJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7WUFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELDJCQUFNLEdBQU47UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELCtCQUFVLEdBQVY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCxpQkFBQztBQUFELENBdkdBLEFBdUdDLENBdkcrQixhQUFhLENBQUMsVUFBVSxHQXVHdkQ7QUF2R1ksZ0NBQVUiLCJmaWxlIjoic3JjL2F0b20vdXRpbC9TY3JvbGxWaWV3VUkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkga29yIG9uIDIyLzA2LzE1LlxuICovXG5pbXBvcnQgU3BhY2VQZW5WaWV3cyA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5pbXBvcnQgVUkgPSByZXF1aXJlKFwiYXRvbS11aS1saWJcIilcbmV4cG9ydCBjbGFzcyBTY3JvbGxhYmxlIGV4dGVuZHMgU3BhY2VQZW5WaWV3cy5TY3JvbGxWaWV3IGltcGxlbWVudHMgVUkuVUlDb21wb25lbnQge1xuXG4gICAgIF9jaGlsZHJlbjogVUkuVUlDb21wb25lbnRbXSA9IFtdXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbnRlbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgdiA9ICg8YW55PnRoaXMpLmRpdih7IGNsYXNzOiAnc2Nyb2xscGFkIHBhbmUtaXRlbSBwYWRkZWQnLCB0YWJpbmRleDogLTEsIHN0eWxlOiBcIm92ZXJmbG93OnNjcm9sbDtcIiB9KVxuXG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuXG4gICAgfVxuICAgIGVsZW1lbnQ6SFRNTEVsZW1lbnRcblxuXG4gICAgY2FwdGlvbigpIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgIHNjcm9sbCh0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDsgICAgXG4gICAgfVxuICAgIFxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRoaXMuZWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5lbGVtZW50LnNjcm9sbFRvcCArIHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICByaWdodDogdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgKyB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZWQoKSB7IH1cbiAgICByZWZyZXNoKCkgeyB9XG5cbiAgICBwcml2YXRlIF91aTogVUkuSFRNTFR5cGVzO1xuICAgIHVpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcmVudDogVUkuVUlDb21wb25lbnQ7XG5cbiAgICBzZXRQYXJlbnQocDogVUkuVUlDb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHA7XG4gICAgfVxuXG4gICAgLy9UT0RPIFJFTU9WRSBDT1BZIFBBU1RFXG4gICAgYWRkQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50fFVJLkJhc2ljQ29tcG9uZW50PGFueT4pIHtcbiAgICAgICAgY2hpbGQuc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgLy90aGlzLmNoYW5nZWQoKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4uZmlsdGVyKHg9PiB4ICE9IGNoaWxkKTtcbiAgICAgICAgLy8gdGhpcy5jaGFuZ2VkKCk7XG4gICAgfVxuICAgIGRvUmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclJlbmRlclVJKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMgbm90IG51bGwgZWxlbWVudDtcbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGZSZW5kZXIoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gPGFueT5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIH1cblxuICAgIGF0dGFjaGVkKCkge1xuICAgICAgICAoPGFueT50aGlzKS5odG1sKHRoaXMuaW5uZXJSZW5kZXJVSSgpKVxuICAgIH1cblxuICAgIGlubmVyUmVuZGVyVUkoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlbGZSZW5kZXIoKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCh4PT4ge1xuICAgICAgICAgICAgdmFyIGVsID0geC5yZW5kZXJVSSgpXG4gICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG5cbiAgICByZW5kZXJVSSgpOiBVSS5IVE1MVHlwZXMge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHBhcmVudCgpOiBhbnkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjaGlsZHJlbigpOiBVSS5VSUNvbXBvbmVudFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICAgIH1cblxuICAgIGlzQXR0YWNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0iXX0=\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom-space-pen-views\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar UI = __webpack_require__(5);\n\tvar detailElements = __webpack_require__(9);\n\tvar HTTPANDHTTPS = \"HTTP, HTTPS\";\n\tvar HTTPHTTPS = \"HTTP/HTTPS\";\n\texports.nodes = {\n\t    Api: {\n\t        properties: [\"title\", \"version\", \"baseUri\", \"mediaType\", \"protocols\"],\n\t        actions: []\n\t    },\n\t    Resource: {\n\t        properties: [\"relativeUri\", \"displayName\", \"description\", \"is\", \"type\"]\n\t    },\n\t    Method: {\n\t        properties: [\"method\", \"displayName\", \"description\", \"is\", \"type\", \"protocols\", \"securedBy\"]\n\t    },\n\t    DataElement: {\n\t        properties: [\"name\", \"displayName\", \"description\", \"default\", \"required\"]\n\t    },\n\t    Response: {\n\t        properties: [\"code\", \"description\"]\n\t    }\n\t};\n\texports.filterOut = {\n\t    properties: [\"location\", \"annotations\", \"repeat\", \"locationKind\", \"signature\"]\n\t};\n\tvar focusedPropertyName = null;\n\tvar focusedPosition = -1;\n\tvar toFocus = null;\n\tfunction updateDetailsPanel(detailsReport, context, panel, updateTextOnDone) {\n\t    if (updateTextOnDone === void 0) { updateTextOnDone = false; }\n\t    panel.clear();\n\t    var cfg = atom.config;\n\t    var l = atom.styles.emitter.handlersByEventName;\n\t    var sadd = [].concat(l['did-add-style-element']);\n\t    var sremove = [].concat(l['did-remove-style-element']);\n\t    var schange = [].concat(l['did-update-style-element']);\n\t    var cfgCh = [].concat(cfg.emitter.handlersByEventName['did-change']);\n\t    var grammars = atom.grammars.emitter.handlersByEventName;\n\t    var addGrammar = [].concat(grammars[\"did-add-grammar\"]);\n\t    var updateGrammar = [].concat(grammars[\"did-update-grammar\"]);\n\t    var emptyGrammarListeners = [].concat(atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"]);\n\t    try {\n\t        var empty = true;\n\t        var item = detailElements.buildItem(detailsReport, context, false);\n\t        // item.addListener(x=> {\n\t        //     editorTools.aquireManager().updateText(null);\n\t        // })\n\t        var rend;\n\t        try {\n\t            rend = item.render({});\n\t        }\n\t        finally {\n\t            if (exports.oldItem) {\n\t                exports.oldItem.detach();\n\t            }\n\t            exports.oldItem = item;\n\t            if (rend) {\n\t                panel.addChild(rend);\n\t            }\n\t            empty = false;\n\t        }\n\t        if (toFocus) {\n\t            var field = toFocus.getActualField().ui();\n\t            field.focus();\n\t            field.getModel().setCursorBufferPosition(focusedPosition);\n\t            toFocus = null;\n\t            focusedPosition = null;\n\t            focusedPropertyName = null;\n\t        }\n\t        if (empty) {\n\t            var errLabel = UI.h3(\"Object has no additional properties.\");\n\t            UI.applyStyling(UI.TextClasses.WARNING, errLabel);\n\t            errLabel.setStyle(\"text-align\", \"center\").margin(0, 0, 24, 12);\n\t            panel.addChild(errLabel);\n\t        }\n\t    }\n\t    catch (Error) {\n\t        throw Error;\n\t    }\n\t    finally {\n\t        cfg.emitter.handlersByEventName['did-change'] = cfgCh;\n\t        l['did-add-style-element'] = sadd;\n\t        l['did-remove-style-element'] = sremove;\n\t        l['did-update-style-element'] = schange;\n\t        grammars[\"did-add-grammar\"] = addGrammar;\n\t        grammars[\"did-update-grammar\"] = updateGrammar;\n\t        atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"] = emptyGrammarListeners;\n\t    }\n\t}\n\texports.updateDetailsPanel = updateDetailsPanel;\n\t// function getSchemaType(value: string)\n\t// {\n\t//     var schema = schemautil.createSchema(value, null);\n\t//     if (!schema || !schema.getType) return \"Invalid\";\n\t//     switch (schema.getType()) {\n\t//         case \"source.json\":\n\t//             return \"JSON\";\n\t//         case \"text.xml\":\n\t//             return \"XML\";\n\t//         default :\n\t//             return \"Unknown type\";\n\t//     }\n\t// }\n\t// export function getStringValue(x : string | hl.IStructuredValue) : string {\n\t//     if (typeof x ===\"object\") return (<hl.IStructuredValue>x).valueName();\n\t//     else return <string>x;\n\t// }\n\t//\n\t// export function propertyInfo(node: hl.IHighLevelNode, name: string) {\n\t//     var prop = node.definition().property(name);\n\t//     if (prop.isValueProperty() == false) return null;\n\t//     var isMulti = prop.isMultiValue();\n\t//     var required = prop.isRequired();\n\t//     var value : string;\n\t//     var values = [];\n\t//     var type : string;\n\t//     var ipath: string;\n\t//     var rangeName = prop.range().nameId();\n\t//\n\t//     if (isMulti) {\n\t//         values = node.attributes(name).map(x=>x.value());\n\t//         value = values.map(x=>getStringValue(x)).join(\", \");\n\t//         switch (rangeName) {\n\t//             case \"StringType\":\n\t//                 type = 'enum';\n\t//                 if (!node.definition().getAdapter(def.RAMLService).isUserDefined()&&name==\"protocols\"){\n\t//                     type=\"protocols\"\n\t//                 }\n\t//                 break;\n\t//             case \"TraitRef\":\n\t//                 type = 'trait';\n\t//                 break;\n\t//             default:\n\t//                 type = 'unknown';\n\t//         }\n\t//     } else {\n\t//         var attr = node.attr(name);\n\t//         value = attr && attr.value() ? attr.value() : \"\";\n\t//\n\t//         switch (rangeName) {\n\t//             case \"MarkdownString\":\n\t//                 type = 'markdown';\n\t//                 values = value.split(\"\\n\");\n\t//                 value =  values[0];\n\t//                 break;\n\t//             case \"SchemaString\":\n\t//                 type = 'schema';\n\t//                 if (value.indexOf(\"\\n\") >= 0) {\n\t//                     values = [value];\n\t//                     value = \"(\" + getSchemaType(value) + \" Schema)\";\n\t//                 }\n\t//                 break;\n\t//             case \"ExampleString\":\n\t//                 type = 'schexample';\n\t//                 try {\n\t//                     ipath = attr.lowLevel().includePath();\n\t//                 } catch(e) { ipath = \"\"; }\n\t//                 values = [value, ipath];\n\t//                 value =  \"Example\" + (ipath != \"\" ? \" (referenced from \" + ipath + \")\" : \"\");\n\t//                 break;\n\t//             case \"ResourceTypeRef\":\n\t//                 type = \"type\";\n\t//                 break;\n\t//             default:\n\t//                 type = 'string';\n\t//         }\n\t//         if (type == \"string\") {\n\t//             if (value.indexOf(\"\\n\") >= 0) {\n\t//                 values = value.split(\"\\n\");\n\t//                 value = \"(\" + values.length + \" lines) \" + values[0].substring(0, 20) + \" ...\";\n\t//                 type = \"multiline\";\n\t//             }\n\t//             if (attr)\n\t//                 ipath = attr.lowLevel().includePath();\n\t//\n\t//             if (ipath) {\n\t//                 value = \"(included from \" + ipath +\")\";\n\t//                 type = \"include\";\n\t//             }\n\t//         }\n\t//     }\n\t//     var ret = {\n\t//         value: value,\n\t//         values: values,\n\t//         type: type,\n\t//         include: ipath,\n\t//         required: required,\n\t//     };\n\t//     return ret;\n\t// }\n\t// export function stringView(node: hl.IHighLevelNode, name: string) {\n\t//     return getStringValue(propertyInfo(node, name).value);\n\t// } \n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\tvar UI = __webpack_require__(5);\n\t//import contextActions = require(\"raml-actions\")\n\tvar assistUtils = __webpack_require__(11);\n\tvar ramlServer = __webpack_require__(17);\n\tvar lastSelectedCaption;\n\tvar inRender = false;\n\t/**\n\t * Runnable that updates details values remotely\n\t */\n\tvar UpdateModelRunnable = /** @class */ (function () {\n\t    function UpdateModelRunnable(context, item, newValue) {\n\t        this.context = context;\n\t        this.item = item;\n\t        this.newValue = newValue;\n\t        this.cancelled = false;\n\t    }\n\t    /**\n\t     * Performs the actual business logics.\n\t     * Should resolve the promise when finished.\n\t     */\n\t    UpdateModelRunnable.prototype.run = function () {\n\t        if (this.context.localModel) {\n\t            this.context.localModel[this.item.id] = this.newValue;\n\t            return Promise.resolve();\n\t        }\n\t        var connection = ramlServer.getNodeClientConnection();\n\t        return connection.changeDetailValue(this.context.uri, this.context.position, this.item.id, this.newValue);\n\t    };\n\t    /**\n\t     * Whether two runnable conflict with each other.\n\t     * Must work fast as its called often.\n\t     * @param other\n\t     */\n\t    UpdateModelRunnable.prototype.conflicts = function (other) {\n\t        if (isUpdateModelRunnable(other)) {\n\t            return this.getUri() === other.getUri();\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Cancels the runnable. run() method should do nothing if launched later,\n\t     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n\t     */\n\t    UpdateModelRunnable.prototype.cancel = function () {\n\t        this.cancelled = true;\n\t    };\n\t    /**\n\t     * Whether cancel() method was called at least once.\n\t     */\n\t    UpdateModelRunnable.prototype.isCanceled = function () {\n\t        return this.cancelled;\n\t    };\n\t    UpdateModelRunnable.prototype.getUri = function () {\n\t        return this.context.uri;\n\t    };\n\t    return UpdateModelRunnable;\n\t}());\n\t/**\n\t * Instanceof for UpdateModelRunnable\n\t * @param runnable\n\t */\n\tfunction isUpdateModelRunnable(runnable) {\n\t    return runnable.getUri != null;\n\t}\n\tvar Item = /** @class */ (function () {\n\t    function Item(_title, description) {\n\t        if (description === void 0) { description = \"\"; }\n\t        this._title = _title;\n\t        this.description = description;\n\t        this.listeners = [];\n\t    }\n\t    Item.prototype.needsSeparateLabel = function () {\n\t        return false;\n\t    };\n\t    Item.prototype.detach = function () {\n\t        this.dispose();\n\t        this.children().forEach(function (x) {\n\t            if (x.detach)\n\t                x.detach();\n\t        });\n\t    };\n\t    Item.prototype.addListener = function (r) {\n\t        this.listeners.push(r);\n\t    };\n\t    Item.prototype.removeListener = function (r) {\n\t        this.listeners = this.listeners.filter(function (x) { return x != r; });\n\t    };\n\t    Item.prototype.add = function (i) {\n\t        throw new Error(\"Not supported\");\n\t    };\n\t    Item.prototype.root = function () {\n\t        if (this.parent) {\n\t            return this.parent.root();\n\t        }\n\t        return this;\n\t    };\n\t    Item.prototype.title = function () {\n\t        return this._title;\n\t    };\n\t    Item.prototype.children = function () {\n\t        return [];\n\t    };\n\t    Item.prototype.setDescription = function (desc) {\n\t        this.description = desc;\n\t    };\n\t    Item.prototype.setTitle = function (t) {\n\t        this._title = t;\n\t    };\n\t    Item.prototype.render = function (r) {\n\t        if (r === void 0) { r = {}; }\n\t        throw new Error(\"Not Implemented\");\n\t    };\n\t    Item.prototype.item = function (name) {\n\t        return null;\n\t    };\n\t    Item.prototype.setError = function (text) {\n\t    };\n\t    Item.prototype.clearErrors = function () {\n\t    };\n\t    return Item;\n\t}());\n\texports.Item = Item;\n\tvar TypeDisplayItem = /** @class */ (function (_super) {\n\t    __extends(TypeDisplayItem, _super);\n\t    function TypeDisplayItem(detailsNode, context) {\n\t        var _this = _super.call(this, \"Type \" + detailsNode.title, \"\") || this;\n\t        _this.detailsNode = detailsNode;\n\t        _this.context = context;\n\t        return _this;\n\t    }\n\t    TypeDisplayItem.prototype.render = function (r) {\n\t        var container = new UI.WrapPanel();\n\t        container.setCaption(this.title());\n\t        return container;\n\t        //return typeDisplay.render(this.detailsNode);\n\t    };\n\t    TypeDisplayItem.prototype.dispose = function () {\n\t    };\n\t    return TypeDisplayItem;\n\t}(Item));\n\texports.TypeDisplayItem = TypeDisplayItem;\n\tvar Category = /** @class */ (function (_super) {\n\t    __extends(Category, _super);\n\t    function Category() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        _this._children = [];\n\t        return _this;\n\t    }\n\t    Category.prototype.add = function (i) {\n\t        i.parent = this;\n\t        this._children.push(i);\n\t    };\n\t    Category.prototype.children = function () {\n\t        return this._children;\n\t    };\n\t    Category.prototype.plainChildren = function () {\n\t        return this._children.filter(function (x) { return !(x instanceof Category); });\n\t    };\n\t    Category.prototype.categories = function () {\n\t        return this._children.filter(function (x) { return (x instanceof Category); });\n\t    };\n\t    Category.prototype.item = function (name) {\n\t        var it;\n\t        this._children.forEach(function (x) {\n\t            if (x.title() == name) {\n\t                it = x;\n\t            }\n\t            var rr = x.item(name);\n\t            if (rr) {\n\t                it = rr;\n\t            }\n\t        });\n\t        return it;\n\t    };\n\t    Category.prototype.render = function (r) {\n\t        var _this = this;\n\t        if (r === void 0) { r = {}; }\n\t        var section = this.createSection(r);\n\t        this._result = section;\n\t        if (this.description && r.showDescription) {\n\t            this.descriptionLabel = UI.label(this.description);\n\t            section.addChild(this.descriptionLabel);\n\t        }\n\t        this.contributeTop(section);\n\t        this.plainChildren().forEach(function (x) { return _this.addChild(section, x); });\n\t        var wrappedChild = this.createWrappedChild(section);\n\t        this.subCategories = wrappedChild;\n\t        var cats = this.categories();\n\t        var remap = {};\n\t        cats.forEach(function (x) { return remap[x.title()] = x; });\n\t        var newCats = [];\n\t        if (remap[\"General\"]) {\n\t            newCats.push(remap[\"General\"]);\n\t            delete remap[\"General\"];\n\t        }\n\t        if (remap[\"Facets\"]) {\n\t            newCats.push(remap[\"Facets\"]);\n\t            delete remap[\"Facets\"];\n\t        }\n\t        for (var c in remap) {\n\t            newCats.push(remap[c]);\n\t        }\n\t        newCats.forEach(function (x) { return _this.addChild(wrappedChild, x); });\n\t        return section;\n\t    };\n\t    Category.prototype.detach = function () {\n\t        _super.prototype.detach.call(this);\n\t        this._result.dispose();\n\t    };\n\t    Category.prototype.createSection = function (r) {\n\t        if (r.showHeader) {\n\t            return new UI.Section(UI.h3(this.title()), false);\n\t        }\n\t        var pnl = new UI.Panel();\n\t        pnl.setCaption(this.title());\n\t        return pnl;\n\t    };\n\t    Category.prototype.createWrappedChild = function (section) {\n\t        return section;\n\t    };\n\t    Category.prototype.addChild = function (section, item) {\n\t        var child = item.render();\n\t        if (section instanceof UI.TabFolder) {\n\t            var tf = section;\n\t            tf.add(child.caption(), UI.Icon.NONE, child);\n\t        }\n\t        else {\n\t            if (item.needsSeparateLabel()) {\n\t                var firstLabel = UI.label(item.title());\n\t                firstLabel.margin(0, 5, 0, 0);\n\t                section.addChild(firstLabel);\n\t                section.addChild(UI.label(item.description));\n\t            }\n\t            section.addChild(child);\n\t        }\n\t    };\n\t    Category.prototype.contributeTop = function (section) {\n\t    };\n\t    Category.prototype.dispose = function () {\n\t    };\n\t    Category.prototype.setError = function (text) {\n\t    };\n\t    Category.prototype.clearErrors = function () {\n\t        this._children.forEach(function (x) { return x.clearErrors(); });\n\t    };\n\t    Category.prototype.update = function (i) {\n\t    };\n\t    return Category;\n\t}(Item));\n\tvar TopLevelNode = /** @class */ (function (_super) {\n\t    __extends(TopLevelNode, _super);\n\t    function TopLevelNode(detailsNode, context) {\n\t        var _this = _super.call(this, detailsNode.title, detailsNode.description) || this;\n\t        _this.detailsNode = detailsNode;\n\t        _this.context = context;\n\t        _this.ep = null;\n\t        return _this;\n\t    }\n\t    TopLevelNode.prototype.detach = function () {\n\t        _super.prototype.detach.call(this);\n\t        this._result.dispose();\n\t    };\n\t    TopLevelNode.prototype.createWrappedChild = function (section) {\n\t        var tf = new UI.TabFolder();\n\t        tf.setOnSelected(function () {\n\t            if (!inRender) {\n\t                lastSelectedCaption = (tf.selectedComponent().caption());\n\t            }\n\t        });\n\t        section.addChild(tf);\n\t        return tf;\n\t    };\n\t    TopLevelNode.prototype.subCategoryByNameOrCreate = function (name) {\n\t        var item = _.find(this.children(), function (x) { return x.title() == name; });\n\t        if (!item) {\n\t            var rs = new Category(name);\n\t            this.add(rs);\n\t            return rs;\n\t        }\n\t        return item;\n\t    };\n\t    TopLevelNode.prototype.addItemToCategory = function (name, it) {\n\t        if (name == null) {\n\t            this._children.push(it);\n\t            it.parent = this;\n\t            return;\n\t        }\n\t        this.subCategoryByNameOrCreate(name).add(it);\n\t    };\n\t    TopLevelNode.prototype.contributeTop = function (section) {\n\t        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n\t        this.ep = UI.hc(this.errorLabel);\n\t        this.ep.setDisplay(false);\n\t        section.addChild(this.ep);\n\t    };\n\t    TopLevelNode.prototype.render = function (r) {\n\t        if (r === void 0) { r = {}; }\n\t        inRender = true;\n\t        try {\n\t            var result = _super.prototype.render.call(this, r);\n\t            this._options = r;\n\t            this._panel = result;\n\t            var tf = this.subCategories;\n\t            for (var n = 0; n < tf.tabsCount(); n++) {\n\t                var item = tf.get(n);\n\t                if (item.header == lastSelectedCaption) {\n\t                    tf.setSelectedIndex(n);\n\t                    return result;\n\t                }\n\t            }\n\t            var documentation = \"\";\n\t            if (this.detailsNode.description) {\n\t                documentation = this.detailsNode.description;\n\t            }\n\t            if (documentation.length && !r.showDescription) {\n\t                result.addChild(UI.html(\"<hr/>\"));\n\t                result.addChild(UI.label(documentation, UI.Icon.INBOX, UI.TextClasses.SUBTLE));\n\t            }\n\t            this.update(this);\n\t            return result;\n\t        }\n\t        finally {\n\t            inRender = false;\n\t        }\n\t    };\n\t    TopLevelNode.prototype.dispose = function () {\n\t        this.detailsNode = null;\n\t    };\n\t    TopLevelNode.prototype.update = function (i) {\n\t        // if (!this._panel){\n\t        //     return;\n\t        // }\n\t        // if (i instanceof PropertyEditorInfo){\n\t        //     var prInfo=<PropertyEditorInfo>i;\n\t        //     if (prInfo.property.getAdapter(def.RAMLPropertyService).isTypeExpr()||prInfo.property.isDescriminator()){\n\t        //         rp.utils.updateType(this.node);\n\t        //         var extras=<Category>this.item(\"Facets\");\n\t        //         if (extras&&extras._result) {\n\t        //             extras._result.clear();\n\t        //         }\n\t        //\n\t        //         var item=buildItem(this.node,false);\n\t        //         var newExtras=<Category>item.item(\"Facets\");\n\t        //         if (newExtras) {\n\t        //             if (extras&&extras._result) {\n\t        //                 extras._children = newExtras._children;\n\t        //                 extras._children.forEach(x=>x.parent = extras);\n\t        //                 if (extras._children.length > 0) {\n\t        //                     extras._result.setDisplay(true);\n\t        //                     //workaroung events flow issue in UI.ts\n\t        //                 }\n\t        //                 newExtras.children().forEach(x=> {\n\t        //                     extras._result.addChild(x.render(this._options))\n\t        //                 })\n\t        //             }\n\t        //             else{\n\t        //                 this._children.push(newExtras);\n\t        //                 if (this._panel) {\n\t        //                     this._panel.addChild(newExtras.render(this._options))\n\t        //                 }\n\t        //             }\n\t        //         }\n\t        //         else{\n\t        //             if (extras&&extras._result) {\n\t        //                 extras._result.setDisplay(false);\n\t        //             }\n\t        //         }\n\t        //     }\n\t        // }\n\t        // var kp=null;\n\t        // this.node.definition().allProperties().forEach(x=>{\n\t        //     if (x.getAdapter(def.RAMLPropertyService).isKey()){\n\t        //         kp=x;\n\t        //     }\n\t        // })\n\t        // if (kp){\n\t        //     var keyItem=<PropertyEditorInfo>this.item(kp.nameId());\n\t        //     if (keyItem){\n\t        //         var m=keyItem.fld;\n\t        //         var vl=m.getBinding().get();\n\t        //         if ((!vl)||vl.trim().length==0){\n\t        //             this._panel.getBinding().setStatus(UI.errorStatus(\"\"));\n\t        //         }\n\t        //         else{\n\t        //             this._panel.getBinding().setStatus(UI.okStatus());\n\t        //         }\n\t        //     }\n\t        // }\n\t        //\n\t        // var errors;\n\t        //\n\t        // if(this.node.property() && universehelpers.isExampleProperty(this.node.property())) {\n\t        //     var parent = this.node.parent()\n\t        //\n\t        //     if(parent) {\n\t        //         var parsed = parent.parsedType();\n\t        //\n\t        //         var exampleMeta =  _.find((<any>parsed).metaInfo || [], (meta: any): boolean => {\n\t        //             return meta && meta._name === 'example';\n\t        //         });\n\t        //\n\t        //         if(exampleMeta) {\n\t        //             var validateObject = exampleMeta.validateSelf(this.node.types().getAnnotationTypeRegistry());\n\t        //\n\t        //             errors = ((validateObject && validateObject.getErrors()) || []).map(error => {\n\t        //                 return this.node.createIssue(error);\n\t        //             });\n\t        //         }\n\t        //     }\n\t        // } else {\n\t        //     errors = this.node.errors();\n\t        // }\n\t        //\n\t        // this.clearErrors();\n\t        // this.ep.setDisplay(false)\n\t        // if (!resourceRegistry.hasAsyncRequests() && errors&&errors.length>0){\n\t        //     var notFound=[];\n\t        //     errors.forEach(error=>{\n\t        //         if (error.extras&&error.extras.length>0){\n\t        //             error=error.extras[0];\n\t        //         }\n\t        //         var item = error.node && this.item(error.node.name());\n\t        //         if (item){\n\t        //             item.setError(error.message);\n\t        //         }\n\t        //         else{notFound.push(error);}\n\t        //     })\n\t        //     if (notFound.length>0){\n\t        //         this.errorLabel.setIcon(UI.Icon.BUG)\n\t        //         var et=notFound.map(x=>x.node.name()+\":\"+x.message).join(\",\");\n\t        //         if (et.length>100){\n\t        //             et=et.substring(0,100)+\"...\";\n\t        //         }\n\t        //         this.errorLabel.setText(et)\n\t        //         this.ep.setDisplay(true);\n\t        //     }\n\t        //     else{\n\t        //         this.ep.setDisplay(false);\n\t        //     }\n\t        // }\n\t    };\n\t    return TopLevelNode;\n\t}(Category));\n\tvar CheckBox2 = /** @class */ (function (_super) {\n\t    __extends(CheckBox2, _super);\n\t    function CheckBox2() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    CheckBox2.prototype.setLabelWidth = function (n) {\n\t        this.setStyle(\"margin-left\", (n + 2) + \"ch\");\n\t    };\n\t    return CheckBox2;\n\t}(UI.CheckBox));\n\tvar PropertyEditorInfo = /** @class */ (function (_super) {\n\t    __extends(PropertyEditorInfo, _super);\n\t    function PropertyEditorInfo(outlineNode, context) {\n\t        var _this = _super.call(this, outlineNode.title, outlineNode.description) || this;\n\t        _this.outlineNode = outlineNode;\n\t        _this.context = context;\n\t        _this.rendered = false;\n\t        _this.update = function (newValue, oldValue) {\n\t            if (!_this.rendered) {\n\t                return;\n\t            }\n\t            _this.fromEditorToModel(newValue, oldValue);\n\t        };\n\t        return _this;\n\t    }\n\t    PropertyEditorInfo.prototype.dispose = function () {\n\t        this.outlineNode = null;\n\t        this.fld.getBinding().removeListener(this.update);\n\t    };\n\t    PropertyEditorInfo.prototype.clearErrors = function () {\n\t        this.setError(null);\n\t    };\n\t    PropertyEditorInfo.prototype.setError = function (text) {\n\t        if (text) {\n\t            this.errorLabel.setText(text);\n\t            this.errorLabel.setDisplay(true);\n\t        }\n\t        else {\n\t            if (this.errorLabel) {\n\t                this.errorLabel.setDisplay(false);\n\t            }\n\t        }\n\t    };\n\t    PropertyEditorInfo.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t        var detailsChangeRunnable = new UpdateModelRunnable(this.context, this.outlineNode, newValue);\n\t        var context = this.context;\n\t        context.reconciler.schedule(detailsChangeRunnable).then(function (changedDocuments) {\n\t            if (context.localModel) {\n\t                return;\n\t            }\n\t            assistUtils.applyChangedDocuments(changedDocuments);\n\t            assistUtils.gotoPosition(context.position);\n\t        });\n\t    };\n\t    PropertyEditorInfo.prototype.toLocalValue = function (inputValue) {\n\t        return inputValue;\n\t    };\n\t    PropertyEditorInfo.prototype.toUIValue = function (value) {\n\t        return value;\n\t    };\n\t    PropertyEditorInfo.prototype.fromModelToEditor = function () {\n\t        this.fld.getBinding().set(this.outlineNode.valueText);\n\t    };\n\t    PropertyEditorInfo.prototype.render = function () {\n\t        var container = new UI.WrapPanel();\n\t        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n\t        this.errorLabel.setDisplay(false);\n\t        this.errorLabel.setStyle(\"margin-left\", (this._title.length + 1) + \"ch\");\n\t        var field = this.createField();\n\t        this.fld = field;\n\t        field.getBinding().addListener(this.update);\n\t        container.setCaption(this.title());\n\t        this.fromModelToEditor();\n\t        container.addChild(field);\n\t        container.addChild(this.errorLabel);\n\t        this.rendered = true;\n\t        return container;\n\t    };\n\t    PropertyEditorInfo.prototype.createField = function () {\n\t        return UI.texfField(this.needsSeparateLabel() ? \"\" : this.outlineNode.title, \"\", function (x) { });\n\t    };\n\t    return PropertyEditorInfo;\n\t}(Item));\n\tvar SimpleMultiEditor = /** @class */ (function (_super) {\n\t    __extends(SimpleMultiEditor, _super);\n\t    function SimpleMultiEditor() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    // fromEditorToModel(){\n\t    //     // var field=this.fld;\n\t    //     // var vl=field.getBinding().get();\n\t    //     // if (vl==null){\n\t    //     //     vl=\"\";\n\t    //     // }\n\t    //     // var attrs=this.node.attributes(this.property.nameId());\n\t    //     // var av=attrs.map(x=>escapeValue(\"\"+x.value())).join(\", \");\n\t    //     // if (av==vl){\n\t    //     //     return;\n\t    //     // }\n\t    //     // var ww=vl.split(\",\");\n\t    //     // var vl=ww.filter(x=>x.trim().length>0).map(x=>x.trim());\n\t    //     //\n\t    //     // if(this.node.lowLevel().includePath() && !this.node.lowLevel().unit().resolve(this.node.lowLevel().includePath())) {\n\t    //     //     return;\n\t    //     // }\n\t    //     //\n\t    //     // var attribute = this.node.attrOrCreate(this.property.nameId());\n\t    //     // attribute.setValues(vl)\n\t    //     //\n\t    //     // var root=this.root()\n\t    //     // if (root){\n\t    //     //     root.update(this);\n\t    //     // }\n\t    // }\n\t    SimpleMultiEditor.prototype.fromModelToEditor = function () {\n\t        this.fld.getBinding().set(this.outlineNode.valueText);\n\t    };\n\t    return SimpleMultiEditor;\n\t}(PropertyEditorInfo));\n\tfunction escapeValue(v) {\n\t    if (v.length > 0) {\n\t        if (v.charAt(0) == \"'\") {\n\t            return '\"' + v + '\"';\n\t        }\n\t        if (v.charAt(0) == '\"') {\n\t            return '\"' + v + '\"';\n\t        }\n\t    }\n\t    if (v.indexOf(' ') != -1 || v.indexOf(',') != -1) {\n\t        if (v.indexOf('\"') == -1) {\n\t            return '\"' + v + '\"';\n\t        }\n\t        if (v.indexOf(\"'\") == -1) {\n\t            return \"'\" + v + \"'\";\n\t        }\n\t    }\n\t    return v;\n\t}\n\tvar CheckBoxField = /** @class */ (function (_super) {\n\t    __extends(CheckBoxField, _super);\n\t    function CheckBoxField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    CheckBoxField.prototype.createField = function () {\n\t        return new CheckBox2(this.outlineNode.title, UI.Icon.NONE, function (x) { });\n\t    };\n\t    CheckBoxField.prototype.toUIValue = function (value) {\n\t        if (!value) {\n\t            return false;\n\t        }\n\t        if (value === true || value.trim() === 'true') {\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    CheckBoxField.prototype.toLocalValue = function (value) {\n\t        return value + \"\";\n\t    };\n\t    return CheckBoxField;\n\t}(PropertyEditorInfo));\n\t// class ActionsItem extends Item{\n\t//\n\t//     constructor(private node:hl.IHighLevelNode){\n\t//         super(\"Actions\",\"\");\n\t//     }\n\t//     render(r:RenderingOptions){\n\t//         return suggestions.generateSuggestionsPanel(this.node);\n\t//     }\n\t//     dispose(){\n\t//         this.node=null;\n\t//     }\n\t//\n\t// }\n\t// class ContextActionsItem extends Item{\n\t//     constructor(node:hl.IHighLevelNode,name:string,private actions:contextActions.IContextDependedAction[]){\n\t//         super(name,\"\");\n\t//     }\n\t//     dispose(){\n\t//\n\t//     }\n\t//\n\t//     render(r:RenderingOptions){\n\t//         var result=UI.hc();\n\t//         result.addChild(UI.h3(this.title()))\n\t//         this.actions.forEach(x=>{\n\t//             result.addChild(UI.button(x.name,UI.ButtonSizes.EXTRA_SMALL,UI.ButtonHighlights.SUCCESS,UI.Icon.CHECKLIST,a=>x.onClick()).margin(3,3,3,3))\n\t//         })\n\t//         return result;\n\t//     }\n\t// }\n\tvar MarkdownFieldUI = /** @class */ (function (_super) {\n\t    __extends(MarkdownFieldUI, _super);\n\t    function MarkdownFieldUI(text, onchange) {\n\t        var _this = _super.call(this, text, onchange) || this;\n\t        _this.margin(0, 0, 6, 12);\n\t        _this.setMini(false);\n\t        _this.setStyle(\"min-height\", \"100px\");\n\t        //this.setStyle(\"max-height\",\"200px\");\n\t        _this.setStyle(\"border\", \"solid\");\n\t        _this.setStyle(\"border-width\", \"1px\");\n\t        _this.setStyle(\"border-radius\", \"2px\");\n\t        _this.setStyle(\"font-size\", \"1.15em\");\n\t        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n\t        _this.setGrammar('source.mdcustom');\n\t        return _this;\n\t    }\n\t    MarkdownFieldUI.prototype.setLabelWidth = function () {\n\t    };\n\t    MarkdownFieldUI.prototype.setLabelHeight = function () {\n\t    };\n\t    MarkdownFieldUI.prototype.setRequired = function (v) {\n\t    };\n\t    return MarkdownFieldUI;\n\t}(UI.AtomEditorElement));\n\tvar XMLField = /** @class */ (function (_super) {\n\t    __extends(XMLField, _super);\n\t    function XMLField(text, onchange) {\n\t        var _this = _super.call(this, text, onchange) || this;\n\t        _this.margin(0, 0, 6, 12);\n\t        _this.setMini(false);\n\t        _this.setStyle(\"min-height\", \"100px\");\n\t        //this.setStyle(\"max-height\",\"200px\");\n\t        _this.setStyle(\"border\", \"solid\");\n\t        _this.setStyle(\"border-width\", \"1px\");\n\t        _this.setStyle(\"border-radius\", \"2px\");\n\t        _this.setStyle(\"font-size\", \"1.15em\");\n\t        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n\t        _this.setGrammar('text.xml');\n\t        return _this;\n\t    }\n\t    XMLField.prototype.setLabelWidth = function () {\n\t    };\n\t    XMLField.prototype.setLabelHeight = function () {\n\t    };\n\t    XMLField.prototype.setRequired = function (v) {\n\t    };\n\t    return XMLField;\n\t}(UI.AtomEditorElement));\n\tvar JSONField = /** @class */ (function (_super) {\n\t    __extends(JSONField, _super);\n\t    function JSONField(text, onchange) {\n\t        var _this = _super.call(this, text, onchange) || this;\n\t        _this.margin(0, 0, 6, 12);\n\t        _this.setMini(false);\n\t        _this.setStyle(\"min-height\", \"100px\");\n\t        //this.setStyle(\"max-height\",\"200px\");\n\t        _this.setStyle(\"border\", \"solid\");\n\t        _this.setStyle(\"border-width\", \"1px\");\n\t        _this.setStyle(\"border-radius\", \"2px\");\n\t        _this.setStyle(\"font-size\", \"1.15em\");\n\t        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n\t        _this.setGrammar('source.json');\n\t        return _this;\n\t    }\n\t    JSONField.prototype.setLabelWidth = function () {\n\t    };\n\t    JSONField.prototype.setLabelHeight = function () {\n\t    };\n\t    JSONField.prototype.setRequired = function (v) {\n\t    };\n\t    return JSONField;\n\t}(UI.AtomEditorElement));\n\tvar MarkdownField = /** @class */ (function (_super) {\n\t    __extends(MarkdownField, _super);\n\t    function MarkdownField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    MarkdownField.prototype.createField = function () {\n\t        var editor = new MarkdownFieldUI(\"\", function (x) { });\n\t        return editor;\n\t    };\n\t    MarkdownField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    return MarkdownField;\n\t}(PropertyEditorInfo));\n\tvar ExampleField = /** @class */ (function (_super) {\n\t    __extends(ExampleField, _super);\n\t    function ExampleField(outlineNode, context) {\n\t        return _super.call(this, outlineNode, context) || this;\n\t    }\n\t    ExampleField.prototype.createField = function () {\n\t        var editor = new JSONField(this.outlineNode.valueText, function (x) { });\n\t        return editor;\n\t    };\n\t    ExampleField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    ExampleField.prototype.fromModelToEditor = function () {\n\t    };\n\t    ExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t    };\n\t    return ExampleField;\n\t}(PropertyEditorInfo));\n\tvar XMLExampleField = /** @class */ (function (_super) {\n\t    __extends(XMLExampleField, _super);\n\t    function XMLExampleField(outlineNode, context) {\n\t        return _super.call(this, outlineNode, context) || this;\n\t    }\n\t    XMLExampleField.prototype.createField = function () {\n\t        var editor = new XMLField(this.outlineNode.valueText, function (x) { });\n\t        return editor;\n\t    };\n\t    XMLExampleField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    XMLExampleField.prototype.fromModelToEditor = function () {\n\t    };\n\t    XMLExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t    };\n\t    return XMLExampleField;\n\t}(PropertyEditorInfo));\n\tvar XMLSchemaField = /** @class */ (function (_super) {\n\t    __extends(XMLSchemaField, _super);\n\t    function XMLSchemaField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    XMLSchemaField.prototype.createField = function () {\n\t        var editor = new XMLField(\"\", function (x) { });\n\t        return editor;\n\t    };\n\t    XMLSchemaField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    return XMLSchemaField;\n\t}(PropertyEditorInfo));\n\tvar JSONSchemaField = /** @class */ (function (_super) {\n\t    __extends(JSONSchemaField, _super);\n\t    function JSONSchemaField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    JSONSchemaField.prototype.createField = function () {\n\t        var editor = new JSONField(\"\", function (x) { });\n\t        return editor;\n\t    };\n\t    JSONSchemaField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    return JSONSchemaField;\n\t}(PropertyEditorInfo));\n\tvar SelectBox = /** @class */ (function (_super) {\n\t    __extends(SelectBox, _super);\n\t    function SelectBox(outlineNode, context) {\n\t        var _this = _super.call(this, outlineNode, context) || this;\n\t        _this.outlineNode = outlineNode;\n\t        return _this;\n\t    }\n\t    SelectBox.prototype.createField = function () {\n\t        var options = this.outlineNode.options ? this.outlineNode.options : [];\n\t        var select = new UI.SelectField(this.outlineNode.title, function (x) { }, \"\", UI.Icon.NONE, options);\n\t        select.getActualField().setOptions(options);\n\t        return select;\n\t    };\n\t    return SelectBox;\n\t}(PropertyEditorInfo));\n\tvar TypeSelectBox = /** @class */ (function (_super) {\n\t    __extends(TypeSelectBox, _super);\n\t    function TypeSelectBox() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    TypeSelectBox.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t        // //current implementation only allows changing the facets of certain types for safety\n\t        // //TODO change this to arbitrary facets (remove type filtering)\n\t        //\n\t        // var oldNames : string[] = [];\n\t        // var savedAttrs = [];\n\t        // if (newValue && oldValue) {\n\t        //     try {\n\t        //         this.node.definition().allSuperTypes().forEach(superType=> {\n\t        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n\t        //                 this.addTypeFacets(superType, oldNames)\n\t        //             }\n\t        //         })\n\t        //\n\t        //         savedAttrs = [].concat(this.node.attrs())\n\t        //     } catch (err) {console.log(err)}\n\t        // }\n\t        //\n\t        // super.fromEditorToModel();\n\t        //\n\t        // if (newValue && oldValue) {\n\t        //     try {\n\t        //         //collecting facets allowed to remove\n\t        //         var currentUniverse = this.node.definition().universe();\n\t        //         var names : string[] = [];\n\t        //\n\t        //         this.node.definition().allSuperTypes().forEach(superType=>{\n\t        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n\t        //                 this.addTypeFacets(superType, names)\n\t        //             }\n\t        //         })\n\t        //\n\t        //         if (oldNames.length > 0 && names.length > 0) {\n\t        //             savedAttrs.forEach(attribute => {\n\t        //                 if (_.find(oldNames, facetName => facetName == attribute.name())\n\t        //                     && !_.find(names, facetName => facetName == attribute.name())) {\n\t        //\n\t        //                     this.node.remove(attribute)\n\t        //                 }\n\t        //             })\n\t        //         }\n\t        //     } catch (err) {console.log(err)}\n\t        // }\n\t    };\n\t    return TypeSelectBox;\n\t}(SelectBox));\n\tvar TreeField = /** @class */ (function (_super) {\n\t    __extends(TreeField, _super);\n\t    function TreeField(outlineNode, context) {\n\t        var _this = _super.call(this) || this;\n\t        _this.context = context;\n\t        var renderer = {\n\t            render: function (node) {\n\t                var left = UI.label(node.title, UI.Icon.CIRCUIT_BOARD, UI.TextClasses.HIGHLIGHT);\n\t                var right = UI.label(node.valueText ? (\":\" + node.valueText) : \"\", UI.Icon.NONE, UI.TextClasses.SUCCESS);\n\t                var result = UI.hc(left, right);\n\t                return result;\n\t            }\n\t        };\n\t        var getChildren = function (node) {\n\t            return node.children ? node.children : [];\n\t        };\n\t        var viewer = UI.treeViewer(getChildren, renderer, function (x) { return x.title; });\n\t        var inputValue = {\n\t            children: [outlineNode]\n\t        };\n\t        viewer.setInput(inputValue);\n\t        _this.addChild(UI.label(outlineNode.title));\n\t        _this.addChild(viewer);\n\t        return _this;\n\t    }\n\t    TreeField.prototype.setLabelWidth = function () {\n\t    };\n\t    TreeField.prototype.setLabelHeight = function () {\n\t    };\n\t    TreeField.prototype.setRequired = function (v) {\n\t    };\n\t    return TreeField;\n\t}(UI.Panel));\n\tvar StructuredField = /** @class */ (function (_super) {\n\t    __extends(StructuredField, _super);\n\t    function StructuredField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    StructuredField.prototype.createField = function () {\n\t        var children = this.outlineNode.children;\n\t        if (!children || children.length != 1)\n\t            return null;\n\t        var tm = new TreeField(children[0], this.context);\n\t        return tm;\n\t    };\n\t    return StructuredField;\n\t}(PropertyEditorInfo));\n\tvar LowLevelTreeField = /** @class */ (function (_super) {\n\t    __extends(LowLevelTreeField, _super);\n\t    function LowLevelTreeField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    LowLevelTreeField.prototype.createField = function () {\n\t        var children = this.outlineNode.children;\n\t        if (!children || children.length != 1)\n\t            return null;\n\t        var tm = new TreeField(children[0], this.context);\n\t        return tm;\n\t    };\n\t    return LowLevelTreeField;\n\t}(PropertyEditorInfo));\n\t// function category(p:hl.IProperty,node:hl.IHighLevelNode):string{\n\t//     if (p.getAdapter(def.RAMLPropertyService).isKey()||p.isRequired()){\n\t//         return null;\n\t//     }\n\t//     if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()) {\n\t//         if (universehelpers.isDocumentationProperty(p) ||\n\t//             universehelpers.isUsageProperty(p) ||\n\t//             universehelpers.isDescriptionProperty(p) ||\n\t//             universehelpers.isDisplayNameProperty(p) ||\n\t//             universehelpers.isTitleProperty(p)) {\n\t//             return \"Documentation\";\n\t//         }\n\t//         if (universehelpers.isAnnotationsProperty(p) ||\n\t//             universehelpers.isIsProperty(p) ||\n\t//             universehelpers.isSecuredByProperty(p) ||\n\t//             (universehelpers.isTypeProperty(p)&&!p.getAdapter(def.RAMLPropertyService).isTypeExpr())) {\n\t//             return \"References\";\n\t//         }\n\t//         if (universehelpers.isProtocolsProperty(p)){\n\t//             return \"General\";\n\t//         }\n\t//     }\n\t//\n\t//     if (universehelpers.isTypeProperty(p)){\n\t//         if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()){\n\t//             return null;\n\t//         }\n\t//     }\n\t//     if (node.property()) {\n\t//         if (p.domain() && p.domain() != node.property().range()) {\n\t//             return \"Facets\";\n\t//         }\n\t//     }\n\t//     return \"General\";\n\t// }\n\t//\n\t// var valueOptions = function (x:hl.IProperty, node:hl.IHighLevelNode):string[] {\n\t//     var vls = search.enumValues(x,node);\n\t//     if (universehelpers.isNameProperty(x)){\n\t//         if (node.definition().isAssignableFrom(universe.Universe10.TypeDeclaration.name)){\n\t//             if (node.property()&&universehelpers.isBodyProperty(node.property())){\n\t//                 if (!(node.property() instanceof def.UserDefinedProp)) {\n\t//                     if (node.parent()&&\n\t//                         universehelpers.isMethodType(node.parent().definition())){\n\t//                         return [\"application/json\", \"application/xml\",\"multipart/form-data\",\"application/x-www-form-urlencoded\"]\n\t//                     }\n\t//                     return [\"application/json\", \"application/xml\"]\n\t//                 }\n\t//             }\n\t//         }\n\t//     }\n\t//     if ((!vls) || vls.length == 0) {\n\t//         var sug = (<def.Property>x).suggester()\n\t//         if (sug) {\n\t//             vls = sug(node);\n\t//\n\t//         }\n\t//         if ((!vls) || vls.length == 0) {\n\t//             vls = (<def.Property>x).getOftenKeys();\n\t//\n\t//         }\n\t//     }\n\t//     return _.unique(vls);\n\t// };\n\t//\n\t// function addExampleControl(property: hl.IProperty, node : hl.IHighLevelNode,\n\t//                            exampleElement : hl.IHighLevelNode, example : def.rt.nominalTypes.IExpandableExample,\n\t//                            container : TopLevelNode) {\n\t//\n\t//     if (example.isYAML()) {\n\t//         container.addItemToCategory(category(property, node),\n\t//             new LowLevelTreeField(property, node, exampleElement.lowLevel(), example.name()));\n\t//     } else if (example.isJSONString()) {\n\t//         container.addItemToCategory(category(property, node),\n\t//             new ExampleField(property, node, example.asString(), example.name()));\n\t//     } else if (example.isXMLString()) {\n\t//         container.addItemToCategory(category(property, node),\n\t//             new XMLExampleField(property, node, example.asString(), example.name()));\n\t//     }\n\t// }\n\tfunction buildItem(detailsNode, context, dialog) {\n\t    var root = new TopLevelNode(detailsNode, context);\n\t    if (detailsNode.children) {\n\t        for (var _i = 0, _a = detailsNode.children; _i < _a.length; _i++) {\n\t            var child = _a[_i];\n\t            if (child.type == \"CATEGORY\") {\n\t                var categoryName = child.title;\n\t                if (child.children) {\n\t                    for (var _b = 0, _c = child.children; _b < _c.length; _b++) {\n\t                        var childOfChild = _c[_b];\n\t                        buildItemInCategory(childOfChild, root, categoryName, context);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                buildItemInCategory(child, root, null, context);\n\t            }\n\t        }\n\t    }\n\t    return root;\n\t}\n\texports.buildItem = buildItem;\n\tfunction buildItemInCategory(detailsNode, root, categoryName, context) {\n\t    var item = null;\n\t    if (detailsNode.type == \"CHECKBOX\") {\n\t        item = new CheckBoxField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"JSONSCHEMA\"\n\t        && detailsNode.valueText !== null) {\n\t        item = new JSONSchemaField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"XMLSCHEMA\"\n\t        && detailsNode.valueText !== null) {\n\t        item = new XMLSchemaField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"MARKDOWN\") {\n\t        item = new MarkdownField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"SELECTBOX\"\n\t        && detailsNode.options !== null) {\n\t        item = new SelectBox(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"MULTIEDITOR\") {\n\t        item = new SimpleMultiEditor(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"TREE\") {\n\t        item = new LowLevelTreeField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"STRUCTURED\") {\n\t        item = new StructuredField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"TYPEDISPLAY\") {\n\t        item = new TypeDisplayItem(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"TYPESELECT\") {\n\t        item = new TypeSelectBox(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"JSONEXAMPLE\"\n\t        && detailsNode.valueText !== null) {\n\t        item = new ExampleField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"XMLEXAMPLE\"\n\t        && detailsNode.valueText !== null) {\n\t        item = new XMLExampleField(detailsNode, context);\n\t    }\n\t    else if (detailsNode.type == \"ATTRIBUTETEXT\") {\n\t        item = new PropertyEditorInfo(detailsNode, context);\n\t    }\n\t    if (item != null) {\n\t        root.addItemToCategory(categoryName, item);\n\t    }\n\t    else {\n\t        console.log(\"Can not recognize element \" + detailsNode.type);\n\t    }\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"underscore\");\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar fs = __webpack_require__(12);\n\tvar path = __webpack_require__(2);\n\tvar UI = __webpack_require__(5);\n\tvar SpacePenViews = __webpack_require__(7);\n\t// import yaml = require(\"yaml-ast-parser\")\n\tvar linterUI = __webpack_require__(13);\n\tvar editorTools = __webpack_require__(1);\n\tvar ramlServer = __webpack_require__(17);\n\tvar textEditProcessor = ramlServer.textEditProcessor;\n\t// export function createGlobalSchema(attr:hl.IAttribute){\n\t//     var r=attr.parent().root();\n\t//     var t:def.NodeClass=<def.NodeClass>attr.property().range().universe().type(\"GlobalSchema\");\n\t//     var sc=stubs.createStubNode(t,(<any>t.universe().type(\"Api\")).property(\"schemas\"),\"\"+attr.value());\n\t//     sc.attrOrCreate(\"value\").setValue(\"!include \"+\"schemas/\"+attr.value()+\".json\")\n\t//     r.add(sc);\n\t//     var ed=atom.workspace.getActiveTextEditor();\n\t//     ed.getBuffer().setText(r.lowLevel().unit().contents());\n\t//     var sdir=path.resolve(path.dirname(ed.getPath()),\"schemas\");\n\t//     if (!fs.existsSync(sdir)){\n\t//         fs.mkdirSync(sdir);\n\t//     }\n\t//     var shFile=path.resolve(sdir,attr.value()+\".json\");\n\t//     fs.writeFileSync(shFile,`\n\t// {\n\t//   \"$schema\" : \"http://json-schema.org/draft-04/schema\" ,\n\t//   \"type\" : \"object\" ,\n\t//   \"properties\" : {\n\t//    }\n\t// }\n\t// `)\n\t//    atom.workspace.open(shFile,{});\n\t// }\n\t// export function createGlobalSchemaFromNameAndContent(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n\t//     if (universeHelpers.isRAML10Node(root)) {\n\t//         createGlobalSchemaFromNameAndContent10(root, name, schp, content, absolutePath);\n\t//     } else if (universeHelpers.isRAML08Node(root)) {\n\t//         createGlobalSchemaFromNameAndContent08(root, name, schp, content, absolutePath);\n\t//     }\n\t// }\n\tfunction createSchemaFile(content, schemaPath, absolutePath) {\n\t    var ed = getActiveEditor();\n\t    var sdir = absolutePath ? path.dirname(absolutePath) : path.resolve(path.dirname(ed.getPath()), path.dirname(schemaPath));\n\t    if (!fs.existsSync(sdir)) {\n\t        fs.mkdirSync(sdir);\n\t    }\n\t    var shFile = absolutePath ? absolutePath : path.resolve(path.dirname(ed.getPath()), schemaPath);\n\t    fs.writeFileSync(shFile, content);\n\t}\n\t// export function createGlobalSchemaFromNameAndContent10(root:hl.IHighLevelNode,name:string,\n\t//                                                        schemaPath:string,content:string, absolutePath?: string){\n\t//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe10.TypeDeclaration.name);\n\t//     var sc=stubs.createStubNode(t,\n\t//         (<any>t.universe().type(universes.Universe10.Api.name)).property(universes.Universe10.Api.properties.types.name),\n\t//         \"\"+name);\n\t//\n\t//     sc.attrOrCreate(universes.Universe10.TypeDeclaration.properties.type.name).setValue(\"!include \"+schemaPath)\n\t//\n\t//     root.add(sc);\n\t//\n\t//     createSchemaFile(content, schemaPath, absolutePath);\n\t// }\n\t// export function createGlobalSchemaFromNameAndContent08(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n\t//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe08.GlobalSchema.name);\n\t//     var sc=stubs.createStubNode(t,\n\t//         (<any>t.universe().type(universes.Universe08.Api.name)).property(universes.Universe08.Api.properties.schemas.name),\n\t//         \"\"+name);\n\t//\n\t//     sc.attrOrCreate(universes.Universe08.GlobalSchema.properties.value.name).setValue(\"!include \"+schp)\n\t//\n\t//     root.add(sc);\n\t//\n\t//     createSchemaFile(content, schp, absolutePath);\n\t// }\n\t// export function saveExample(r:hl.IHighLevelNode,schp:string,content:string){\n\t//     var ed=getActiveEditor();\n\t//     var sdir=path.resolve(path.dirname(ed.getPath()),path.dirname(schp));\n\t//     if (!fs.existsSync(sdir)){\n\t//         fs.mkdirSync(sdir);\n\t//     }\n\t//     var shFile=path.resolve(path.dirname(ed.getPath()),schp);\n\t//     fs.writeFileSync(shFile,content)\n\t// }\n\tvar NewProjectDialog = /** @class */ (function () {\n\t    function NewProjectDialog(title) {\n\t        if (title === void 0) { title = \"Create RAML Project\"; }\n\t        this.title = title;\n\t        this.apititle = \"New API\";\n\t        this.version = \"v1\";\n\t        this.baseUri = \"http://api.samplehost.com\";\n\t        this._raml1 = true;\n\t        this._defStructure = true;\n\t        this._createSampleResource = true;\n\t        this.sourceValue = path.resolve(this.generateDefaultProjectParentFolder(), \"newRamlProject\");\n\t    }\n\t    NewProjectDialog.prototype.generateDefaultProjectParentFolder = function () {\n\t        return UI.fdUtils.getHome();\n\t    };\n\t    NewProjectDialog.prototype.extraContent = function (s) {\n\t    };\n\t    NewProjectDialog.prototype.validateProjectLocation = function (value) {\n\t        var toValidate = value ? value.trim() : \"\";\n\t        if (!toValidate) {\n\t            return UI.errorStatus(\"Path should't be empty\");\n\t        }\n\t        var parentDirectory = path.dirname(toValidate);\n\t        if (!parentDirectory || parentDirectory == \".\")\n\t            return UI.errorStatus(\"Can not find path parent\");\n\t        if (!fs.existsSync(parentDirectory))\n\t            return UI.errorStatus(\"Parent directory does not exist\");\n\t        return UI.okStatus();\n\t    };\n\t    NewProjectDialog.prototype.validateTitle = function (value) {\n\t        var toValidate = value ? value.trim() : \"\";\n\t        if (!toValidate || toValidate.length < 1) {\n\t            return UI.errorStatus(\"Title field is required\");\n\t        }\n\t        return UI.okStatus();\n\t    };\n\t    NewProjectDialog.prototype.show = function () {\n\t        var _this = this;\n\t        var zz = null;\n\t        var section = UI.section(this.title, UI.Icon.BOOK, false, false, UI.h3(\"Please select location to place your project:\")).pad(10, 10);\n\t        var panel = new UI.Panel(UI.LayoutType.BLOCK);\n\t        var statusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n\t        var slf = new UI.CustomField(\"\", statusLabel, function (x) { return x; });\n\t        slf.setDisplay(this.validateProjectLocation(this.sourceValue).code == UI.StatusCode.ERROR);\n\t        panel.addChild(slf);\n\t        var projectLocationInput = UI.texfField(\"\", this.sourceValue, function (x) { return _this.sourceValue = x.getBinding().get(); });\n\t        projectLocationInput.getBinding().addValidator(function () { return _this.validateProjectLocation(_this.sourceValue); });\n\t        projectLocationInput.setStyle(\"width\", \"400px\");\n\t        projectLocationInput.getBinding().addListener(function (value) {\n\t            //var st = projectLocationInput.getBinding().status()\n\t            var st = _this.validateProjectLocation(value);\n\t            if (st.code != UI.StatusCode.ERROR) {\n\t                //this.updateUI(q, x)\n\t                statusLabel.setText(\"\");\n\t                statusLabel.setIcon(UI.Icon.NONE);\n\t                slf.setDisplay(false);\n\t            }\n\t            else {\n\t                statusLabel.setText(st.message);\n\t                statusLabel.setIcon(UI.Icon.BUG);\n\t                slf.setDisplay(true);\n\t            }\n\t        });\n\t        panel.addChild(\n\t        //UI.hc(\n\t        projectLocationInput\n\t        //UI.buttonSimple(\"Browse\",\n\t        //    ()=>UI.fdUtils..openFolderDialog(\"Select project location\",\n\t        //            newLocation=> {\n\t        //                this.sourceValue=newLocation\n\t        //                projectLocationInput.getBinding().set(newLocation)\n\t        //                //var atomEditor = projectLocationInput.getActualField()\n\t        //                //var atomEditorUI = atomEditor.ui()\n\t        //                //var atomEditorUIModel = atomEditorUI.getModel();\n\t        //                //atomEditorUIModel.setText(newLocation)\n\t        //            },\n\t        //            true, this.sourceValue)\n\t        //).margin(10,0).setStyle(\"margin-bottom\", \"0.75em\")\n\t        //).setPercentWidth(100)\n\t        );\n\t        panel.addChild(UI.h3(\"Title of your API:\"));\n\t        var titleStatusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n\t        var titleStatusMessage = new UI.CustomField(\"\", titleStatusLabel, function (x) { return x; });\n\t        titleStatusMessage.setDisplay(false);\n\t        panel.addChild(titleStatusMessage);\n\t        var titleTextField = UI.texfField(\"\", this.apititle, function (x) { return _this.apititle = x.getBinding().get(); });\n\t        titleTextField.getBinding().addValidator(function () { return _this.validateTitle(_this.apititle); });\n\t        titleTextField.getBinding().addListener(function (value) {\n\t            var status = _this.validateTitle(value);\n\t            if (status.code !== UI.StatusCode.ERROR) {\n\t                titleStatusLabel.setText(\"\");\n\t                titleStatusLabel.setIcon(UI.Icon.NONE);\n\t                titleStatusMessage.setDisplay(false);\n\t            }\n\t            else {\n\t                titleStatusLabel.setText(status.message);\n\t                titleStatusLabel.setIcon(UI.Icon.BUG);\n\t                titleStatusMessage.setDisplay(true);\n\t            }\n\t        });\n\t        panel.addChild(titleTextField);\n\t        panel.addChild(UI.h3(\"Version of your API\"));\n\t        panel.addChild(UI.texfField(\"\", this.version, function (x) { return _this.version = x.getBinding().get(); }));\n\t        panel.addChild(UI.h3(\"Base URI of your API\"));\n\t        panel.addChild(UI.texfField(\"\", this.baseUri, function (x) { return _this.baseUri = x.getBinding().get(); }));\n\t        section.addChild(panel);\n\t        var r1 = UI.checkBox(\"Use RAML 1.0\");\n\t        r1.setValue(this._raml1);\n\t        r1.getBinding().addListener(function (x) { return _this._raml1 = r1.getValue(); });\n\t        section.addChild(r1);\n\t        var r2 = UI.checkBox(\"Create default directory structure\");\n\t        r2.setValue(this._defStructure);\n\t        r2.getBinding().addListener(function (x) { return _this._defStructure = r2.getValue(); });\n\t        section.addChild(r2);\n\t        var r3 = UI.checkBox(\"Create sample resource and method\");\n\t        r3.setValue(this._createSampleResource);\n\t        r3.getBinding().addListener(function (x) { return _this._createSampleResource = r3.getValue(); });\n\t        section.addChild(r3);\n\t        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n\t        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n\t        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) { zz.destroy(); }).margin(10, 10));\n\t        buttonBar.addChild(UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n\t            if (_this.validateTitle(_this.apititle).code === UI.StatusCode.ERROR) {\n\t                return;\n\t            }\n\t            if (_this.validateProjectLocation(_this.sourceValue).code === UI.StatusCode.ERROR) {\n\t                return;\n\t            }\n\t            _this.onOk(zz);\n\t            zz.destroy();\n\t        }));\n\t        section.addChild(buttonBar);\n\t        zz = atom.workspace.addModalPanel({ item: section.renderUI() });\n\t    };\n\t    NewProjectDialog.prototype.createIfNotExist = function (p) {\n\t        var ps = path.resolve(this.sourceValue, p);\n\t        if (!fs.existsSync(ps)) {\n\t            fs.mkdirSync(ps);\n\t        }\n\t    };\n\t    NewProjectDialog.prototype.onOk = function (zz) {\n\t        if (!fs.existsSync(this.sourceValue)) {\n\t            fs.mkdirSync(this.sourceValue);\n\t        }\n\t        if (this._defStructure) {\n\t            this.createIfNotExist(\"schemas\");\n\t            this.createIfNotExist(\"examples\");\n\t            this.createIfNotExist(\"traits\");\n\t            this.createIfNotExist(\"resourceTypes\");\n\t            this.createIfNotExist(\"securitySchemes\");\n\t            this.createIfNotExist(\"documentation\");\n\t            if (this._raml1) {\n\t                this.createIfNotExist(\"notebooks\");\n\t                this.createIfNotExist(\"scripts\");\n\t            }\n\t        }\n\t        var content = createRAMLFile(this.apititle, this.version, this.baseUri, this._createSampleResource, this._raml1);\n\t        var ps = path.resolve(this.sourceValue, \"api.raml\");\n\t        fs.writeFileSync(ps, content);\n\t        atom.open({ pathsToOpen: [this.sourceValue, ps] });\n\t    };\n\t    return NewProjectDialog;\n\t}());\n\tfunction createRAMLFile(title, version, baseUri, sample, raml1) {\n\t    if (sample === void 0) { sample = true; }\n\t    if (raml1 === void 0) { raml1 = true; }\n\t    var apiLines = [(raml1 ? \"#%RAML 1.0\" : \"#%RAML 0.8\"), \"title: \" + title];\n\t    if (version)\n\t        apiLines.push(\"version: \" + version);\n\t    if (baseUri)\n\t        apiLines.push(\"baseUri: \" + baseUri);\n\t    var typesLines = [\n\t        'types:',\n\t        '  TestType:',\n\t        '    type: object',\n\t        '    properties:',\n\t        '      id: number',\n\t        '      optional?: string',\n\t        '      expanded:',\n\t        '        type: object',\n\t        '        properties:',\n\t        '          count: number'\n\t    ], resourceLines = [\n\t        '/helloWorld:',\n\t        '  get:',\n\t        '    responses:',\n\t        '      200:',\n\t        '        body:',\n\t        '          application/json:',\n\t        '            example: |',\n\t        '              {',\n\t        '                \"message\" : \"Hello World\"',\n\t        '              }'\n\t    ];\n\t    var result = apiLines;\n\t    if (sample) {\n\t        if (raml1)\n\t            result = result.concat(typesLines);\n\t        result = result.concat(resourceLines);\n\t    }\n\t    return result.join('\\n') + '\\n';\n\t}\n\texports.createRAMLFile = createRAMLFile;\n\tfunction newProject() {\n\t    new NewProjectDialog().show();\n\t}\n\texports.newProject = newProject;\n\t// export function moveResource(h:hl.IHighLevelNode){\n\t//     new move.MoveElementsDialog(h, \"Resource Type\",true).show()\n\t// }\n\tfunction splitOnLines(text) {\n\t    var lines = text.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n\t    return lines;\n\t}\n\texports.splitOnLines = splitOnLines;\n\tfunction cleanEmptyLines(text) {\n\t    var lines = splitOnLines(text);\n\t    var rs = [];\n\t    for (var i = 0; i < lines.length; i++) {\n\t        if (lines[i].trim().length > 0) {\n\t            rs.push(lines[i]);\n\t        }\n\t    }\n\t    return rs.join(\"\");\n\t}\n\texports.cleanEmptyLines = cleanEmptyLines;\n\t//FIXME remove it from here duplication with jsyaml2lowLevel.ts\n\tfunction stripIndent(text, indent) {\n\t    var lines = splitOnLines(text);\n\t    var rs = [];\n\t    for (var i = 0; i < lines.length; i++) {\n\t        if (i == 0) {\n\t            rs.push(lines[0]);\n\t        }\n\t        else {\n\t            rs.push(lines[i].substring(indent.length));\n\t        }\n\t    }\n\t    return rs.join(\"\");\n\t}\n\t// var leadingIndent = function (node:lowLevel.ILowLevelASTNode, text:string) {\n\t//     var leading = \"\";\n\t//     var pos = node.start() - 1;\n\t//     while (pos > 0) {\n\t//         var ch = text[pos];\n\t//         if (ch == '\\r' || ch == '\\n') break;\n\t//         leading = ch + leading;\n\t//         pos--;\n\t//     }\n\t//     return leading;\n\t// };\n\tfunction indent(line) {\n\t    var rs = \"\";\n\t    for (var i = 0; i < line.length; i++) {\n\t        var c = line[i];\n\t        if (c == '\\r' || c == '\\n') {\n\t            continue;\n\t        }\n\t        if (c == ' ' || c == '\\t') {\n\t            rs += c;\n\t            continue;\n\t        }\n\t        break;\n\t    }\n\t    return rs;\n\t}\n\tfunction getActiveEditor() {\n\t    var activeEditor = atom.workspace.getActiveTextEditor();\n\t    if (activeEditor) {\n\t        return activeEditor;\n\t    }\n\t    if (editorTools.aquireManager())\n\t        return editorTools.aquireManager().getCurrentEditor();\n\t    return null;\n\t}\n\texports.getActiveEditor = getActiveEditor;\n\t/**\n\t * Sets active editor cursor at the position (starting from 0).\n\t * @param position\n\t */\n\tfunction gotoPosition(position) {\n\t    var activeEditor = getActiveEditor();\n\t    if (!activeEditor) {\n\t        return;\n\t    }\n\t    var bufferPos = activeEditor.getBuffer().positionForCharacterIndex(position);\n\t    activeEditor.setSelectedBufferRange({ start: bufferPos, end: bufferPos }, {});\n\t}\n\texports.gotoPosition = gotoPosition;\n\tfunction gotoDeclaration() {\n\t    var editor = getActiveEditor();\n\t    if (!editor)\n\t        return;\n\t    var position = editor.getCursorBufferPosition();\n\t    var offset = editor.getBuffer().characterIndexForPosition(position);\n\t    var path = editor.getPath();\n\t    ramlServer.getNodeClientConnection().openDeclaration(path, offset).then(function (locations) {\n\t        if (!locations)\n\t            return;\n\t        atom.workspace.open(locations[0].uri, {}).then(function (x) {\n\t            var activeEditor = getActiveEditor();\n\t            var p1 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.start);\n\t            var p2 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.end);\n\t            activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n\t        });\n\t    });\n\t}\n\texports.gotoDeclaration = gotoDeclaration;\n\t// export class MoveToNewFileDialog{\n\t//\n\t//     constructor(private node:hl.IHighLevelNode){\n\t//\n\t//     }\n\t//     destination:string;\n\t//\n\t//     show(){\n\t//         var zz:any=null;\n\t//         var node=this.node;\n\t//         var vc=UI.section(\"Move node content to new file \",UI.Icon.GIST_NEW,false,false);\n\t//         var errorLabel=UI.label(\"please enter correct destination path\",UI.Icon.BUG,UI.TextClasses.ERROR,UI.HighLightClasses.NONE);\n\t//         vc.addChild(UI.vc(errorLabel));\n\t//         vc.addChild(UI.label(\"Please enter destination path\"));\n\t//         var txt=UI.texfField(\"\",\"\",x=>{\n\t//             if (!txt){\n\t//                 return;\n\t//             }\n\t//             this.destination=txt.getBinding().get();\n\t//             var isError=this.destination.trim().length==0\n\t//             if (!isError) {\n\t//                 if (path.extname(this.destination) != '.raml') {\n\t//                     isError = true;\n\t//                 }\n\t//             }\n\t//             if (!isError) {\n\t//                 var dir = path.resolve(path.dirname(getActiveEditor().getPath()), path.dirname(this.destination));\n\t//                 if (!fs.existsSync(dir)) {\n\t//                     isError = true;\n\t//                 }\n\t//                 else{\n\t//                     var st=fs.statSync(dir)\n\t//                     if (!st.isDirectory()){\n\t//                         isError=true;\n\t//                     }\n\t//                 }\n\t//             }\n\t//\n\t//             errorLabel.setDisplay(isError);\n\t//             okButton.setDisabled(isError);\n\t//         });\n\t//         vc.addChild(UI.vc(txt));\n\t//         var buttonBar=UI.hc().setPercentWidth(100).setStyle(\"display\",\"flex\");\n\t//         buttonBar.addChild(UI.label(\"\",null,null,null).setStyle(\"flex\",\"1\"))\n\t//         buttonBar.addChild(UI.button(\"Cancel\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.NO_HIGHLIGHT,UI.Icon.NONE,x=>{zz.destroy()}).margin(10,10))\n\t//         var okButton=UI.button(\"Move\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.SUCCESS,UI.Icon.NONE,x=>{\n\t//             var d=path.resolve(path.dirname(getActiveEditor().getPath()), this.destination);\n\t//             var dump=this.node.lowLevel().dump();\n\t//             var ci=splitOnLines(dump);\n\t//             var li=ci.length>1?indent(ci[1]):indent(ci[0]);\n\t//             dump=dump.substring(this.node.lowLevel().keyEnd()-this.node.lowLevel().start()+1).trim();\n\t//             dump=stripIndent(dump,li);\n\t//             dump=\"#%RAML 0.8 \"+this.node.definition().nameId()+\"\\n\"+dump;\n\t//             fs.writeFileSync(d,dump);\n\t//             //no we need to replace content of the node with text;\n\t//\n\t//             var txt=node.lowLevel().unit().contents();\n\t//             var endPart=txt.substring(node.lowLevel().end());\n\t//             var startPart=txt.substring(0,node.lowLevel().keyEnd()+1);\n\t//             var vl=startPart+\" !include \"+this.destination+endPart;\n\t//             getActiveEditor().setText(vl);\n\t//             zz.destroy();\n\t//         });\n\t//         okButton.setDisabled(true)\n\t//         buttonBar.addChild(okButton);\n\t//         vc.addChild(buttonBar)\n\t//         var html=vc.renderUI();\n\t//         zz=(<any>atom).workspace.addModalPanel( { item: html});\n\t//         html.focus();\n\t//     }\n\t//\n\t//\n\t// }\n\t// export function moveOut(h:hl.IHighLevelNode){\n\t//     new MoveToNewFileDialog(h).show()\n\t// }\n\tfunction revalidate() {\n\t    var currentEditor = getActiveEditor();\n\t    if (!currentEditor)\n\t        return;\n\t    linterUI.relint(currentEditor);\n\t}\n\texports.revalidate = revalidate;\n\t/**\n\t * Gets opened editor for specified path or uri.\n\t * Currently only returns active editor if applicable, in future may also return other opened editors.\n\t * @param path\n\t * @returns {any}\n\t */\n\tfunction getEditorByUriOrPath(path) {\n\t    //TODO consider also returning other opened editors\n\t    var activeEditor = getActiveEditor();\n\t    if (activeEditor.getPath() == path)\n\t        return activeEditor;\n\t    return null;\n\t}\n\texports.getEditorByUriOrPath = getEditorByUriOrPath;\n\t/**\n\t * Applies a set of changed documents to current documents and files\n\t * @param changedDocuments\n\t */\n\tfunction applyChangedDocuments(changedDocuments) {\n\t    for (var _i = 0, changedDocuments_1 = changedDocuments; _i < changedDocuments_1.length; _i++) {\n\t        var changedDocument = changedDocuments_1[_i];\n\t        var editor = getEditorByUriOrPath(changedDocument.uri);\n\t        var oldContents = null;\n\t        if (editor) {\n\t            oldContents = editor.getText();\n\t        }\n\t        else {\n\t            oldContents = fs.readFileSync(changedDocument.uri).toString();\n\t        }\n\t        var newText = null;\n\t        if (changedDocument.text) {\n\t            newText = changedDocument.text;\n\t        }\n\t        else if (changedDocument.textEdits) {\n\t            newText = textEditProcessor.applyDocumentEdits(oldContents, changedDocument.textEdits);\n\t        }\n\t        else {\n\t            continue;\n\t        }\n\t        if (editor) {\n\t            editor.getBuffer().setText(newText);\n\t        }\n\t        else {\n\t            fs.writeFileSync(changedDocument.uri, newText);\n\t        }\n\t    }\n\t}\n\texports.applyChangedDocuments = applyChangedDocuments;\n\t/**\n\t * Tries to detect the name/symbol at position.\n\t * In practise it is impossible to do properly in all cases unless having AST at hands\n\t * or making the server to do this, but MS LSP does not have an interface for this.\n\t *\n\t * @param contents\n\t * @param offset\n\t */\n\tfunction findCurrentName(contents, offset) {\n\t    //we cant use alpha-numeric detection due to potential non-english alphabets.\n\t    //so we have to defined some stop characters and expand the list when a bug case is detected\n\t    var stopCharacters = [\n\t        \"\\r\", \"\\n\", \"[\", \"]\", \":\", \".\", \",\", \" \", \"\\t\", \"{\", \"}\", \"'\", \"'\", \"\\\"\"\n\t    ];\n\t    var beginning = 0;\n\t    for (var currentOffset = offset - 1; currentOffset >= 0; currentOffset--) {\n\t        var currentChar = contents.charAt(currentOffset);\n\t        var found = false;\n\t        for (var _i = 0, stopCharacters_1 = stopCharacters; _i < stopCharacters_1.length; _i++) {\n\t            var stopChar = stopCharacters_1[_i];\n\t            if (currentChar == stopChar) {\n\t                beginning = currentOffset + 1;\n\t                found = true;\n\t                break;\n\t            }\n\t        }\n\t        if (found)\n\t            break;\n\t    }\n\t    var end = contents.length;\n\t    for (var currentOffset = offset; currentOffset < contents.length; currentOffset++) {\n\t        var currentChar = contents.charAt(currentOffset);\n\t        var found = false;\n\t        for (var _a = 0, stopCharacters_2 = stopCharacters; _a < stopCharacters_2.length; _a++) {\n\t            var stopChar = stopCharacters_2[_a];\n\t            if (currentChar == stopChar) {\n\t                end = currentOffset;\n\t                found = true;\n\t                break;\n\t            }\n\t        }\n\t        if (found)\n\t            break;\n\t    }\n\t    return contents.substring(beginning, end);\n\t}\n\t/**\n\t * Activates renaming for current active editor and cursor position\n\t */\n\tfunction renameRAMLElement() {\n\t    var editor = getActiveEditor();\n\t    if (!editor)\n\t        return;\n\t    if (path.extname(editor.getPath()) != '.raml')\n\t        return;\n\t    var position = editor.getCursorBufferPosition();\n\t    var offset = editor.getBuffer().characterIndexForPosition(position);\n\t    var editorPath = editor.getPath();\n\t    var currentName = findCurrentName(editor.getText(), offset);\n\t    UI.prompt(\"Enter new name for: \", function (newName) {\n\t        ramlServer.getNodeClientConnection().\n\t            rename(editorPath, offset, newName).then(function (changedDocuments) {\n\t            applyChangedDocuments(changedDocuments);\n\t        });\n\t    }, currentName);\n\t}\n\texports.renameRAMLElement = renameRAMLElement;\n\tvar getKeyValue = function (offset, txt) {\n\t    var m = offset;\n\t    for (var i = offset; i >= 0; i--) {\n\t        var c = txt.charAt(i);\n\t        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t') {\n\t            m = i + 1;\n\t            break;\n\t        }\n\t    }\n\t    var res = \"\";\n\t    for (var i = m; m < txt.length; i++) {\n\t        var c = txt.charAt(i);\n\t        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t' || c == ':') {\n\t            break;\n\t        }\n\t        res += c;\n\t    }\n\t    return res;\n\t};\n\t// export function select(){\n\t//     var ed=getActiveEditor();\n\t//     var request={editor:ed,bufferPosition:ed.getCursorBufferPosition()};\n\t//     var node=provider.getAstNode(request,false);\n\t//     if (!node){\n\t//         return;\n\t//     }\n\t//     var start=ed.getBuffer().positionForCharacterIndex(node.lowLevel().start());\n\t//     var end=ed.getBuffer().positionForCharacterIndex(node.lowLevel().end());\n\t//     ed.setSelectedBufferRange({start:start,end:end},{});\n\t// }\n\t//export function expandSignature(attr:hl.IAttribute){\n\t//    var tr=signature.convertToTrait(signature.parse(attr));\n\t//    //console.log('trait:\\n' + tr.highLevel().lowLevel().dump());\n\t//    var res = attr.parent();\n\t//    //pr.remove(attr); // incorrect usage!!! remove attributes as below\n\t//    attr.remove();\n\t//    tr.highLevel().elements().forEach(x=>{\n\t//        res.add(<any>x)\n\t//    });\n\t//    var ed=getActiveEditor();\n\t//    ed.setText(attr.root().lowLevel().unit().contents());\n\t//}\n\tfunction findUsagesImpl(renderer) {\n\t    if (renderer === void 0) { renderer = display; }\n\t    var editor = getActiveEditor();\n\t    var position = editor.getCursorBufferPosition();\n\t    var offset = editor.getBuffer().characterIndexForPosition(position);\n\t    var path = editor.getPath();\n\t    ramlServer.getNodeClientConnection().findReferences(path, offset).then(function (locations) {\n\t        if (!locations)\n\t            return;\n\t        renderer(locations);\n\t    });\n\t}\n\texports.findUsagesImpl = findUsagesImpl;\n\tfunction display(n) {\n\t    if (sv) {\n\t        sv.setInput(n);\n\t    }\n\t    else {\n\t        sv = new SearchResultView(n);\n\t        sv.panel = atom.workspace.addBottomPanel({ item: sv });\n\t    }\n\t}\n\tfunction findUsages() {\n\t    findUsagesImpl(display);\n\t}\n\texports.findUsages = findUsages;\n\tvar SearchResultView = /** @class */ (function (_super) {\n\t    __extends(SearchResultView, _super);\n\t    function SearchResultView(_result) {\n\t        var _this = _super.call(this) || this;\n\t        _this._result = _result;\n\t        _this.isAttached = false;\n\t        return _this;\n\t    }\n\t    SearchResultView.prototype.initialize = function () {\n\t        _super.prototype.initialize.apply(this, arguments);\n\t        return true;\n\t    };\n\t    SearchResultView.content = function () {\n\t        return this.div({ class: 'raml-console pane-item', tabindex: -1 });\n\t    };\n\t    SearchResultView.prototype.attached = function () {\n\t        if (this.isAttached) {\n\t            return;\n\t        }\n\t        this.load();\n\t        this.isAttached = true;\n\t    };\n\t    SearchResultView.prototype.setInput = function (_result) {\n\t        this._result = _result;\n\t        this.load();\n\t    };\n\t    SearchResultView.prototype.load = function () {\n\t        var _this = this;\n\t        var section = UI.section(\"References\", UI.Icon.SEARCH);\n\t        var view = UI.list(this._result, function (location) {\n\t            var p1 = getActiveEditor().getBuffer().positionForCharacterIndex(location.range.start);\n\t            var res = UI.hc(UI.a(location.uri, function (y) {\n\t                atom.workspace.open(location.uri, {}).then(function (x) {\n\t                    var activeEditor = getActiveEditor();\n\t                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(location.range.start);\n\t                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(location.range.end);\n\t                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n\t                });\n\t            }), UI.label(\" line:\", UI.Icon.NONE, UI.TextClasses.SUBTLE).pad(5, 5), UI.label(\"\" + p1.row, UI.Icon.NONE, UI.TextClasses.SUCCESS));\n\t            return res;\n\t        });\n\t        view.setStyle(\"max-height\", \"400px\");\n\t        section.addChild(view);\n\t        section.addChild(UI.button(\"Close\", UI.ButtonSizes.SMALL, UI.ButtonHighlights.PRIMARY, UI.Icon.NONE, function (x) { _this.panel.destroy(); sv = null; }));\n\t        this.html(section.renderUI());\n\t    };\n\t    return SearchResultView;\n\t}(SpacePenViews.ScrollView));\n\tvar sv;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar fs = __webpack_require__(12);\n\t// import parser = require(\"raml-1-parser\");\n\t// import parserUtils = parser.utils;\n\tvar unitUtils = __webpack_require__(14);\n\tvar TextBuffer = __webpack_require__(15);\n\tvar editorManager = __webpack_require__(16);\n\tvar ramlServer = __webpack_require__(17);\n\texports.grammarScopes = ['source.raml'];\n\texports.scope = 'file';\n\texports.lintOnFly = true;\n\tvar raml_language_server_1 = __webpack_require__(17);\n\tfunction relint(editor) {\n\t    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n\t    editor.getBuffer().emitter.emit(\"did-change\", {\n\t        oldText: editor.getBuffer().getText(),\n\t        newText: editor.getBuffer().getText()\n\t    });\n\t}\n\texports.relint = relint;\n\tfunction initEditorObservers(linter) {\n\t    atom.workspace.observeTextEditors(function (editor) { return relint(editor); });\n\t    return {\n\t        dispose: function () {\n\t        }\n\t    };\n\t}\n\texports.initEditorObservers = initEditorObservers;\n\tfunction destroyLinter(linterApi, linter) {\n\t    linterApi.deleteMessages(linter);\n\t    linterApi.deleteLinter(linter);\n\t}\n\tfunction isRAMLUnit(editor) {\n\t    var contents = editor.getBuffer().getText();\n\t    return unitUtils.isRAMLUnit(contents);\n\t}\n\tvar combErrors = function (result) {\n\t    var map = {};\n\t    result.forEach(function (x) {\n\t        var original = JSON.parse(JSON.stringify(x));\n\t        original.trace = null;\n\t        var newKey = JSON.stringify(original);\n\t        var tr = map[newKey];\n\t        if (tr) {\n\t            tr.push(x);\n\t        }\n\t        else {\n\t            map[newKey] = [x];\n\t        }\n\t    });\n\t    var rs = [];\n\t    for (var i in map) {\n\t        var mes = JSON.parse(i);\n\t        mes.trace = [];\n\t        var ms = map[i];\n\t        ms.forEach(function (x) {\n\t            if (x.trace) {\n\t                mes.trace = mes.trace.concat(x.trace);\n\t            }\n\t        });\n\t        mes.trace = combErrors(mes.trace);\n\t        rs.push(mes);\n\t    }\n\t    return rs;\n\t};\n\tfunction tabWarnings(textEditor) {\n\t    var result = [];\n\t    var text = textEditor.getBuffer().getText();\n\t    var tab = 0;\n\t    while (true) {\n\t        var tab = text.indexOf('\\t', tab);\n\t        if (tab != -1) {\n\t            var p1 = textEditor.getBuffer().positionForCharacterIndex(tab);\n\t            var p2 = textEditor.getBuffer().positionForCharacterIndex(tab + 1);\n\t            var message = {\n\t                type: (\"Warning\"),\n\t                filePath: textEditor.getPath(),\n\t                text: \"Using tabs  can lead to unpredictable results\",\n\t                trace: [],\n\t                range: [[p1.row, p1.column], [p2.row, p2.column]]\n\t            };\n\t            result.push(message);\n\t            tab++;\n\t        }\n\t        else {\n\t            break;\n\t        }\n\t    }\n\t    return result;\n\t}\n\tfunction postPocessError(editor, error, buffers) {\n\t    var editorPath = editor.getPath();\n\t    if (!buffers[editorPath]) {\n\t        buffers[editorPath] = editor.getBuffer();\n\t    }\n\t    return Promise.resolve(error).then(function (error) {\n\t        if (!error.filePath) {\n\t            error.filePath = editorPath;\n\t        }\n\t        var buffer = buffers[error.filePath];\n\t        if (!buffer) {\n\t            return new Promise(function (resolve, reject) {\n\t                fs.readFile(error.filePath, function (err, data) {\n\t                    if (err) {\n\t                        reject(err);\n\t                    }\n\t                    else {\n\t                        buffer = new TextBuffer(data.toString());\n\t                        buffers[error.filePath] = buffer;\n\t                        resolve(buffer);\n\t                    }\n\t                });\n\t            });\n\t        }\n\t        return buffer;\n\t    }).then(function (buffer) {\n\t        clientConnection.debugDetail(\"Converting an error with range: [\" + error.range.start + \" , \" + error.range.end + \"]\", \"Linter-ui\", \"postPocessError\");\n\t        if (error.range.start != null && error.range.end != null) {\n\t            clientConnection.debugDetail(\"Converting an error with range as array: [\" + error.range[0] + \" , \" + error.range[1] + \"]\", \"Linter-ui\", \"postPocessError\");\n\t            var p1 = buffer.positionForCharacterIndex(error.range.start);\n\t            var p2 = buffer.positionForCharacterIndex(error.range.end);\n\t            clientConnection.debugDetail(\"Result error range: [\" + p1.row + \" , \" + p1.column + \"] ; [\" + p2.row + \" , \" + p2.column + \"]\", \"Linter-ui\", \"postPocessError\");\n\t            error.range = [[p1.row, p1.column], [p2.row, p2.column]];\n\t        }\n\t        var traceErrors = error.trace || [];\n\t        var tracePromises = traceErrors.map(function (traceError) { return postPocessError(editor, traceError, buffers); });\n\t        return Promise.all(tracePromises).then(function (trace) {\n\t            error.trace = trace;\n\t            return error;\n\t        });\n\t    });\n\t}\n\tfunction getEditorId(textEditor) {\n\t    return textEditor.id;\n\t}\n\tvar ValidationReportExpected = /** @class */ (function () {\n\t    function ValidationReportExpected() {\n\t    }\n\t    return ValidationReportExpected;\n\t}());\n\tvar clientConnection = raml_language_server_1.getNodeClientConnection();\n\tvar expectedValidationReports = [];\n\tfunction findAndRemoveExpectedReports(uri, versionLimit) {\n\t    var result = [];\n\t    expectedValidationReports = expectedValidationReports.filter(function (reportExpected) {\n\t        if (reportExpected.uri == uri\n\t            && (versionLimit == null || reportExpected.expectedVersion == null ||\n\t                versionLimit >= reportExpected.expectedVersion)) {\n\t            result.push(reportExpected);\n\t            return false;\n\t        }\n\t        return true;\n\t    });\n\t    return result;\n\t}\n\tvar latestRecievedReport = null;\n\tclientConnection.onValidationReport(function (report) {\n\t    clientConnection.debugDetail(\"Got debug report for uri \" + report.pointOfViewUri +\n\t        \" and version \" + report.version, \"linter-ui\", \"onValidationReport\");\n\t    var expectedReports = findAndRemoveExpectedReports(report.pointOfViewUri, report.version);\n\t    clientConnection.debugDetail(\"Found expected reports: \" + expectedReports.length, \"linter-ui\", \"onValidationReport\");\n\t    for (var _i = 0, expectedReports_1 = expectedReports; _i < expectedReports_1.length; _i++) {\n\t        var expectedReport = expectedReports_1[_i];\n\t        expectedReport.resolve(report.issues);\n\t    }\n\t    latestRecievedReport = report;\n\t});\n\tfunction runValidationSheduleUpdater(textEditor, resolve, reject) {\n\t    var uri = textEditor.getPath();\n\t    //in any way, lets report current state, it should not hurt.\n\t    clientConnection.documentChanged({\n\t        uri: uri,\n\t        text: textEditor.getBuffer().getText()\n\t    });\n\t    clientConnection.getLatestVersion(uri).then(function (version) {\n\t        clientConnection.debugDetail(\"Scheduling validation for uri \" + uri + \" and version \" +\n\t            version, \"linter-ui\", \"runValidationSheduleUpdater\");\n\t        if (latestRecievedReport && latestRecievedReport.version &&\n\t            latestRecievedReport.version >= version) {\n\t            //we already know validation report for this version\n\t            clientConnection.debugDetail(\"Previous report found v \" +\n\t                latestRecievedReport.version + \" resolving, issues \" +\n\t                (latestRecievedReport.issues ? latestRecievedReport.issues.length : 0), \"linter-ui\", \"runValidationSheduleUpdater\");\n\t            resolve(latestRecievedReport.issues);\n\t        }\n\t        else {\n\t            //lets wait until the server provides a report for this or later version\n\t            expectedValidationReports.push({\n\t                uri: uri,\n\t                expectedVersion: version,\n\t                resolve: resolve,\n\t                reject: reject\n\t            });\n\t            clientConnection.debugDetail(\"Pushing the expected report to the list for version \" +\n\t                version, \"linter-ui\", \"runValidationSheduleUpdater\");\n\t        }\n\t    });\n\t}\n\tfunction lint(textEditor) {\n\t    if (!isRAMLUnit(textEditor)) {\n\t        return Promise.resolve([]);\n\t    }\n\t    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n\t    var promise = new Promise(function (resolve, reject) {\n\t        runValidationSheduleUpdater(textEditor, resolve, reject);\n\t    }).then(function (errors) {\n\t        clientConnection.debugDetail(\"Update report handled in with issues \" +\n\t            (errors ? errors.length : 0), \"linter-ui\", \"lint\");\n\t        var buffers = {};\n\t        var promises = errors.map(function (error) { return postPocessError(textEditor, error, buffers); });\n\t        var tabs = tabWarnings(textEditor);\n\t        promises = promises.concat(tabs);\n\t        return Promise.all(promises).then(function (errors) {\n\t            var result = combErrors(errors);\n\t            var warnings = 0;\n\t            return result.filter(function (error) { return error ? true : false; }).filter(function (error) {\n\t                return error.type === 'Warning' && warnings++ >= 20 ? false : true;\n\t            });\n\t        });\n\t    });\n\t    clientConnection.debugDetail(\"Before returning from lint\", \"linter-ui\", \"lint\");\n\t    return promise;\n\t}\n\texports.lint = lint;\n\tfunction addListenersToEditor(editor) {\n\t    var currentBuffer = editor.getBuffer();\n\t    currentBuffer.onDidChange(function (x) {\n\t        try {\n\t            ramlServer.getNodeClientConnection().debug(\"Change detected\", \"linter-ui\", \"addListenersToEditor\");\n\t            ramlServer.getNodeClientConnection().documentChanged({\n\t                uri: currentBuffer.getPath(),\n\t                text: currentBuffer.getText()\n\t            });\n\t        }\n\t        catch (e) {\n\t            console.log(e);\n\t        }\n\t    });\n\t}\n\tfunction addListenersToWorkspace() {\n\t    atom.workspace.onDidChangeActivePaneItem(function (e) {\n\t        var editor = atom.workspace.getActiveTextEditor();\n\t        if (editor) {\n\t            addListenersToEditor(editor);\n\t        }\n\t    });\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/**\n\t * Returns whether the current text matches RAML unit.\n\t * @param contents\n\t * @returns {RegExpMatchArray}\n\t */\n\tfunction isRAMLUnit(contents) {\n\t    return contents.match(/^\\s*#%RAML\\s+(\\d\\.\\d)\\s*(\\w*)\\s*$/m);\n\t}\n\texports.isRAMLUnit = isRAMLUnit;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvdW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCxvQkFBMkIsUUFBZ0I7SUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRkQsZ0NBRUMiLCJmaWxlIjoic3JjL2F0b20vdXRpbC91bml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgdGV4dCBtYXRjaGVzIFJBTUwgdW5pdC5cbiAqIEBwYXJhbSBjb250ZW50c1xuICogQHJldHVybnMge1JlZ0V4cE1hdGNoQXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JBTUxVbml0KGNvbnRlbnRzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudHMubWF0Y2goL15cXHMqIyVSQU1MXFxzKyhcXGRcXC5cXGQpXFxzKihcXHcqKVxccyokL20pO1xufSJdfQ==\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"basarat-text-buffer\");\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * Created by kor on 24/07/15.\n\t */\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// import fs = require ('fs')\n\t// import path = require ('path')\n\tvar editorTools = __webpack_require__(1);\n\t// import rp=require(\"raml-1-parser\")\n\t// import project=rp.project;\n\t// export function ast(editor:AtomCore.IEditor):rp.IHighLevelNode{\n\t//     var man=editorTools.aquireManager();\n\t//     if (editorTools.aquireManager()){\n\t//         if (man.getCurrentEditor()==editor){\n\t//             return man.ast;\n\t//         }\n\t//     }\n\t//     var p=editor.getPath();\n\t//     var prj=project.createProject(path.dirname(p));\n\t//     var unit=prj.unit(path.basename(p));\n\t//     var text=editor.getBuffer().getText();\n\t//     if (!unit){\n\t//         return null;\n\t//     }\n\t//     unit.updateContent(text);\n\t//     var ast=<rp.IHighLevelNode>unit.highLevel();\n\t//     return ast;\n\t// }\n\tfunction toggleEditorTools() {\n\t    var man = editorTools.aquireManager();\n\t    if (man) {\n\t        man.getCurrentEditor();\n\t    }\n\t}\n\texports.toggleEditorTools = toggleEditorTools;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvZWRpdG9yTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFDSCxtREFBbUQ7O0FBRW5ELDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsMERBQTBEO0FBQzFELHFDQUFxQztBQUNyQyw2QkFBNkI7QUFFN0Isa0VBQWtFO0FBQ2xFLDJDQUEyQztBQUMzQyx3Q0FBd0M7QUFDeEMsK0NBQStDO0FBQy9DLDhCQUE4QjtBQUM5QixZQUFZO0FBQ1osUUFBUTtBQUNSLDhCQUE4QjtBQUM5QixzREFBc0Q7QUFDdEQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUM3QyxrQkFBa0I7QUFDbEIsdUJBQXVCO0FBQ3ZCLFFBQVE7QUFDUixnQ0FBZ0M7QUFDaEMsbURBQW1EO0FBQ25ELGtCQUFrQjtBQUNsQixJQUFJO0FBRUo7SUFDSSxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFdEMsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztRQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNCLENBQUM7QUFDTCxDQUFDO0FBTkQsOENBTUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9lZGl0b3JNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGtvciBvbiAyNC8wNy8xNS5cbiAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuLy8gaW1wb3J0IGZzID0gcmVxdWlyZSAoJ2ZzJylcbi8vIGltcG9ydCBwYXRoID0gcmVxdWlyZSAoJ3BhdGgnKVxuaW1wb3J0IGVkaXRvclRvb2xzPXJlcXVpcmUoXCIuLi9lZGl0b3ItdG9vbHMvZWRpdG9yLXRvb2xzXCIpXG4vLyBpbXBvcnQgcnA9cmVxdWlyZShcInJhbWwtMS1wYXJzZXJcIilcbi8vIGltcG9ydCBwcm9qZWN0PXJwLnByb2plY3Q7XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBhc3QoZWRpdG9yOkF0b21Db3JlLklFZGl0b3IpOnJwLklIaWdoTGV2ZWxOb2Rle1xuLy8gICAgIHZhciBtYW49ZWRpdG9yVG9vbHMuYXF1aXJlTWFuYWdlcigpO1xuLy8gICAgIGlmIChlZGl0b3JUb29scy5hcXVpcmVNYW5hZ2VyKCkpe1xuLy8gICAgICAgICBpZiAobWFuLmdldEN1cnJlbnRFZGl0b3IoKT09ZWRpdG9yKXtcbi8vICAgICAgICAgICAgIHJldHVybiBtYW4uYXN0O1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHZhciBwPWVkaXRvci5nZXRQYXRoKCk7XG4vLyAgICAgdmFyIHByaj1wcm9qZWN0LmNyZWF0ZVByb2plY3QocGF0aC5kaXJuYW1lKHApKTtcbi8vICAgICB2YXIgdW5pdD1wcmoudW5pdChwYXRoLmJhc2VuYW1lKHApKTtcbi8vICAgICB2YXIgdGV4dD1lZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0VGV4dCgpO1xuLy8gICAgIGlmICghdW5pdCl7XG4vLyAgICAgICAgIHJldHVybiBudWxsO1xuLy8gICAgIH1cbi8vICAgICB1bml0LnVwZGF0ZUNvbnRlbnQodGV4dCk7XG4vLyAgICAgdmFyIGFzdD08cnAuSUhpZ2hMZXZlbE5vZGU+dW5pdC5oaWdoTGV2ZWwoKTtcbi8vICAgICByZXR1cm4gYXN0O1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRWRpdG9yVG9vbHMoKTogdm9pZCB7XG4gICAgdmFyIG1hbiA9IGVkaXRvclRvb2xzLmFxdWlyZU1hbmFnZXIoKTtcbiAgICBcbiAgICBpZihtYW4pe1xuICAgICAgICBtYW4uZ2V0Q3VycmVudEVkaXRvcigpO1xuICAgIH1cbn1cbiJdfQ==\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"raml-language-server\");\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar PromiseConstructor = __webpack_require__(19);\n\tif (typeof Promise === \"undefined\" && typeof window !== \"undefined\") {\n\t    window.Promise = PromiseConstructor;\n\t}\n\tvar Reconciler = /** @class */ (function () {\n\t    function Reconciler(logger, timeout) {\n\t        this.logger = logger;\n\t        this.timeout = timeout;\n\t        this.waitingList = [];\n\t        this.runningList = [];\n\t    }\n\t    Reconciler.prototype.schedule = function (runnable) {\n\t        var _this = this;\n\t        this.addToWaitingList(runnable);\n\t        return new Promise(function (resolve, reject) {\n\t            setTimeout(function () {\n\t                _this.logger.debugDetail(\"Time came to execute \" + runnable.toString(), \"Reconciler\", \"schedule\");\n\t                if (runnable.isCanceled()) {\n\t                    _this.logger.debugDetail(\"Runnable \" + runnable.toString() + \" is cancelled, doing nothing\", \"Reconciler\", \"schedule\");\n\t                    _this.removeFromWaitingList(runnable);\n\t                    return;\n\t                }\n\t                var currentlyRunning = _this.findConflictingInRunningList(runnable);\n\t                if (currentlyRunning) {\n\t                    // TODO add an additional short timeout parameter to launch the reschedule\n\t                    // at the finish of the currently running task for a short time after it.\n\t                    _this.logger.debugDetail(\"Conflicting to \" + runnable.toString()\n\t                        + \" is found in the running list: \" + currentlyRunning.toString()\n\t                        + \" rescheduling current one.\", \"Reconciler\", \"schedule\");\n\t                    _this.schedule(runnable);\n\t                    return;\n\t                }\n\t                _this.removeFromWaitingList(runnable);\n\t                _this.addToRunningList(runnable);\n\t                _this.logger.debugDetail(\"Executing \" + runnable.toString(), \"Reconciler\", \"schedule\");\n\t                _this.run(runnable).then(function (result) { resolve(result); }, function (error) { reject(error); });\n\t            }, _this.timeout);\n\t        });\n\t    };\n\t    Reconciler.prototype.run = function (runnable) {\n\t        var _this = this;\n\t        return runnable.run().then(function (result) {\n\t            _this.removeFromRunningList(runnable);\n\t            return result;\n\t        }, function (error) {\n\t            _this.removeFromRunningList(runnable);\n\t            throw error;\n\t        });\n\t    };\n\t    /**\n\t     * Adds item to waiting list and removes anything currently in the list,\n\t     * which conflicts with the new item.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.addToWaitingList = function (runnable) {\n\t        var _this = this;\n\t        this.logger.debugDetail(\"Adding runnable \" + runnable.toString() + \" to waiting list\", \"Reconciler\", \"addToWaitingList\");\n\t        this.waitingList = this.waitingList.filter(function (current) {\n\t            _this.logger.debugDetail(\"Comparing existing runnable \" + current.toString() +\n\t                \" to the new \" + runnable.toString(), \"Reconciler\", \"addToWaitingList\");\n\t            var conflicts = runnable.conflicts(current);\n\t            if (conflicts) {\n\t                _this.logger.debugDetail(\"Runnables are conflicting, canceling existing one\", \"Reconciler\", \"addToWaitingList\");\n\t                current.cancel();\n\t            }\n\t            return !conflicts;\n\t        });\n\t        this.waitingList.push(runnable);\n\t    };\n\t    /**\n\t     * Removes runnable from the list of running ones.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.removeFromWaitingList = function (runnable) {\n\t        this.logger.debugDetail(\"Removing \" + runnable.toString()\n\t            + \" from waiting list\", \"Reconciler\", \"removeFromWaitingList\");\n\t        var index = this.waitingList.indexOf(runnable);\n\t        if (index !== -1) {\n\t            this.waitingList.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t     * Adds runnable to the list of running ones.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.addToRunningList = function (runnable) {\n\t        this.logger.debugDetail(\"Adding \" + runnable.toString()\n\t            + \" to running list\", \"Reconciler\", \"removeFromWaitingList\");\n\t        this.runningList.push(runnable);\n\t    };\n\t    /**\n\t     * Removes runnable from the list of running ones.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.removeFromRunningList = function (runnable) {\n\t        this.logger.debugDetail(\"Removing \" + runnable.toString()\n\t            + \" from running list\", \"Reconciler\", \"removeFromWaitingList\");\n\t        var index = this.runningList.indexOf(runnable);\n\t        if (index !== -1) {\n\t            this.runningList.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t     * Finds the first conflicting runnable in the current list.\n\t     * @param runnable\n\t     * @returns {any}\n\t     */\n\t    Reconciler.prototype.findConflictingInRunningList = function (runnable) {\n\t        for (var _i = 0, _a = this.runningList; _i < _a.length; _i++) {\n\t            var current = _a[_i];\n\t            if (runnable.conflicts(current)) {\n\t                return current;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    return Reconciler;\n\t}());\n\texports.Reconciler = Reconciler;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"promise-polyfill\");\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar UI = __webpack_require__(5);\n\tvar SC = __webpack_require__(6);\n\tvar CompositeDisposable = UI.CompositeDisposable;\n\t// import details2=require(\"./details2\")\n\t// import contextActions = require(\"raml-actions\")\n\t// import commonContextActions = require(\"../context-menu/commonContextActions\")\n\tvar editorTools = __webpack_require__(1);\n\t// import universeHelpers = rp.universeHelpers;\n\t// import ramlOutline = require(\"raml-outline\")\n\t// import outlineCommon = require(\"./outline-common\")\n\tvar ramlServer = __webpack_require__(17);\n\tfunction getActiveEditor() {\n\t    var activeEditor = atom.workspace.getActiveTextEditor();\n\t    if (activeEditor) {\n\t        return activeEditor;\n\t    }\n\t    if (editorTools.aquireManager())\n\t        return editorTools.aquireManager().getCurrentEditor();\n\t    return null;\n\t}\n\texports.getActiveEditor = getActiveEditor;\n\tvar RamlOutline = /** @class */ (function (_super) {\n\t    __extends(RamlOutline, _super);\n\t    function RamlOutline() {\n\t        var _this = _super.call(this) || this;\n\t        _this.disposables = new CompositeDisposable();\n\t        _this.fire = true;\n\t        _this.createTree(null);\n\t        _this.addClass('raml-outline');\n\t        _this.addChild(_this._rs);\n\t        return _this;\n\t    }\n\t    RamlOutline.prototype.createTree = function (structure /*p: hl.IParseResult*/) {\n\t        var _this = this;\n\t        this._rs = createTree(structure, function (sender) {\n\t            if (sender.selection && sender.selection.elements && _this.fire == true) {\n\t                if (sender.selection.elements.length > 0 && sender.selection.elements[0]) {\n\t                    var activeEditor = getActiveEditor();\n\t                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].start);\n\t                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].end);\n\t                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n\t                }\n\t            }\n\t        });\n\t        this._viewers = [];\n\t        if (structure)\n\t            this._viewers = [0, 1, 2, 3].map(function (i) { return _this._rs.get(i).content; });\n\t    };\n\t    RamlOutline.prototype.getTitle = function () { return \"Outline\"; };\n\t    RamlOutline.prototype.getNodePType = function (node) {\n\t        node.category;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory])\n\t            return 0;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory])\n\t            return 1;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory])\n\t            return 2;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory])\n\t            return 3;\n\t        return 3;\n\t    };\n\t    RamlOutline.prototype.setSelection = function (node) {\n\t        //if (this._selectedNode == node) return;\n\t        this._selectedNode = node;\n\t        this.fire = false;\n\t        try {\n\t            var index = this.getNodePType(node);\n\t            var viewer = this._viewers[index];\n\t            if (viewer != null) {\n\t                viewer.setSelection(node);\n\t                this._rs.setSelectedIndex(index);\n\t            }\n\t        }\n\t        finally {\n\t            this.fire = true;\n\t        }\n\t    };\n\t    RamlOutline.prototype.setUnit = function (unitPath /*unit:hl.IHighLevelNode*/, force) {\n\t        var _this = this;\n\t        if (force === void 0) { force = false; }\n\t        if (this.unitPath && unitPath && unitPath != this.unitPath) {\n\t            this._children = [];\n\t        }\n\t        this.unitPath = unitPath;\n\t        var activeEditor = getActiveEditor();\n\t        ramlServer.getNodeClientConnection().documentChanged({\n\t            uri: unitPath,\n\t            text: activeEditor.getText()\n\t        });\n\t        var structurePromise = ramlServer.getNodeClientConnection().getStructure(unitPath);\n\t        if (structurePromise) {\n\t            structurePromise.then(function (structure) {\n\t                _this.createTree(structure);\n\t                _this.addClass('raml-outline');\n\t                _this._children = [];\n\t                _this.addChild(_this._rs);\n\t                _this.html(_this.innerRenderUI());\n\t            }).catch(function (error) {\n\t                //ignoring, the error is already reported to the log, and we dont need to display\n\t                //it to user in other way\n\t            });\n\t        }\n\t    };\n\t    RamlOutline.prototype.attach = function () {\n\t        if (!this._isAttached) {\n\t            var $this = $(this);\n\t            $this.html(this._rs.renderUI().outerHTML);\n\t            this._isAttached = true;\n\t        }\n\t    };\n\t    RamlOutline.prototype.forEachViewer = function (command) {\n\t        this._viewers.forEach(command);\n\t    };\n\t    RamlOutline.prototype.refresh = function () {\n\t        // var unit = this.unit;\n\t        // this.setUnit(null);\n\t        // this.setUnit(unit);\n\t        var unitPath = this.unitPath;\n\t        this.setUnit(null);\n\t        this.setUnit(unitPath);\n\t    };\n\t    RamlOutline.prototype.destroy = function () {\n\t        editorTools.aquireManager()._view = null;\n\t        // this._selectedNode=null;\n\t        // this.unit=null;\n\t        this.unitPath = null;\n\t        this._viewers = [];\n\t        this._rs = null;\n\t        this._children = [];\n\t        this.disposables.dispose();\n\t    };\n\t    return RamlOutline;\n\t}(SC.Scrollable));\n\texports.RamlOutline = RamlOutline;\n\t/*\n\t *\n\t */\n\t// export function treeSection(input: hl.IParseResult,\n\t//                             name: string,\n\t//                             icon: UI.Icon,\n\t//                             filterFunc: (x:hl.IHighLevelNode)=>boolean,\n\t//                             l: UI.ISelectionListener<any>,\n\t//                             opener: (x:hl.IParseResult)=>void=null) : UI.TreePanel<any,any> {\n\t//\n\t//     var v = UI.treeViewerSection(name,icon,input,x=>getChildren(x).filter(x=>filterFunc(<hl.IHighLevelNode> x)),new HLRenderer(opener));\n\t//\n\t//     v.viewer.setBasicLabelFunction(x=>x ? x.name() : '');\n\t//     v.viewer.setKeyProvider({\n\t//         key:(p:hl.IParseResult):string=>{\n\t//             return \"\"+p.lowLevel().start();\n\t//         }\n\t//\n\t//     });\n\t//     v.viewer.addSelectionListener(l)\n\t//     return v;\n\t// }\n\tvar HLNodeType;\n\t(function (HLNodeType) {\n\t    HLNodeType[HLNodeType[\"Resource\"] = 0] = \"Resource\";\n\t    HLNodeType[HLNodeType[\"Schema\"] = 1] = \"Schema\";\n\t    HLNodeType[HLNodeType[\"Type\"] = 2] = \"Type\";\n\t    HLNodeType[HLNodeType[\"Trait\"] = 3] = \"Trait\";\n\t    HLNodeType[HLNodeType[\"Unknown\"] = 4] = \"Unknown\";\n\t})(HLNodeType || (HLNodeType = {}));\n\t// function getNodeType(node: hl.IHighLevelNode): HLNodeType {\n\t//     if (outlineCommon.isResource(node)) return HLNodeType.Resource;\n\t//     else if (outlineCommon.isOther(node)) return HLNodeType.Trait;\n\t//     else if (outlineCommon.isResourceTypeOrTrait(node)) return HLNodeType.Type;\n\t//     else if (outlineCommon.isSchemaOrType(node)) return HLNodeType.Schema;\n\t//     else return HLNodeType.Unknown;\n\t// }\n\t// function isApi(p: hl.IHighLevelNode) {\n\t//     var pc=p.definition().key();\n\t//     return pc===universes.Universe08.Api||pc===universes.Universe10.Api;\n\t// }\n\t// function isDocumentation(p: hl.IHighLevelNode) {\n\t//     var pc=p.definition().key();\n\t//     return ( pc=== universes.Universe08.DocumentationItem||pc===universes.Universe10.DocumentationItem);\n\t// }\n\tfunction fullStructurePath(model) {\n\t    if (!model)\n\t        return \"\";\n\t    return model.text;\n\t    // var node = model.getSource();\n\t    // return fullPath(<any>node);\n\t}\n\t//\n\t// function fullPath(node: hl.IParseResult) {\n\t//     if (node == null) return \"\";\n\t//     else return fullPath(node.parent()) + \"/\" + node.name();\n\t// }\n\tfunction simpleTree(input, selectionListener, categoryName, opener) {\n\t    if (opener === void 0) { opener = null; }\n\t    var viewer = UI.treeViewer(function (x) {\n\t        return x.children;\n\t    }, new HLRenderer(opener), fullStructurePath);\n\t    viewer.setBasicLabelFunction(function (x) { return x.text; });\n\t    viewer.setKeyProvider({ key: function (x) { return x.key; } });\n\t    viewer.addSelectionListener(selectionListener);\n\t    viewer.getBinding().set(input);\n\t    return viewer;\n\t}\n\tfunction createTree(structure, selectionListener, opener) {\n\t    if (opener === void 0) { opener = null; }\n\t    if (!structure) {\n\t        return new UI.TabFolder();\n\t    }\n\t    var resourcesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory]];\n\t    var typesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory]];\n\t    var traitsModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory]];\n\t    var otherModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory]];\n\t    // var resourcesModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourcesCategory):null;\n\t    // var typesModel = p!=null?ramlOutline.getStructure(outlineCommon.SchemasAndTypesCategory):null;\n\t    // var traitsModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourceTypesAndTraitsCategory):null;\n\t    // var otherModel = p!=null?ramlOutline.getStructure(outlineCommon.OtherCategory):null;\n\t    var outline = resourcesModel != null ? simpleTree(resourcesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory], opener) : null;\n\t    var schemas = typesModel != null ? simpleTree(typesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory], opener) : null;\n\t    var types = traitsModel != null ? simpleTree(traitsModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory], opener) : null;\n\t    var other = otherModel != null ? simpleTree(otherModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory], opener) : null;\n\t    var folder = new UI.TabFolder();\n\t    folder.add(\"Resources\", UI.Icon.SEARCH, outline, 'raml-icon-custom');\n\t    folder.add(\"Schemas&Types\", UI.Icon.SEARCH, schemas, 'raml-icon-custom');\n\t    folder.add(\"ResourceTypes&Traits\", UI.Icon.SEARCH, types, 'raml-icon-custom');\n\t    folder.add(\"Other\", UI.Icon.SEARCH, other, 'raml-icon-custom');\n\t    folder.setSelectedIndex(0);\n\t    folder.setOnSelected(function () {\n\t        var selectedTab = folder.selectedComponent();\n\t        if (selectedTab) {\n\t            var selection = selectedTab.getSelection();\n\t            if (selection && selection.elements && selection.elements.length > 0) {\n\t                selectionListener(new UI.SelectionChangedEvent(selectedTab, null, selection));\n\t            }\n\t            selectedTab.customizePanel(true);\n\t        }\n\t    });\n\t    return folder;\n\t}\n\texports.createTree = createTree;\n\tvar HLRenderer = /** @class */ (function () {\n\t    function HLRenderer(opener) {\n\t        this.opener = opener;\n\t    }\n\t    HLRenderer.prototype.iconNameToIconEnum = function (iconName) {\n\t        if (!iconName)\n\t            return null;\n\t        return UI.Icon[iconName];\n\t    };\n\t    HLRenderer.prototype.textHighlightNameToTextClass = function (highlightName) {\n\t        if (!highlightName)\n\t            return null;\n\t        return UI.TextClasses[highlightName];\n\t    };\n\t    HLRenderer.prototype.render = function (model) {\n\t        try {\n\t            // if (ramlOutline.isTypedStructureNode(model)\n\t            //     && (<ramlOutline.TypedStructureNode>model).type\n\t            //     && (<ramlOutline.TypedStructureNode>model).type == ramlOutline.NodeType.ATTRIBUTE) {\n\t            //\n\t            //     var attr = <hl.IAttribute>(<any>model.getSource());\n\t            //\n\t            //     //TODO check if we really need custom selection here, otherwise the whole \"is attribute\" condition is redundant\n\t            //     return UI.hc(UI.label(model.text), UI.a(\"\", x=> {\n\t            //         var p1 = editorTools.aquireManager().getCurrentEditor().\n\t            //             getBuffer().positionForCharacterIndex(attr.lowLevel().start());\n\t            //         var p2 = editorTools.aquireManager().getCurrentEditor().\n\t            //             getBuffer().positionForCharacterIndex(attr.lowLevel().end());\n\t            //         editorTools.aquireManager().getCurrentEditor().setSelectedBufferRange({ start: p1, end: p1 }, {});\n\t            //\n\t            //     }, UI.Icon.ARROW_SMALL_LEFT, null, null));\n\t            //\n\t            // }\n\t            var icon = UI.Icon.DASH;\n\t            var highLight = UI.TextClasses.NORMAL;\n\t            if (this.iconNameToIconEnum(model.icon)) {\n\t                icon = this.iconNameToIconEnum(model.icon);\n\t            }\n\t            if (this.textHighlightNameToTextClass(model.textStyle)) {\n\t                highLight = this.textHighlightNameToTextClass(model.textStyle);\n\t            }\n\t            var extraText = \"\";\n\t            var extraClass = UI.TextClasses.NORMAL;\n\t            var hc = UI.hc(UI.label(model.text, icon, highLight));\n\t            if (model.typeText) {\n\t                hc.addChild(UI.label(model.typeText, UI.Icon.NONE, UI.TextClasses.WARNING).margin(2, 0, 0, 0));\n\t            }\n\t            // if (model.getSource().lowLevel().unit()!=model.getSource().root().lowLevel().unit()){\n\t            //     highLight=UI.TextClasses.SUBTLE;\n\t            //     hc.addChild(UI.label(\"(\"+model.getSource().lowLevel().unit().path()+\")\",UI.Icon.NONE,highLight).margin(5,0,0,0));\n\t            // }\n\t            hc.addClass(\"outline\");\n\t            return hc;\n\t        }\n\t        catch (e) {\n\t            console.log(e);\n\t            return UI.hc(UI.label(\"Illegal node\", UI.Icon.ARROW_SMALL_LEFT, null, null));\n\t        }\n\t    };\n\t    return HLRenderer;\n\t}());\n\texports.HLRenderer = HLRenderer;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar ramlServer = __webpack_require__(17);\n\tfunction markOccurences(editor, occurences) {\n\t    var layer = getOccurencesLayer(editor);\n\t    layer.clear();\n\t    occurences.forEach(function (occurence) {\n\t        layer.markBufferRange(occurence);\n\t    });\n\t    editor.decorateMarkerLayer(layer, {\n\t        type: 'highlight',\n\t        class: 'raml-occurence'\n\t    });\n\t}\n\texports.markOccurences = markOccurences;\n\tfunction clearOccurences(editor) {\n\t    var layer = getOccurencesLayer(editor);\n\t    layer.clear();\n\t}\n\texports.clearOccurences = clearOccurences;\n\tfunction getOccurencesLayer(editor) {\n\t    var layerId = editor.occurencesLayerId;\n\t    var layer = layerId && editor.getMarkerLayer(layerId);\n\t    if (!layer) {\n\t        layer = editor.addMarkerLayer();\n\t    }\n\t    editor.occurencesLayerId = layer.id;\n\t    return layer;\n\t}\n\tvar MarkOccurrenceRunnable = /** @class */ (function () {\n\t    function MarkOccurrenceRunnable(editor, position) {\n\t        this.editor = editor;\n\t        this.position = position;\n\t        this.cancelled = false;\n\t        this.offset = editor.getBuffer().characterIndexForPosition(position);\n\t    }\n\t    /**\n\t     * Performs the actual business logics.\n\t     * Should resolve the promise when finished.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.run = function () {\n\t        var _this = this;\n\t        return ramlServer.getNodeClientConnection().markOccurrences(this.getMarkOccurrencesPath(), this.offset)\n\t            .then(function (ranges) {\n\t            var currentPosition = _this.editor.getCursorBufferPosition();\n\t            if (currentPosition.row != _this.position.row || currentPosition.column != _this.position.column) {\n\t                //data is outdated\n\t                return;\n\t            }\n\t            var bufferRanges = ranges.map(function (range) {\n\t                return {\n\t                    start: _this.editor.getBuffer().positionForCharacterIndex(range.start),\n\t                    end: _this.editor.getBuffer().positionForCharacterIndex(range.end),\n\t                };\n\t            });\n\t            markOccurences(_this.editor, bufferRanges);\n\t        });\n\t    };\n\t    /**\n\t     * Performs the actual business logics synchronously.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.runSynchronously = function () {\n\t    };\n\t    /**\n\t     * Whether two runnable conflict with each other.\n\t     * Must work fast as its called often.\n\t     * @param other\n\t     */\n\t    MarkOccurrenceRunnable.prototype.conflicts = function (other) {\n\t        if (!other.getMarkOccurrencesPath)\n\t            return false;\n\t        var otherPath = other.getMarkOccurrencesPath();\n\t        return this.getMarkOccurrencesPath() == otherPath;\n\t    };\n\t    /**\n\t     * Cancels the runnable. run() method should do nothing if launched later,\n\t     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.cancel = function () {\n\t        this.cancelled = true;\n\t    };\n\t    /**\n\t     * Whether cancel() method was called at least once.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.isCanceled = function () {\n\t        return this.cancelled;\n\t    };\n\t    MarkOccurrenceRunnable.prototype.getMarkOccurrencesPath = function () {\n\t        return this.editor.getPath();\n\t    };\n\t    return MarkOccurrenceRunnable;\n\t}());\n\texports.MarkOccurrenceRunnable = MarkOccurrenceRunnable;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1EQUFtRDs7QUFHbkQsaURBQW9EO0FBRXBELHdCQUErQixNQUF3QixFQUFFLFVBQXdCO0lBQzdFLElBQUksS0FBSyxHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVkLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO1FBQ3hCLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFFRyxNQUFPLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFO1FBQ3JDLElBQUksRUFBRSxXQUFXO1FBQ2pCLEtBQUssRUFBRSxnQkFBZ0I7S0FDMUIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWJELHdDQWFDO0FBRUQseUJBQWdDLE1BQXdCO0lBQ3BELElBQUksS0FBSyxHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQixDQUFDO0FBSkQsMENBSUM7QUFFRCw0QkFBNEIsTUFBd0I7SUFDaEQsSUFBSSxPQUFPLEdBQVMsTUFBTyxDQUFDLGlCQUFpQixDQUFDO0lBRTlDLElBQUksS0FBSyxHQUFHLE9BQU8sSUFBVSxNQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTdELEVBQUUsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNSLEtBQUssR0FBUyxNQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVLLE1BQU8sQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBRTNDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVEO0lBS0ksZ0NBQW9CLE1BQXdCLEVBQVUsUUFBb0I7UUFBdEQsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBSGxFLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFJdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUNEOzs7T0FHRztJQUNILG9DQUFHLEdBQUg7UUFBQSxpQkFrQkM7UUFqQkcsTUFBTSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ2xHLElBQUksQ0FBQyxVQUFBLE1BQU07WUFFUixJQUFJLGVBQWUsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDNUQsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDN0Ysa0JBQWtCO2dCQUNsQixNQUFNLENBQUM7WUFDWCxDQUFDO1lBRUQsSUFBSSxZQUFZLEdBQWlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO2dCQUM3QyxNQUFNLENBQUM7b0JBQ0gsS0FBSyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztvQkFDckUsR0FBRyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDcEUsQ0FBQTtZQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ0YsY0FBYyxDQUFDLEtBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxpREFBZ0IsR0FBaEI7SUFDQSxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILDBDQUFTLEdBQVQsVUFBVSxLQUErQjtRQUNyQyxFQUFFLENBQUMsQ0FBQyxDQUFPLEtBQU0sQ0FBQyxzQkFBc0IsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFdkQsSUFBSSxTQUFTLEdBQWtCLEtBQU0sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRS9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxTQUFTLENBQUM7SUFDdEQsQ0FBQztJQUNEOzs7T0FHRztJQUNILHVDQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBQ0Q7O09BRUc7SUFDSCwyQ0FBVSxHQUFWO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELHVEQUFzQixHQUF0QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDTCw2QkFBQztBQUFELENBakVBLEFBaUVDLElBQUE7QUFqRVksd0RBQXNCIiwiZmlsZSI6InNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG5pbXBvcnQgYXRvbSA9IHJlcXVpcmUoJy4uL2NvcmUvYXRvbVdyYXBwZXInKTtcbmltcG9ydCByYW1sU2VydmVyID0gcmVxdWlyZShcInJhbWwtbGFuZ3VhZ2Utc2VydmVyXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFya09jY3VyZW5jZXMoZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yLCBvY2N1cmVuY2VzOiBhdG9tLlJhbmdlW10pIHtcbiAgICB2YXIgbGF5ZXI6IGFueSA9IGdldE9jY3VyZW5jZXNMYXllcihlZGl0b3IpO1xuXG4gICAgbGF5ZXIuY2xlYXIoKTtcblxuICAgIG9jY3VyZW5jZXMuZm9yRWFjaChvY2N1cmVuY2UgPT4ge1xuICAgICAgICBsYXllci5tYXJrQnVmZmVyUmFuZ2Uob2NjdXJlbmNlKTtcbiAgICB9KTtcblxuICAgICg8YW55PmVkaXRvcikuZGVjb3JhdGVNYXJrZXJMYXllcihsYXllciwge1xuICAgICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgICAgY2xhc3M6ICdyYW1sLW9jY3VyZW5jZSdcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyT2NjdXJlbmNlcyhlZGl0b3I6IGF0b20uSVRleHRFZGl0b3IpIHtcbiAgICB2YXIgbGF5ZXI6IGFueSA9IGdldE9jY3VyZW5jZXNMYXllcihlZGl0b3IpO1xuXG4gICAgbGF5ZXIuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gZ2V0T2NjdXJlbmNlc0xheWVyKGVkaXRvcjogYXRvbS5JVGV4dEVkaXRvcik6IGFueSB7XG4gICAgdmFyIGxheWVySWQgPSAoPGFueT5lZGl0b3IpLm9jY3VyZW5jZXNMYXllcklkO1xuXG4gICAgdmFyIGxheWVyID0gbGF5ZXJJZCAmJiAoPGFueT5lZGl0b3IpLmdldE1hcmtlckxheWVyKGxheWVySWQpO1xuXG4gICAgaWYoIWxheWVyKSB7XG4gICAgICAgIGxheWVyID0gKDxhbnk+ZWRpdG9yKS5hZGRNYXJrZXJMYXllcigpO1xuICAgIH1cblxuICAgICg8YW55PmVkaXRvcikub2NjdXJlbmNlc0xheWVySWQgPSBsYXllci5pZDtcblxuICAgIHJldHVybiBsYXllcjtcbn1cblxuZXhwb3J0IGNsYXNzIE1hcmtPY2N1cnJlbmNlUnVubmFibGUgaW1wbGVtZW50cyByYW1sU2VydmVyLlJ1bm5hYmxlPHZvaWQ+IHtcblxuICAgIHByaXZhdGUgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yLCBwcml2YXRlIHBvc2l0aW9uOiBhdG9tLlBvaW50KSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gZWRpdG9yLmdldEJ1ZmZlcigpLmNoYXJhY3RlckluZGV4Rm9yUG9zaXRpb24ocG9zaXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyB0aGUgYWN0dWFsIGJ1c2luZXNzIGxvZ2ljcy5cbiAgICAgKiBTaG91bGQgcmVzb2x2ZSB0aGUgcHJvbWlzZSB3aGVuIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIHJ1bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHJhbWxTZXJ2ZXIuZ2V0Tm9kZUNsaWVudENvbm5lY3Rpb24oKS5tYXJrT2NjdXJyZW5jZXModGhpcy5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKCksIHRoaXMub2Zmc2V0KVxuICAgICAgICAgICAgLnRoZW4ocmFuZ2VzID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSB0aGlzLmVkaXRvci5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zaXRpb24ucm93ICE9IHRoaXMucG9zaXRpb24ucm93IHx8IGN1cnJlbnRQb3NpdGlvbi5jb2x1bW4gIT0gdGhpcy5wb3NpdGlvbi5jb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9kYXRhIGlzIG91dGRhdGVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgYnVmZmVyUmFuZ2VzOiBhdG9tLlJhbmdlW10gPSByYW5nZXMubWFwKHJhbmdlPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChyYW5nZS5zdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHRoaXMuZWRpdG9yLmdldEJ1ZmZlcigpLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgocmFuZ2UuZW5kKSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbWFya09jY3VyZW5jZXModGhpcy5lZGl0b3IsIGJ1ZmZlclJhbmdlcyk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHRoZSBhY3R1YWwgYnVzaW5lc3MgbG9naWNzIHN5bmNocm9ub3VzbHkuXG4gICAgICovXG4gICAgcnVuU3luY2hyb25vdXNseSgpOiB2b2lkIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0d28gcnVubmFibGUgY29uZmxpY3Qgd2l0aCBlYWNoIG90aGVyLlxuICAgICAqIE11c3Qgd29yayBmYXN0IGFzIGl0cyBjYWxsZWQgb2Z0ZW4uXG4gICAgICogQHBhcmFtIG90aGVyXG4gICAgICovXG4gICAgY29uZmxpY3RzKG90aGVyOiByYW1sU2VydmVyLlJ1bm5hYmxlPGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCEoPGFueT5vdGhlcikuZ2V0TWFya09jY3VycmVuY2VzUGF0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGxldCBvdGhlclBhdGggOiBzdHJpbmcgPSAoPGFueT5vdGhlcikuZ2V0TWFya09jY3VycmVuY2VzUGF0aCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldE1hcmtPY2N1cnJlbmNlc1BhdGgoKSA9PSBvdGhlclBhdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgdGhlIHJ1bm5hYmxlLiBydW4oKSBtZXRob2Qgc2hvdWxkIGRvIG5vdGhpbmcgaWYgbGF1bmNoZWQgbGF0ZXIsXG4gICAgICogaWYgY2FuY2VsIGlzIGNhbGxlZCBkdXJpbmcgdGhlIHJ1bigpIG1ldGhvZCBleGVjdXRpb24sIHJ1bigpIHNob3VsZCBzdG9wIGFzIHNvb24gYXMgaXQgY2FuLlxuICAgICAqL1xuICAgIGNhbmNlbCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGNhbmNlbCgpIG1ldGhvZCB3YXMgY2FsbGVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICovXG4gICAgaXNDYW5jZWxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsbGVkO1xuICAgIH1cblxuICAgIGdldE1hcmtPY2N1cnJlbmNlc1BhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRQYXRoKCk7XG4gICAgfVxufVxuXG4iXX0=\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar qcui = __webpack_require__(23);\n\tvar atom = __webpack_require__(3);\n\t// import contextActions = require(\"raml-actions\")\n\tvar cc = __webpack_require__(24);\n\tvar et = __webpack_require__(1);\n\t/*\n\t * Quick command is a command object that stores command info, body and filtering function\n\t */\n\tvar QuickCommand = /** @class */ (function () {\n\t    function QuickCommand(id, title, command, priority, when) {\n\t        this.id = id;\n\t        this.title = title;\n\t        this.command = command;\n\t        this.priority = priority;\n\t        this.when = when;\n\t    }\n\t    QuickCommand.prototype.registerAsAtomCommand = function (target) {\n\t        if (this.atomCommand && this.atomCommand.disposed == false)\n\t            this.atomCommand.dispose();\n\t        this.atomCommand = atom.commands.add(target, this.id, this.command);\n\t    };\n\t    QuickCommand.prototype.dispose = function () {\n\t        if (this.atomCommand && this.atomCommand.disposed == false)\n\t            this.atomCommand.dispose();\n\t        cm.unregister(this);\n\t    };\n\t    return QuickCommand;\n\t}());\n\texports.QuickCommand = QuickCommand;\n\t/*\n\t * Command manager manages quick commands.\n\t * All quick commands should be registered here.\n\t * For usage example, see registerCommands\n\t */\n\tvar CommandManager = /** @class */ (function () {\n\t    function CommandManager() {\n\t        this.commands = {};\n\t        this.panel = new qcui.SelectListView(function (command) { return command.command(); }, function (command) { return command.title; }, 'title');\n\t    }\n\t    CommandManager.prototype.register = function (cmd) {\n\t        if (this.commands[cmd.id] != null)\n\t            this.unregister(cmd.id);\n\t        this.commands[cmd.id] = cmd;\n\t        return cmd;\n\t    };\n\t    CommandManager.prototype.unregister = function (cmd) {\n\t        if (typeof (cmd) == \"string\")\n\t            this.unregister(this.commands[cmd]);\n\t        var qcmd = cmd;\n\t        if (qcmd == null)\n\t            return null;\n\t        delete this.commands[qcmd.id];\n\t        return qcmd;\n\t    };\n\t    CommandManager.prototype.add = function (id, title, command, when, priority, atomTarget) {\n\t        var cmd = new QuickCommand(id, title, command, priority ? priority : 0, when ? when : function () { return true; });\n\t        if (atomTarget)\n\t            cmd.registerAsAtomCommand(atomTarget);\n\t        this.register(cmd);\n\t        return cmd;\n\t    };\n\t    CommandManager.prototype.show = function (predicate) {\n\t        var joinedCommands = {};\n\t        for (var commandId in this.commands) {\n\t            joinedCommands[commandId] = this.commands[commandId];\n\t        }\n\t        this.getDynamicCommands().forEach(function (currentCommand) {\n\t            joinedCommands[currentCommand.id] = currentCommand;\n\t        });\n\t        var list = Object.keys(joinedCommands)\n\t            .map(function (key) { return joinedCommands[key]; })\n\t            .sort(function (a, b) { return b.priority - a.priority; })\n\t            .filter(function (cmd) { return cmd.when(); });\n\t        if (predicate)\n\t            list = list.filter(predicate);\n\t        this.panel.show(list);\n\t    };\n\t    CommandManager.prototype.getDynamicCommands = function () {\n\t        var result = [];\n\t        // var currentActions = contextActions.calculateCurrentActions(contextActions.TARGET_RAML_EDITOR_NODE)\n\t        //\n\t        // currentActions.forEach(action => {\n\t        // \tvar convertedQuickCommand : QuickCommand = new QuickCommand(action.name,\n\t        // \t\taction.label?action.label:action.name, action.onClick, 1, ()=>{return true})\n\t        //\n\t        // \tvar cmd : any = convertedQuickCommand\n\t        // \tcmd['__module__'] = 'editorTools'\n\t        // \tresult.push(convertedQuickCommand)\n\t        // })\n\t        return result;\n\t    };\n\t    return CommandManager;\n\t}());\n\texports.CommandManager = CommandManager;\n\tvar cm;\n\t/*\n\t * Always return working copy of manager.\n\t */\n\tfunction manager() {\n\t    if (!cm)\n\t        cm = new CommandManager();\n\t    return cm;\n\t}\n\texports.manager = manager;\n\t/*\n\t * function for RAML -> Show Quick Commands (^Q)\n\t */\n\tfunction showCommands() {\n\t    manager().show();\n\t}\n\texports.showCommands = showCommands;\n\t/*\n\t * registerCommands is called at the plugin initialization for registering global commands\n\t */\n\tfunction registerCommands() {\n\t    cc.registerQuickCommands(manager());\n\t    cm.add('api-workbench:editor-tools', 'Show Editor Tools', function () { return et.initEditorTools(); }, function () { return et.editorToolsStatus() == false; });\n\t}\n\texports.registerCommands = registerCommands;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar atom = __webpack_require__(3);\n\tvar aspv = __webpack_require__(7);\n\t/*\n\t * List viewer for commands. accepts confirmation function, label function and key for fuzzy filtering.\n\t */\n\tvar SelectListView = /** @class */ (function (_super) {\n\t    __extends(SelectListView, _super);\n\t    function SelectListView(_confirmed, label, filterKey) {\n\t        if (filterKey === void 0) { filterKey = ''; }\n\t        var _this = _super.call(this, []) || this;\n\t        _this._confirmed = _confirmed;\n\t        _this.label = label;\n\t        _this.filterKey = filterKey;\n\t        return _this;\n\t    }\n\t    SelectListView.prototype.getFilterKey = function () { return this.filterKey; };\n\t    SelectListView.prototype.viewForItem = function (item) {\n\t        return \"<li>\" + this.label(item) + \"</li>\";\n\t    };\n\t    SelectListView.prototype.cancel = function () {\n\t        this.panel.hide();\n\t        _super.prototype.cancel.call(this);\n\t    };\n\t    SelectListView.prototype.hide = function () {\n\t        if (!this.panel)\n\t            return;\n\t        this.panel.hide();\n\t    };\n\t    SelectListView.prototype.confirmed = function (item) {\n\t        this._confirmed(item);\n\t        this.hide();\n\t        return this.getSelectedItemView();\n\t    };\n\t    SelectListView.prototype.show = function (commands) {\n\t        this.storeFocusedElement();\n\t        if (!this.panel)\n\t            this.panel = atom.workspace.addModalPanel({ item: this });\n\t        this.setItems(commands);\n\t        this.panel.show();\n\t        this.focusFilterEditor();\n\t    };\n\t    return SelectListView;\n\t}(aspv.SelectListView));\n\texports.SelectListView = SelectListView;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtREFBbUQ7Ozs7Ozs7Ozs7OztBQUVuRCwwQ0FBNkM7QUFDN0MsMkNBQThDO0FBRzlDOztHQUVHO0FBQ0g7SUFBdUMsa0NBQW1CO0lBRXhELHdCQUFtQixVQUE2QixFQUFVLEtBQXFCLEVBQVUsU0FBc0I7UUFBdEIsMEJBQUEsRUFBQSxjQUFzQjtRQUEvRyxZQUNFLGtCQUFNLEVBQUUsQ0FBQyxTQUNWO1FBRmtCLGdCQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUFVLFdBQUssR0FBTCxLQUFLLENBQWdCO1FBQVUsZUFBUyxHQUFULFNBQVMsQ0FBYTs7SUFFL0csQ0FBQztJQUVELHFDQUFZLEdBQVosY0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXpDLG9DQUFXLEdBQVgsVUFBWSxJQUFJO1FBQ2QsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUM3QyxDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEIsaUJBQU0sTUFBTSxXQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELDZCQUFJLEdBQUo7UUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLElBQUk7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBSUQsNkJBQUksR0FBSixVQUFLLFFBQWE7UUFDaEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDc0MsSUFBSSxDQUFDLGNBQWMsR0FxQ3pEO0FBckNZLHdDQUFjIiwiZmlsZSI6InNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuaW1wb3J0IGF0b20gPSByZXF1aXJlKCcuLi9jb3JlL2F0b21XcmFwcGVyJyk7XG5pbXBvcnQgYXNwdiA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5cblxuLypcbiAqIExpc3Qgdmlld2VyIGZvciBjb21tYW5kcy4gYWNjZXB0cyBjb25maXJtYXRpb24gZnVuY3Rpb24sIGxhYmVsIGZ1bmN0aW9uIGFuZCBrZXkgZm9yIGZ1enp5IGZpbHRlcmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdExpc3RWaWV3PFQ+IGV4dGVuZHMgYXNwdi5TZWxlY3RMaXN0VmlldyB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIF9jb25maXJtZWQ6IChpdGVtOiBUKSA9PiB2b2lkLCBwcml2YXRlIGxhYmVsOiAoaXRlbTogVCk9PmFueSwgcHJpdmF0ZSBmaWx0ZXJLZXk6IHN0cmluZyA9ICcnKSB7XG4gICAgc3VwZXIoW10pO1xuICB9XG5cbiAgZ2V0RmlsdGVyS2V5KCkgeyByZXR1cm4gdGhpcy5maWx0ZXJLZXk7IH1cblxuICB2aWV3Rm9ySXRlbShpdGVtKSB7XG4gICAgcmV0dXJuIFwiPGxpPlwiICsgdGhpcy5sYWJlbChpdGVtKSArIFwiPC9saT5cIjtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnBhbmVsLmhpZGUoKTtcbiAgICBzdXBlci5jYW5jZWwoKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSByZXR1cm47XG4gICAgdGhpcy5wYW5lbC5oaWRlKCk7XG4gIH1cblxuICBjb25maXJtZWQoaXRlbSkge1xuICAgIHRoaXMuX2NvbmZpcm1lZChpdGVtKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEl0ZW1WaWV3KCk7XG4gIH1cblxuICBwcml2YXRlIHBhbmVsOiBhbnk7XG5cbiAgc2hvdyhjb21tYW5kczogVFtdKSB7XG4gICAgdGhpcy5zdG9yZUZvY3VzZWRFbGVtZW50KCk7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSB0aGlzLnBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7IGl0ZW06IDxhbnk+dGhpcyB9KTtcbiAgICB0aGlzLnNldEl0ZW1zKGNvbW1hbmRzKTtcbiAgICB0aGlzLnBhbmVsLnNob3coKTtcbiAgICB0aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7XG4gIH1cbn1cbiJdfQ==\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// import dialogs=require(\"../dialogs/dialogs\")\n\t// import path=require('path')\n\t// import rp=require(\"raml-1-parser\")\n\t//\n\t// import hl=rp.hl;\n\t// import universe = rp.universes;\n\t// import services =rp.ds;\n\t//\n\t// import universeHelpers =rp.universeHelpers;\n\t//\n\t// class AddNewResourceStateCalculator extends contextActions.CommonASTStateCalculator {\n\t//     calculate () : any {\n\t//\n\t//         //usually we dont need to check the editor, CommonASTStateCalculator does this for us\n\t//         //but in this case we accept null generalState, so double-checking for opened file\n\t//         var editor=this.getEditor()\n\t//         if (!editor) return null\n\t//\n\t//         if (path.extname(editor.getPath()) != '.raml') return null\n\t//\n\t//         var generalState = this.getGeneralState()\n\t//         if (!generalState) return null;\n\t//\n\t//         var highLevelNode = <hl.IHighLevelNode><any>generalState.node;\n\t//\n\t//         if (!universeHelpers.isResourceType(highLevelNode.definition()) &&\n\t//             !universeHelpers.isApiType(highLevelNode.definition()))\n\t//             return null\n\t//\n\t//         if(!highLevelNode.lowLevel()) {\n\t//             return null;\n\t//         }\n\t//\n\t//         return highLevelNode\n\t//     }\n\t// }\n\t//\n\t// class CreateNewAPIStateCalculator extends contextActions.CommonASTStateCalculator {\n\t//     calculate () : any {\n\t//\n\t//         var generalState = this.getGeneralState()\n\t//         if (generalState) return null\n\t//\n\t//         var editor=this.getEditor()\n\t//         if (!editor) return null\n\t//\n\t//         if (path.extname(editor.getPath()) != '.raml') return null\n\t//\n\t//         var text = editor.getText().trim()\n\t//         if (text != \"\") return null\n\t//\n\t//         return {}\n\t//     }\n\t// }\n\t//\n\t//\n\t// export function getResourceParent(node: hl.IHighLevelNode) {\n\t//     if (!node || !node.property()) return null;\n\t//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n\t//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n\t//     return getResourceParent(node.parent());\n\t// }\n\t// function getMethodParent(node: hl.IHighLevelNode) {\n\t//     if (!node || !node.property()) return null;\n\t//     if ((universeHelpers.isMethodType(node.definition())||universeHelpers.isTraitType(node.definition()))&&!node.definition().getAdapter(services.RAMLService).isUserDefined()){\n\t//         return node;\n\t//     }\n\t//     return null;\n\t// }\n\t// function getParent(node: hl.IHighLevelNode,name:string) {\n\t//     if (!node || !node.property()) return null;\n\t//     if ((node.definition().isAssignableFrom(name))){\n\t//         return node;\n\t//     }\n\t//     return null;\n\t// }\n\t//\n\t// function getResourceParentOrRoot(node: hl.IHighLevelNode) {\n\t//     var rp = getResourceParent(node);\n\t//     return rp ? rp : editorTools.aquireManager().ast;\n\t// }\n\t//\n\t// export function toResource(node: hl.IHighLevelNode) {\n\t//     if (!node || !node.property()) return null;\n\t//\n\t//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n\t//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n\t//\n\t//     return null;\n\t// }\n\t//\n\tfunction registerQuickCommands(cm) {\n\t    //     if (!editorTools.aquireManager()) editorTools.initEditorTools(false);\n\t    //\n\t    //     var commands = [\n\t    //         //cm.add( 'raml-labs:re-parse',\n\t    //         //    \"Parse current file again\",\n\t    //         //    () => {\n\t    //         //        editorTools.aquireManager().doParse(editorTools.aquireManager().getCurrentEditor().getPath());\n\t    //         //        editorTools.aquireManager().getView().forEachViewer(viewer=>viewer.clear());\n\t    //         //        editorTools.aquireManager().getView().setUnit(editorTools.aquireManager().ast, true); },\n\t    //         //    () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && editorTools.aquireManager().ast != null,\n\t    //         //    -100)\n\t    //\n\t    //     ];\n\t    //\n\t    //     commands.forEach(x=>x['__module__'] = 'editorTools');\n\t    //\n\t    //     contextActions.addAction({\n\t    //         name : \"Add new resource\",\n\t    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         category : [\"Add new...\"],\n\t    //         onClick : state=>dialogs.newResource(editorTools.aquireManager().getSelectedNode()),\n\t    //         stateCalculator : new AddNewResourceStateCalculator(),\n\t    //         shouldDisplay : state=>state != null\n\t    //     })\n\t    //\n\t    //     contextActions.addAction({\n\t    //         name : \"Create new API\",\n\t    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         category : [\"Add new...\"],\n\t    //         onClick : state=>dialogs.newApi(),\n\t    //         stateCalculator : new CreateNewAPIStateCalculator(),\n\t    //         shouldDisplay : state=>state != null\n\t    //     })\n\t    //\n\t    //     contextActions.addSimpleAction(\"Add new method\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newMethod(toResource(editorTools.aquireManager().getSelectedNode())),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && toResource(editorTools.aquireManager().getSelectedNode()) != null);\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new URI Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(toResource(editorTools.aquireManager().getSelectedNode()),\"Create new URI Parameter\",\"uriParameters\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (toResource(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Query Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Query Parameter\",\"queryParameters\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Header\",\"headers\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Response Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Header\",\"headers\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n\t    //     contextActions.addSimpleAction(\"Create new Response Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Response Body\",\"body\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n\t    //     contextActions.addSimpleAction(\"Create new Property\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\"),\"Create new Property\",\"properties\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\" )!= null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Body\",\"body\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //     contextActions.addSimpleAction(\"Create new Response\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Response\",\"responses\",\"200\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t}\n\texports.registerQuickCommands = registerQuickCommands;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// import suggestions = require('raml-suggestions');\n\tvar ramlServer = __webpack_require__(17);\n\t// import sharedAstInitializerInterfaces = require('../shared-ast-initializer-interfaces');\n\texports.selector = '.source.raml';\n\texports.disableForSelector = '.text.html .comment';\n\texports.filterSuggestions = true;\n\texports.inclusionPriority = 1;\n\texports.excludeLowerPriority = true;\n\t// export function initialize(astProvider : sharedAstInitializerInterfaces.IASTProvider) {\n\t//     suggestions.setDefaultASTProvider(<any>astProvider);\n\t// }\n\tfunction onDidInsertSuggestion(event) {\n\t    var offset = event.editor.getBuffer().characterIndexForPosition(event.triggerPosition);\n\t    if (event.suggestion.annotation) {\n\t        var txt = event.editor.getBuffer().getText();\n\t        for (var i = offset; i < txt.length; i++) {\n\t            var c = txt.charAt(i);\n\t            if (c == ')') {\n\t                offset = i + 1;\n\t                break;\n\t            }\n\t            if (c == '\\r' || c == '\\n') {\n\t                return;\n\t            }\n\t        }\n\t        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t        event.editor.getBuffer().insert(newPos, ':');\n\t        return;\n\t    }\n\t    if ((event.suggestion.replacementPrefix && event.suggestion.extra) || event.suggestion.extra == \"%\") {\n\t        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset - event.suggestion.replacementPrefix.length);\n\t        event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t    }\n\t    else {\n\t        //This actually looks exactly like a previous case but typing it as a separate case for now TODO\n\t        if (event.suggestion.extra == \" \") {\n\t            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t        }\n\t        //FIXME\n\t        if (event.suggestion.extra == \" { \") {\n\t            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t        }\n\t        if (event.suggestion.extra && event.suggestion.extra.indexOf(\"!include\") != -1) {\n\t            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t        }\n\t    }\n\t}\n\texports.onDidInsertSuggestion = onDidInsertSuggestion;\n\t// class FSProvider implements suggestions.IFSProvider {\n\t//     contentDirName(content: suggestions.IEditorStateProvider): string {\n\t//         var contentPath = content.getPath();\n\t//\n\t//         return path.dirname(contentPath);\n\t//     }\n\t//\n\t//     dirName(childPath: string): string {\n\t//         return path.dirname(childPath);\n\t//     }\n\t//\n\t//     exists(checkPath: string): boolean {\n\t//         return fs.existsSync(checkPath);\n\t//     }\n\t//\n\t//     resolve(contextPath: string, relativePath: string): string {\n\t//         return path.resolve(contextPath, relativePath);\n\t//     }\n\t//\n\t//     isDirectory(dirPath: string): boolean {\n\t//         var stat = fs.statSync(dirPath);\n\t//\n\t//         return stat && stat.isDirectory();\n\t//     }\n\t//\n\t//     readDir(dirPath: string): string[] {\n\t//         return fs.readdirSync(dirPath);\n\t//     }\n\t//\n\t//     existsAsync(path: string): Promise<boolean> {\n\t//         return new Promise(resolve => {\n\t//             fs.exists(path, (result) => {resolve(result)})\n\t//         });\n\t//     }\n\t//\n\t//     /**\n\t//      * Returns directory content list.\n\t//      * @param fullPath\n\t//      */\n\t//     readDirAsync(path: string): Promise<string[]> {\n\t//         return new Promise(resolve => {\n\t//             fs.readdir(path, (err, result) => {resolve(result)})\n\t//         });\n\t//     }\n\t//\n\t//     /**\n\t//      * Check whether the path points to a directory.\n\t//      * @param fullPath\n\t//      */\n\t//     isDirectoryAsync(path: string): Promise<boolean> {\n\t//         return new Promise(resolve => {\n\t//             fs.stat(path, (err, stats) => {resolve(stats.isDirectory())})\n\t//         });\n\t//     }\n\t// }\n\t// class AtomEditorState implements suggestions.IEditorStateProvider {\n\t//     textEditor: AtomCore.IEditor;\n\t//\n\t//     constructor(textEditor: AtomCore.IEditor,private request: AtomCompletionRequest) {\n\t//         this.textEditor = textEditor;\n\t//     }\n\t//\n\t//     getText(): string {\n\t//         return this.textEditor.getBuffer().getText();\n\t//     }\n\t//\n\t//     getPath(): string {\n\t//         return this.textEditor.getPath();\n\t//     }\n\t//\n\t//     getBaseName(): string {\n\t//         return path.basename(this.getPath());\n\t//     }\n\t//\n\t//     getOffset(): number {\n\t//         return this.request.editor.getBuffer().characterIndexForPosition(this.request.bufferPosition);\n\t//     }\n\t// }\n\tfunction getSuggestions(request) {\n\t    // var editorState = new AtomEditorState(request.editor, request);\n\t    var editor = request.editor;\n\t    var offset = editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n\t    ramlServer.getNodeClientConnection().documentChanged({\n\t        uri: request.editor.getPath(),\n\t        text: editor.getText()\n\t    });\n\t    return ramlServer.getNodeClientConnection().getSuggestions(request.editor.getPath(), offset);\n\t    // return suggestions.suggest(editorState, new FSProvider());\n\t}\n\texports.getSuggestions = getSuggestions;\n\t// export function getAstNode(request: AtomCompletionRequest,clearLastChar:boolean=true,allowNull:boolean=true):highlevel.IParseResult{\n\t//     var p=request.editor.getPath();\n\t//     var prj=rp.project.createProject(path.dirname(p));\n\t//     var offset=request.editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n\t//     var text=request.editor.getBuffer().getText();\n\t//     var kind=search.determineCompletionKind(text,offset);\n\t//     if(kind==search.LocationKind.KEY_COMPLETION&&clearLastChar){\n\t//         var pos=offset>0?offset-1:offset;\n\t//         for (var i=pos;i>0;i--){\n\t//             var c=text[i];\n\t//             if (c=='\\r'||c=='\\n'){\n\t//                 break;\n\t//             }\n\t//             else{\n\t//                 if (c==' '||c=='\\t'){\n\t//                     ilevel++;\n\t//                 }\n\t//             }\n\t//         }\n\t//         var oldOfffset=offset;\n\t//\n\t//         text=text.substring(0,oldOfffset)+\"k:\"+text.substring(oldOfffset);\n\t//         //offset--;\n\t//     }\n\t//     var ilevel=0;\n\t//     var unit=prj.setCachedUnitContent(path.basename(p),text);\n\t//     var ast=<highlevel.IHighLevelNode>unit.highLevel();\n\t//     var cm=offset;\n\t//     for (var pm=offset-1;pm>=0;pm--){\n\t//         var c=text[pm];\n\t//         //if (c==' '||c=='\\t'||c=='\\r'||c=='\\n'){\n\t//         //    cm=pm-1;\n\t//         //    continue;\n\t//         //}\n\t//         if (c==' '||c=='\\t'){\n\t//             cm=pm-1;\n\t//             continue;\n\t//         }\n\t//         break;\n\t//     }\n\t//     var astNode=ast.findElementAtOffset(cm);\n\t//\n\t//     if (astNode&&astNode.parent()==null){\n\t//         if (ilevel>0&&kind==search.LocationKind.KEY_COMPLETION) {\n\t//             var attr=_.find(astNode.attrs(),attr=>{\n\t//                 var at=<any>attr;\n\t//                 return at.lowLevel().start()<offset&&at.lowLevel().end()>=offset&&!at.property().isKey()\n\t//             });\n\t//             if (!attr) {\n\t//                 if (allowNull) {\n\t//                     return null;\n\t//                 }\n\t//             }\n\t//         }\n\t//         //check if we are on correct indentation level\n\t//     }\n\t//     if (!allowNull&&!astNode){\n\t//         return ast;\n\t//     }\n\t//     return astNode;\n\t// }\n\t//\n\t// export function saveUnit(unit : lowLevel.ICompilationUnit) : void {\n\t//     var unitPath = unit.absolutePath()\n\t//     var unitText = unit.contents()\n\t//\n\t//     //first trying to find an opened text editor\n\t//     var openedEditor = _.find(atom.workspace.getTextEditors(), editor => {\n\t//         var editorPath = editor.getPath()\n\t//         return editorPath == unitPath\n\t//     })\n\t//\n\t//     if (openedEditor) {\n\t//         openedEditor.setText(unitText)\n\t//     } else {\n\t//         fs.writeFileSync(unitPath, unitText)\n\t//     }\n\t// }\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction doPatch() {\n\t    var oldRegister = document.registerElement;\n\t    document.registerElement = function (name, options) {\n\t        if (name === \"atom-pane-resize-handle\") {\n\t            var proto = options.prototype;\n\t            if (proto) {\n\t                var oldAttachedCallback = proto.attachedCallback;\n\t                proto.attachedCallback = function () {\n\t                    if (this.parentElement) {\n\t                        return oldAttachedCallback.apply(this, []);\n\t                    }\n\t                };\n\t            }\n\t            document.registerElement = oldRegister;\n\t        }\n\t        return oldRegister.apply(document, [name, options]);\n\t    };\n\t}\n\texports.doPatch = doPatch;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvcGF0Y2hFbGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBRUksSUFBSSxXQUFXLEdBQVMsUUFBUyxDQUFDLGVBQWUsQ0FBQztJQUU1QyxRQUFTLENBQUMsZUFBZSxHQUFHLFVBQVUsSUFBSSxFQUFFLE9BQU87UUFFckQsRUFBRSxDQUFBLENBQUMsSUFBSSxLQUFLLHlCQUF5QixDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBRTlCLEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsSUFBSSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBRWpELEtBQUssQ0FBQyxnQkFBZ0IsR0FBRztvQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO29CQUM5QyxDQUFDO2dCQUNMLENBQUMsQ0FBQTtZQUNMLENBQUM7WUFFSyxRQUFTLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQXhCRCwwQkF3QkMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9wYXRjaEVsZW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRvUGF0Y2goKTogdm9pZCB7XG5cbiAgICB2YXIgb2xkUmVnaXN0ZXIgPSAoPGFueT5kb2N1bWVudCkucmVnaXN0ZXJFbGVtZW50O1xuXG4gICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG5cbiAgICAgICAgaWYobmFtZSA9PT0gXCJhdG9tLXBhbmUtcmVzaXplLWhhbmRsZVwiKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBvcHRpb25zLnByb3RvdHlwZTtcblxuICAgICAgICAgICAgaWYocHJvdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkQXR0YWNoZWRDYWxsYmFjayA9IHByb3RvLmF0dGFjaGVkQ2FsbGJhY2s7XG5cbiAgICAgICAgICAgICAgICBwcm90by5hdHRhY2hlZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkQXR0YWNoZWRDYWxsYmFjay5hcHBseSh0aGlzLCBbXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IG9sZFJlZ2lzdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9sZFJlZ2lzdGVyLmFwcGx5KGRvY3VtZW50LCBbbmFtZSwgb3B0aW9uc10pXG4gICAgfVxufSJdfQ==\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom\");\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\texports.DYNAMIC_COMMAND_TAG = \"DYNAMIC_COMMAND_TAG\";\n\tvar commandIdToCommandInfo = {};\n\tvar tagToCommands = {};\n\t/**\n\t * Adds new managed command\n\t * @param selector - command CSS selector\n\t * @param id - command id. Must be unique across the managed commands.\n\t * @param callBack - called on command invocation\n\t * @param tag - optional action tag allowing to perform batch operations\n\t */\n\tfunction addCommand(selector, id, callBack, tag) {\n\t    if (_.find(listCommands(), function (commandId) {\n\t        if (commandId == id) {\n\t            return true;\n\t        }\n\t        return false;\n\t    })) {\n\t        return;\n\t    }\n\t    var disposable = atom.commands.add(selector, id, callBack);\n\t    var commandInfo = {\n\t        commandId: id,\n\t        tag: tag,\n\t        disposable: disposable\n\t    };\n\t    commandIdToCommandInfo[id] = commandInfo;\n\t    if (tag) {\n\t        var tagCommands = tagToCommands[tag];\n\t        if (!tagCommands) {\n\t            tagCommands = [];\n\t            tagToCommands[tag] = tagCommands;\n\t        }\n\t        tagCommands.push(commandInfo);\n\t    }\n\t}\n\texports.addCommand = addCommand;\n\t/**\n\t * Deletes unmanaged command.\n\t * Generally, should not be called for managed actions, use the managed\n\t * version instead.\n\t * @param id - command id\n\t */\n\tfunction deleteUnmanagedCommand(id) {\n\t    atom.commands.registeredCommands[id] = null;\n\t    atom.commands.selectorBasedListenersByCommandName[id] = null;\n\t}\n\texports.deleteUnmanagedCommand = deleteUnmanagedCommand;\n\t/**\n\t * Deletes managed action by id\n\t * @param id\n\t */\n\tfunction deleteManagedCommand(id) {\n\t    var commandInfo = commandIdToCommandInfo[id];\n\t    if (!commandInfo)\n\t        return;\n\t    commandInfo.disposable.dispose();\n\t    delete commandIdToCommandInfo[id];\n\t    if (commandInfo.tag) {\n\t        var tagCommands = tagToCommands[commandInfo.tag];\n\t        if (!tagCommands)\n\t            return;\n\t        var infoIndex = -1;\n\t        _.find(tagCommands, function (currentInfo, index) {\n\t            if (currentInfo.commandId == id) {\n\t                infoIndex = index;\n\t                return true;\n\t            }\n\t            return false;\n\t        });\n\t        if (infoIndex != -1)\n\t            tagCommands.splice(infoIndex, 1);\n\t    }\n\t}\n\texports.deleteManagedCommand = deleteManagedCommand;\n\t/**\n\t * Deletes all managed commands tagged the the specific tag\n\t * @param tag\n\t */\n\tfunction deleteCommandsByTag(tag) {\n\t    var tagCommands = tagToCommands[tag];\n\t    if (!tagCommands)\n\t        return;\n\t    for (var index in tagCommands) {\n\t        var currentInfo = tagCommands[index];\n\t        currentInfo.disposable.dispose();\n\t        delete commandIdToCommandInfo[currentInfo.commandId];\n\t    }\n\t    delete tagToCommands[tag];\n\t}\n\texports.deleteCommandsByTag = deleteCommandsByTag;\n\t/**\n\t * Lists all commands, both managed and unmanaged.\n\t * @returns {string[]}\n\t */\n\tfunction listCommands() {\n\t    var result = [];\n\t    for (var commandName in atom.commands.selectorBasedListenersByCommandName) {\n\t        result.push(commandName);\n\t    }\n\t    return result;\n\t}\n\texports.listCommands = listCommands;\n\tvar initialized = false;\n\tfunction initialize() {\n\t    if (initialized)\n\t        return;\n\t    initialized = true;\n\t    try {\n\t        //forcing command palette to register itself\n\t        atom.packages.activatePackage('command-palette');\n\t        //registering our own listener to command palette's command\n\t        var listener = function () {\n\t            prePanelDisplay();\n\t        };\n\t        listener.commandManager = true;\n\t        atom.commands.add('atom-workspace', 'command-palette:toggle', listener);\n\t        ////and now swapping those listeners, so our one is called first\n\t        //var listenersArray = (<any>atom.commands.selectorBasedListenersByCommandName)\n\t        //    [\"command-palette:toggle\"]\n\t        //listenersArray.splice(0,0,listenersArray[1])\n\t        //listenersArray.splice(1, 1)\n\t        var listenersArray = atom.commands.selectorBasedListenersByCommandName[\"command-palette:toggle\"];\n\t        listenersArray.forEach(function (listener) {\n\t            var callback = listener.callback || listener.didDispatch;\n\t            if (callback && callback.commandManager) {\n\t                listener.sequenceNumber = 100500000;\n\t            }\n\t        });\n\t    }\n\t    catch (Error) {\n\t        console.error(Error.message);\n\t    }\n\t}\n\texports.initialize = initialize;\n\tvar contributors = {};\n\tfunction registerContributor(contributor) {\n\t    contributors[contributor.id] = contributor;\n\t}\n\texports.registerContributor = registerContributor;\n\tfunction prePanelDisplay() {\n\t    deleteCommandsByTag(exports.DYNAMIC_COMMAND_TAG);\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        if (contributor.calculationStarted) {\n\t            contributor.calculationStarted();\n\t        }\n\t    }\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        contributor.calculateItems().forEach(function (item) {\n\t            addCommand(item.selector, \"api-workbench:\" + item.id, item.callBack, exports.DYNAMIC_COMMAND_TAG);\n\t        });\n\t    }\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        if (contributor.calculationFinished) {\n\t            contributor.calculationFinished();\n\t        }\n\t    }\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\tvar commandManager = __webpack_require__(28);\n\tvar contextMenuImpl = __webpack_require__(30);\n\tvar originalShowForEvent;\n\t/**\n\t * Must be called first, at startup, before the module is used.\n\t */\n\tfunction initialize() {\n\t    if (initialized) {\n\t        return;\n\t    }\n\t    initialized = true;\n\t    originalShowForEvent = atom.contextMenu.constructor.prototype.showForEvent;\n\t    atom.contextMenu.constructor.prototype.showForEvent = function (event) {\n\t        preMenuDisplay().then(function () {\n\t            originalShowForEvent.apply(atom.contextMenu, [event]);\n\t            postMenuDisplay();\n\t        });\n\t    };\n\t}\n\texports.initialize = initialize;\n\tvar initialized = false;\n\tfunction preMenuDisplay() {\n\t    try {\n\t        return contextMenuImpl.calculateMenuItemsTree().then(function (treeRoots) {\n\t            var nodeSets = {};\n\t            cleanExistingSets();\n\t            commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG);\n\t            treeRoots.forEach(function (node) {\n\t                var itemSet = nodeSets[node.selector];\n\t                if (!itemSet) {\n\t                    itemSet = findOrCreateItemSet(node.selector);\n\t                    nodeSets[node.selector] = itemSet;\n\t                }\n\t                var menuItem = constructAtomMenuItem(node);\n\t                itemSet.items.push(menuItem);\n\t            });\n\t        });\n\t    }\n\t    catch (Error) {\n\t        console.log(Error.message);\n\t    }\n\t}\n\tfunction constructAtomMenuItem(node) {\n\t    var result = {\n\t        label: node.name,\n\t    };\n\t    if (node.children.length > 0) {\n\t        result.submenu = [];\n\t    }\n\t    else {\n\t        var commandName = \"api-workbench:\" + node.name;\n\t        var existingCommands = commandManager.listCommands();\n\t        commandManager.addCommand(node.selector, commandName, node.onClick, commandManager.DYNAMIC_COMMAND_TAG);\n\t        result.command = commandName;\n\t    }\n\t    node.children.forEach(function (child) {\n\t        var childMenuItem = constructAtomMenuItem(child);\n\t        result.submenu.push(childMenuItem);\n\t    });\n\t    return result;\n\t}\n\tvar DYNAMIC_SET_TAG = \"DYNAMIC_SET_TAG\";\n\t/**\n\t * Selector that were used at least once in the context menu\n\t * @type {Array}\n\t */\n\tvar usedSelectors = [];\n\tfunction findOrCreateItemSet(selector) {\n\t    var existingSet = _.find(atom.contextMenu.itemSets, function (currentSet) {\n\t        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n\t    });\n\t    if (!existingSet) {\n\t        existingSet = {\n\t            items: [],\n\t            selector: selector,\n\t            specificity: 11,\n\t            tag: DYNAMIC_SET_TAG\n\t        };\n\t        atom.contextMenu.itemSets.push(existingSet);\n\t        //saving used selector name\n\t        if (!_.find(usedSelectors, function (name) { return name == selector; })) {\n\t            usedSelectors.push(selector);\n\t        }\n\t    }\n\t    return existingSet;\n\t}\n\tfunction cleanExistingSets() {\n\t    var existingSets = _.filter(atom.contextMenu.itemSets, function (currentSet) {\n\t        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n\t    });\n\t    existingSets.forEach(function (existingSet) {\n\t        existingSet.items = [];\n\t    });\n\t}\n\tfunction postMenuDisplay() {\n\t    //commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG)\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\tvar ramlServer = __webpack_require__(17);\n\tvar editorTools = __webpack_require__(1);\n\tvar uilibsModule = __webpack_require__(5);\n\tvar fs = __webpack_require__(12);\n\tvar mkdirp = __webpack_require__(31);\n\tvar pathModule = __webpack_require__(2);\n\tvar actionUIManager = __webpack_require__(32);\n\tvar uiBuilder = __webpack_require__(9);\n\tvar contributors = {};\n\t/**\n\t * Adds new contributor to the list. All contributors are asked for the menu items\n\t * before the menu is displayed.\n\t * @param contributor\n\t */\n\tfunction registerContributor(contributor) {\n\t    contributors[contributor.id] = contributor;\n\t}\n\texports.registerContributor = registerContributor;\n\t/**\n\t * Generally it is recommended to use contributor-based architecture instead.\n\t * This method allows adding a single menu item manually, if needed.\n\t * @param name\n\t * @param onClick\n\t * @param categories\n\t * @param shouldDisplay\n\t */\n\tfunction addMenuItem(name, onClick, categories, shouldDisplay) {\n\t}\n\texports.addMenuItem = addMenuItem;\n\t/**\n\t * Generally it is recommended to use contributor-based architecture instead.\n\t * Deletes all menu items with a given selector. Should almost never be called.\n\t * Can not delete contributor-based menu items.\n\t * @param selector\n\t */\n\tfunction deleteMenuItems(selector) {\n\t    //TODO implement\n\t}\n\texports.deleteMenuItems = deleteMenuItems;\n\t/**\n\t * Generally it is recommended to use contributor-based architecture instead.\n\t * Deletes menu item by its selector, name, and optionally categories.\n\t * Can not delete contributor-based menu items.\n\t * @param selector\n\t * @param name\n\t * @param categories\n\t */\n\tfunction deleteMenuItem(selector, name, categories) {\n\t    //TODO implement\n\t}\n\texports.deleteMenuItem = deleteMenuItem;\n\tvar ContextMenuItemNode = /** @class */ (function () {\n\t    function ContextMenuItemNode(menuItem, nameOverride) {\n\t        this.selector = menuItem.selector;\n\t        if (nameOverride) {\n\t            this.name = nameOverride;\n\t        }\n\t        else {\n\t            this.name = menuItem.name;\n\t        }\n\t        this.categories = menuItem.categories;\n\t        this.onClick = menuItem.onClick;\n\t        this.children = [];\n\t    }\n\t    return ContextMenuItemNode;\n\t}());\n\t/**\n\t * Calculates current menu items tree.\n\t * @returns {IContextMenuItemNode[]}\n\t */\n\tfunction calculateMenuItemsTree() {\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        if (contributor.calculationStarted) {\n\t            contributor.calculationStarted();\n\t        }\n\t    }\n\t    var contributorPromises = [];\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        contributorPromises.push(contributor.calculateItems());\n\t    }\n\t    return Promise.all(contributorPromises).then(function (contributorItems) {\n\t        var result = [];\n\t        contributorItems.forEach(function (items) {\n\t            items.forEach(function (item) {\n\t                addItemsTreeNode(result, item);\n\t            });\n\t        });\n\t        for (var contributorId in contributors) {\n\t            var contributor = contributors[contributorId];\n\t            if (contributor.calculationFinished) {\n\t                contributor.calculationFinished();\n\t            }\n\t        }\n\t        return result;\n\t    });\n\t}\n\texports.calculateMenuItemsTree = calculateMenuItemsTree;\n\tfunction addItemsTreeNode(roots, item) {\n\t    var currentList = roots;\n\t    if (item.categories) {\n\t        for (var catIndex in item.categories) {\n\t            var currentSegment = item.categories[catIndex];\n\t            var existingNode = _.find(currentList, function (node) {\n\t                return node.name == currentSegment;\n\t            });\n\t            if (!existingNode) {\n\t                existingNode = new ContextMenuItemNode(item, currentSegment);\n\t                currentList.push(existingNode);\n\t            }\n\t            if (!existingNode.children) {\n\t                currentList = [];\n\t                existingNode.children = currentList;\n\t            }\n\t            else {\n\t                currentList = existingNode.children;\n\t            }\n\t        }\n\t    }\n\t    var leafNode = _.find(currentList, function (node) {\n\t        return node.name == item.name;\n\t    });\n\t    if (leafNode) {\n\t        var index = currentList.indexOf(leafNode, 0);\n\t        if (index != undefined) {\n\t            currentList.splice(index, 1);\n\t        }\n\t    }\n\t    leafNode = new ContextMenuItemNode(item);\n\t    currentList.push(leafNode);\n\t}\n\tvar actionBasedMenuInitialized = false;\n\tfunction onClickHandler(path, action, position) {\n\t    ramlServer.getNodeClientConnection().executeContextAction(path, action, position).then(function (changes) {\n\t        var editorManager = editorTools.aquireManager();\n\t        if (!editorManager)\n\t            return Promise.resolve([]);\n\t        var path = editorManager.getPath();\n\t        var _loop_1 = function (change) {\n\t            if (change.uri == path && change.text != null) {\n\t                editorManager.getCurrentEditor().getBuffer().setText(change.text);\n\t                ramlServer.getNodeClientConnection().documentChanged({\n\t                    uri: path,\n\t                    text: change.text\n\t                });\n\t            }\n\t            else if (change.text != null) {\n\t                var editorFound_1 = false;\n\t                atom.workspace.getTextEditors().forEach(function (currentEditor) {\n\t                    if (currentEditor.getPath && currentEditor.getPath() == change.uri) {\n\t                        currentEditor.getBuffer().setText(change.text);\n\t                        editorFound_1 = true;\n\t                    }\n\t                });\n\t                if (!editorFound_1) {\n\t                    mkdirp.sync(pathModule.dirname(change.uri));\n\t                    fs.writeFileSync(change.uri, change.text);\n\t                }\n\t            }\n\t        };\n\t        //TODO handle all cases\n\t        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n\t            var change = changes_1[_i];\n\t            _loop_1(change);\n\t        }\n\t    });\n\t}\n\t/**\n\t * Initializes and registers standard context menu contributor, based on currently available context actions.\n\t * @param selector - CSS selector, can be null if not used in the display.\n\t */\n\tfunction initializeActionBasedMenu(selector) {\n\t    var editorContextMenuContributor = {\n\t        id: \"editorContextActionContributor\",\n\t        calculateItems: function () {\n\t            var editorManager = editorTools.aquireManager();\n\t            if (!editorManager)\n\t                return Promise.resolve([]);\n\t            var path = editorManager.getPath();\n\t            if (!path)\n\t                return Promise.resolve([]);\n\t            var position = editorManager.getCurrentPosition();\n\t            return ramlServer.getNodeClientConnection()\n\t                .calculateEditorContextActions(path, position).then(function (currentActions) {\n\t                var result = [];\n\t                currentActions.forEach(function (action) {\n\t                    // if (action.hasUI) {\n\t                    //     return;\n\t                    // }\n\t                    result.push({\n\t                        selector: selector,\n\t                        name: action.label ? action.label : action.name,\n\t                        categories: action.category,\n\t                        onClick: function () {\n\t                            onClickHandler(path, action, position);\n\t                        },\n\t                        children: []\n\t                    });\n\t                });\n\t                return result;\n\t            });\n\t        }\n\t    };\n\t    registerContributor(editorContextMenuContributor);\n\t    handleActionUI();\n\t    configureServerActions();\n\t    actionBasedMenuInitialized = true;\n\t}\n\texports.initializeActionBasedMenu = initializeActionBasedMenu;\n\tfunction handleActionUI() {\n\t    ramlServer.getNodeClientConnection().onDisplayActionUI(function (uiDisplayRequest) {\n\t        ramlServer.getNodeClientConnection().debug(\"Got UI display request\", \"contextActions\", \"contextMenuImpl#handleActionUI\");\n\t        var actionUI = actionUIManager.getUICode(uiDisplayRequest.action.id);\n\t        if (!actionUI) {\n\t            ramlServer.getNodeClientConnection().error(\"Can not find UI for action \" +\n\t                uiDisplayRequest.action.id, \"contextActions\", \"handleActionUI\");\n\t            return Promise.resolve({});\n\t        }\n\t        global.IDE = atom;\n\t        global.UI = uilibsModule;\n\t        global.UIBuilder = uiBuilder;\n\t        return actionUI.run(uiDisplayRequest.initialUIState).then(function (result) {\n\t            ramlServer.getNodeClientConnection().debugDetail(\"Client: got result on dialog finish\", \"contextActions\", \"handleActionUI\");\n\t            return result;\n\t        });\n\t    });\n\t}\n\tfunction configureServerActions() {\n\t    ramlServer.getNodeClientConnection().setServerConfiguration({\n\t        actionsConfiguration: {\n\t            enableUIActions: true\n\t        }\n\t    });\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"mkdirp\");\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar completeBodyUI = __webpack_require__(33);\n\tvar newMethodUI = __webpack_require__(34);\n\tvar simpleActionUi = __webpack_require__(35);\n\tfunction getUICode(actionID) {\n\t    if (actionID == \"completeBody\") {\n\t        return completeBodyUI;\n\t    }\n\t    if (actionID == \"newMethod\") {\n\t        return newMethodUI;\n\t    }\n\t    if (actionID == \"Create new Response\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new URI Parameter\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Query Parameter\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Header\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Response Header\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Response Body\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Property\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Body\") {\n\t        return simpleActionUi;\n\t    }\n\t    return null;\n\t}\n\texports.getUICode = getUICode;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25VSU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNEQ7QUFDNUQsb0RBQXNEO0FBRXRELDBEQUE0RDtBQU01RCxtQkFBMEIsUUFBZ0I7SUFDdEMsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksMEJBQTBCLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksNEJBQTRCLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQTFDRCw4QkEwQ0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvblVJTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wbGV0ZUJvZHlVSSA9IHJlcXVpcmUoXCIuL2FjdGlvbnMvY29tcGxldGVCb2R5L3VpXCIpXG5pbXBvcnQgbmV3TWV0aG9kVUkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL25ld01ldGhvZC91aVwiKVxuXG5pbXBvcnQgc2ltcGxlQWN0aW9uVWkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aVwiKVxuXG5pbnRlcmZhY2UgQWN0aW9uVUkge1xuICAgIHJ1bihpbml0aWFsU3RhdGU/OiBhbnkpOiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVSUNvZGUoYWN0aW9uSUQ6IHN0cmluZyk6IEFjdGlvblVJIHtcbiAgICBpZihhY3Rpb25JRCA9PSBcImNvbXBsZXRlQm9keVwiKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZUJvZHlVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIm5ld01ldGhvZFwiKSB7XG4gICAgICAgIHJldHVybiBuZXdNZXRob2RVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgUmVzcG9uc2VcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFVSSSBQYXJhbWV0ZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFF1ZXJ5IFBhcmFtZXRlclwiKSB7XG4gICAgICAgIHJldHVybiBzaW1wbGVBY3Rpb25VaTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgSGVhZGVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBSZXNwb25zZSBIZWFkZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFJlc3BvbnNlIEJvZHlcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFByb3BlcnR5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBCb2R5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufSJdfQ==\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar JsonSchemaGenerator = /** @class */ (function () {\n\t    function JsonSchemaGenerator() {\n\t    }\n\t    JsonSchemaGenerator.prototype.generateSchema = function (obj) {\n\t        var sch = {};\n\t        sch['required'] = true;\n\t        sch['$schema'] = 'http://json-schema.org/draft-03/schema';\n\t        this.pass(obj, sch);\n\t        return sch;\n\t    };\n\t    JsonSchemaGenerator.prototype.pass = function (value, property) {\n\t        var valueType = this.detectType(value);\n\t        property['type'] = valueType;\n\t        if (!value || value == null) {\n\t        }\n\t        else if (Array.isArray(value)) {\n\t            this.passArray(value, property);\n\t        }\n\t        else if (value instanceof Object) {\n\t            this.passObject(value, property);\n\t        }\n\t    };\n\t    JsonSchemaGenerator.prototype.passObject = function (obj, sch) {\n\t        var _this = this;\n\t        Object.keys(obj).forEach(function (x) { return _this.registerProperty(x, obj[x], sch); });\n\t    };\n\t    JsonSchemaGenerator.prototype.registerProperty = function (propName, value, sch) {\n\t        var properties = sch['properties'];\n\t        if (!properties) {\n\t            properties = {};\n\t            sch['properties'] = properties;\n\t        }\n\t        var property = properties[propName];\n\t        if (!property) {\n\t            property = {};\n\t            properties[propName] = property;\n\t        }\n\t        property['required'] = false;\n\t        this.pass(value, property);\n\t    };\n\t    JsonSchemaGenerator.prototype.passArray = function (array, property) {\n\t        var _this = this;\n\t        var items = property['items'];\n\t        if (!items) {\n\t            items = [];\n\t            property['items'] = items;\n\t        }\n\t        var l = array.length;\n\t        var itemSet = [];\n\t        array.forEach(function (value) {\n\t            var item = {};\n\t            _this.pass(value, item);\n\t            itemSet.push(item);\n\t        });\n\t        items.push(itemSet[0]);\n\t    };\n\t    JsonSchemaGenerator.prototype.detectType = function (value) {\n\t        if (Array.isArray(value)) {\n\t            return 'array';\n\t        }\n\t        return typeof value;\n\t    };\n\t    return JsonSchemaGenerator;\n\t}());\n\tfunction generateSchema(text, mediaType) {\n\t    var generator = new JsonSchemaGenerator();\n\t    var obj = JSON.parse(text);\n\t    var schemaObject = generator.generateSchema(obj);\n\t    var schemaString = JSON.stringify(schemaObject, null, 2);\n\t    return schemaString;\n\t}\n\texports.generateSchema = generateSchema;\n\tvar FillBodyDialog = /** @class */ (function () {\n\t    function FillBodyDialog(title) {\n\t        if (title === void 0) { title = \"Fill body\"; }\n\t        var _this = this;\n\t        this.title = title;\n\t        this.name = \"\";\n\t        this.needXML = true;\n\t        this.needJSON = true;\n\t        this.jsexample = '{\\n \"message\":\"Hello world\"\\n}';\n\t        this.xmlexample = \"\";\n\t        this.xmlschema = \"\";\n\t        this.jsschema = \"\";\n\t        this.resultPromise = new Promise(function (resolve, reject) {\n\t            _this.resolve = resolve;\n\t            _this.reject = reject;\n\t        });\n\t    }\n\t    FillBodyDialog.prototype.extraContent = function (s) {\n\t    };\n\t    FillBodyDialog.prototype.updateButtons = function () {\n\t        if (!this.createButton) {\n\t            return;\n\t        }\n\t        if (this.name.length == 0) {\n\t            this.createButton.setDisabled(true);\n\t            this.em.setDisplay(true);\n\t            this.em.setText(\"Please type name of your payload\");\n\t            return;\n\t        }\n\t        if (this.needJSON) {\n\t            try {\n\t                JSON.parse(this.jsexample);\n\t            }\n\t            catch (e) {\n\t                this.createButton.setDisabled(true);\n\t                this.em.setDisplay(true);\n\t                this.em.setText(\"JSON example is not correct\");\n\t                return;\n\t            }\n\t            // try {\n\t            //     var so = su.getJSONSchema(this.jsschema, null);\n\t            //\n\t            // } catch (e) {\n\t            //     this.createButton.setDisabled(true);\n\t            //     this.em.setDisplay(true)\n\t            //     this.em.setText(\"JSON schema is not correct\");\n\t            //     return;\n\t            // }\n\t        }\n\t        if (this.needXML) {\n\t            // try {\n\t            //     xmlutil(this.xmlexample);\n\t            // } catch (e) {\n\t            //     this.createButton.setDisabled(true);\n\t            //     this.em.setDisplay(true)\n\t            //     this.em.setText(\"XML example is not correct\");\n\t            //     return;\n\t            // }\n\t            // try {\n\t            //     var so = su.getXMLSchema(this.xmlschema);\n\t            //\n\t            // } catch (e) {\n\t            //     this.createButton.setDisabled(true);\n\t            //     this.em.setDisplay(true)\n\t            //     this.em.setText(\"XML schema is not correct\");\n\t            //     return;\n\t            // }\n\t        }\n\t        this.em.setDisplay(false);\n\t        this.createButton.setDisabled(false);\n\t    };\n\t    FillBodyDialog.prototype.show = function () {\n\t        var _this = this;\n\t        var zz = null;\n\t        this.em = UI.label(\"Please type name of your payload\", UI.Icon.BUG, UI.TextClasses.ERROR, UI.HighLightClasses.NONE);\n\t        var section = UI.section(this.title, UI.Icon.BOOK, false, false, this.em, UI.h3(\"Please type name for your payload\")).pad(10, 10);\n\t        section.addChild(UI.texfField(\"\", this.name, function (x) {\n\t            _this.name = x.getBinding().get();\n\t            _this.updateButtons();\n\t        }));\n\t        var r1 = UI.checkBox(\"Create XML body\");\n\t        r1.setValue(this.needXML);\n\t        r1.getBinding().addListener(function (x) {\n\t            _this.needXML = r1.getValue();\n\t            _this.updateButtons();\n\t        });\n\t        section.addChild(r1);\n\t        var r2 = UI.checkBox(\"Create JSON body\");\n\t        r2.setValue(this.needJSON);\n\t        r2.getBinding().addListener(function (x) {\n\t            _this.needJSON = r2.getValue();\n\t            _this.updateButtons();\n\t        });\n\t        section.addChild(r2);\n\t        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n\t        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n\t        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) {\n\t            zz.destroy();\n\t        }).margin(10, 10));\n\t        this.createButton = UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n\t            _this.onOk(zz);\n\t            zz.destroy();\n\t        });\n\t        buttonBar.addChild(this.createButton);\n\t        var tf = new UI.TabFolder();\n\t        this.createButton.setDisabled(true);\n\t        this.createTextSection(tf, \"JSON Example\", \"source.json\", \"jsexample\");\n\t        this.createTextSection(tf, \"JSON Schema\", \"source.json\", \"jsschema\");\n\t        this.createTextSection(tf, \"XML Example\", \"text.xml\", \"xmlexample\");\n\t        this.createTextSection(tf, \"XML Schema\", \"text.xml\", \"xmlschema\");\n\t        tf.setOnSelected(function () {\n\t            var c = tf.selectedComponent();\n\t            var te = c.children()[1];\n\t            te.setText(_this[c.id()]);\n\t        });\n\t        section.addChild(tf);\n\t        section.addChild(buttonBar);\n\t        zz = IDE.workspace.addModalPanel({ item: section.renderUI() });\n\t    };\n\t    FillBodyDialog.prototype.createTextSection = function (tf, caption, lang, code) {\n\t        var _this = this;\n\t        var hs = UI.vc();\n\t        hs.setCaption(caption);\n\t        hs.setId(code);\n\t        var ts = new UI.AtomEditorElement(\"\", function (x) { return x; });\n\t        ts.setMini(false);\n\t        ts.getBinding().addListener(function (x) {\n\t            _this[code] = ts.getValue();\n\t            _this.updateButtons();\n\t        });\n\t        //ts.setCaption(code)\n\t        ts.setText(\"\" + this[code]);\n\t        ts.setCaption(caption);\n\t        ts.setGrammar(lang);\n\t        ts.setStyle(\"height\", \"400px\");\n\t        ts.setStyle(\"border\", \"solid\");\n\t        ts.setStyle(\"border-width\", \"1px\");\n\t        hs.addChild(UI.h3(\"Please type your example here:\"));\n\t        hs.addChild(ts);\n\t        if (code == 'jsexample') {\n\t            var b = UI.button(\"Generate JSON schema\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n\t                try {\n\t                    var rs = generateSchema(_this.jsexample, \"application/json\");\n\t                    _this.jsschema = rs;\n\t                    tf.setSelectedIndex(1);\n\t                }\n\t                catch (e) {\n\t                    _this.jsschema = e.message;\n\t                    tf.setSelectedIndex(1);\n\t                }\n\t            });\n\t            hs.addChild(b.margin(5, 5, 5, 5));\n\t        }\n\t        // if (code == 'xmlexample') {\n\t        //     var b = UI.button(\"Generate JSON example\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, x=> {\n\t        //         try {\n\t        //             var rs = xmlutil(this.xmlexample)\n\t        //             this.jsexample = JSON.stringify(rs, null, 2);\n\t        //             tf.setSelectedIndex(0)\n\t        //         }\n\t        //         catch (e) {\n\t        //             this.jsexample = e.message;\n\t        //             tf.setSelectedIndex(0)\n\t        //         }\n\t        //     });\n\t        //     hs.addChild(b.margin(5, 5, 5, 5));\n\t        // }\n\t        tf.add(caption, null, hs);\n\t    };\n\t    FillBodyDialog.prototype.onOk = function (zz) {\n\t        this.resolve({\n\t            name: this.name,\n\t            needJSON: this.needJSON,\n\t            needXML: this.needXML,\n\t            jsexample: this.jsexample,\n\t            xmlexample: this.xmlexample,\n\t            jsschema: this.jsschema,\n\t            xmlschema: this.xmlschema,\n\t        });\n\t    };\n\t    FillBodyDialog.prototype.getResult = function () {\n\t        return this.resultPromise;\n\t    };\n\t    return FillBodyDialog;\n\t}());\n\tfunction run() {\n\t    var dialog = new FillBodyDialog();\n\t    dialog.show();\n\t    return dialog.getResult();\n\t}\n\texports.run = run;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _dialogPanels = [];\n\tvar mdp = null;\n\tfunction _dialog(panel, onDone, toFocus, stretch) {\n\t    if (stretch === void 0) { stretch = false; }\n\t    return _dialog2(panel, [\n\t        { name: \"Ok\", isPrimary: true, highlight: UI.ButtonHighlights.PRIMARY, action: onDone },\n\t        { name: \"Cancel\", highlight: UI.ButtonHighlights.NO_HIGHLIGHT, action: function () { return true; } }\n\t    ], toFocus, stretch);\n\t}\n\tfunction _dialog2(panel, actions, toFocus, stretch) {\n\t    if (stretch === void 0) { stretch = false; }\n\t    var buttonBar = UI.hc().setPercentWidth(100);\n\t    actions.reverse().forEach(function (a) {\n\t        var button = UI.button(a.name, UI.ButtonSizes.NORMAL, a.highlight, UI.Icon.NONE, function (x) { if (a.action())\n\t            _closeDialog(); });\n\t        if (a.isPrimary) {\n\t            var st = panel.getBinding().status();\n\t            if (st) {\n\t                if (st.code == UI.StatusCode.ERROR) {\n\t                    button.setDisabled(true);\n\t                }\n\t            }\n\t            panel.getBinding().addStatusListener(function (x) {\n\t                var st = panel.getBinding().status();\n\t                if (st) {\n\t                    if (st.code != UI.StatusCode.ERROR) {\n\t                        button.setDisabled(false);\n\t                    }\n\t                    else {\n\t                        button.setDisabled(true);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        button.setStyle(\"float\", \"right\")\n\t            .margin(4, 10);\n\t        buttonBar.addChild(button);\n\t    });\n\t    panel.addChild(buttonBar);\n\t    var ui = panel.ui();\n\t    return function (e) {\n\t        _dialogPanels.push(panel);\n\t        var eventListener = function () {\n\t            if (!stretch) {\n\t                return;\n\t            }\n\t            var parent = ui.parentElement;\n\t            var height = document.body.clientHeight;\n\t            if (!parent) {\n\t                return;\n\t            }\n\t            var style = window.getComputedStyle(parent);\n\t            [\"paddingBottom\", \"paddingTop\", \"marginBottom\", \"marginTop\"].forEach(function (property) {\n\t                height -= parseFloat(style[property] || 0);\n\t            });\n\t            ui.style.height = height + \"px\";\n\t            ui.style.overflowY = \"scroll\";\n\t        };\n\t        window.addEventListener('resize', eventListener);\n\t        mdp = IDE.workspace.addModalPanel({ item: ui });\n\t        mdp.onDidDestroy(function () {\n\t            window.removeEventListener('resize', eventListener);\n\t        });\n\t        eventListener();\n\t        if (toFocus)\n\t            toFocus.ui().focus();\n\t    };\n\t}\n\tfunction _closeDialog() {\n\t    _dialogPanels.pop();\n\t    if (_dialogPanels.length == 0)\n\t        mdp.destroy();\n\t    else\n\t        mdp = IDE.workspace.addModalPanel({ item: _dialogPanels[_dialogPanels.length - 1].ui() });\n\t}\n\tfunction newMethod(inputState, method) {\n\t    var mdesc = inputState.methodDescriptions;\n\t    var cdesc = inputState.statusCodeDescriptions;\n\t    var NO_RESPONCE = \"No response\";\n\t    var NO_RESPONCE_BT = \"No response body type\";\n\t    var code = null, bodyType = null;\n\t    if (method == null)\n\t        method = \"get\";\n\t    var mdescLabel = new UI.LabelField();\n\t    var cdescLabel = new UI.LabelField();\n\t    [mdescLabel, cdescLabel].forEach(function (x) { return x.addClass('wizard-description'); });\n\t    mdescLabel.getActualField().margin(0, 0, 18, 8);\n\t    cdescLabel.getActualField().margin(0, 0, 8, 8);\n\t    var methodSelect = new UI.SelectField(\"Method:\", function (e, v) {\n\t        method = v;\n\t        mdescLabel.setText(\"Method \" + v + \" \" + mdesc[v]);\n\t    }, null);\n\t    methodSelect.getActualField().setOptions(Object.keys(mdesc));\n\t    methodSelect.getActualField().setValue(method, true);\n\t    var responseSelect = new UI.SelectField(\"Status code:\", function (e, v) {\n\t        if (v == NO_RESPONCE) {\n\t            v = null;\n\t            responseTypeSelect.getActualField().setValue(NO_RESPONCE_BT);\n\t        }\n\t        code = v;\n\t        responseTypeSelect.setDisabled(v == null);\n\t        cdescLabel.setText(v ? \"Status code \" + v + \" \" + cdesc[v] : '');\n\t    }, null);\n\t    responseSelect.getActualField().setOptions([NO_RESPONCE].concat(Object.keys(cdesc)));\n\t    var responseTypeSelect = new UI.SelectField(\"Generate default response with media type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT) {\n\t            v = null;\n\t            typeOfValue.setDisabled(true);\n\t        }\n\t        else\n\t            typeOfValue.setDisabled(false);\n\t        bodyType = v;\n\t    }, null);\n\t    responseTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n\t    responseTypeSelect.setDisabled(true);\n\t    responseTypeSelect.margin(0, 0, 0, 12);\n\t    var realBodyType = null;\n\t    var bodyTypeSelect = new UI.SelectField(\"Generate default body with media type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT) {\n\t            v = null;\n\t            bodyTypeOfValue.setDisabled(true);\n\t        }\n\t        else\n\t            bodyTypeOfValue.setDisabled(false);\n\t        realBodyType = v;\n\t    }, null);\n\t    bodyTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n\t    bodyTypeSelect.margin(0, 0, 0, 12);\n\t    var actualType = null;\n\t    var bodyTypeString = null;\n\t    var typeOfValue = new UI.SelectField(\"Generate default response body with type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT)\n\t            v = null;\n\t        actualType = v;\n\t    }, null);\n\t    typeOfValue.setDisabled(true);\n\t    typeOfValue.margin(0, 0, 0, 12);\n\t    var __ret = inputState.typeValues;\n\t    var isSchema = __ret.isSchema;\n\t    var types = __ret.types;\n\t    if (types) {\n\t        types = [\"\"].concat(types);\n\t        typeOfValue.getActualField().setOptions(types);\n\t    }\n\t    var bodyTypeOfValue = new UI.SelectField(\"Generate default body with type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT)\n\t            v = null;\n\t        bodyTypeString = v;\n\t    }, null);\n\t    bodyTypeOfValue.setDisabled(true);\n\t    bodyTypeOfValue.margin(0, 0, 0, 12);\n\t    var isSchema = __ret.isSchema;\n\t    var types = __ret.types;\n\t    if (types) {\n\t        types = [\"\"].concat(types);\n\t        bodyTypeOfValue.getActualField().setOptions(types);\n\t    }\n\t    var responseSection = UI.section(\"\");\n\t    responseSection.addChild(UI.h3(\"Body\"));\n\t    responseSection.addChild(bodyTypeSelect);\n\t    responseSection.addChild(bodyTypeOfValue);\n\t    responseSection.addChild(UI.h3(\"Response\"));\n\t    responseSection.addChild(responseSelect);\n\t    responseSection.addChild(cdescLabel);\n\t    responseSection.addChild(responseTypeSelect);\n\t    responseSection.addChild(typeOfValue);\n\t    responseSection.ui();\n\t    var panel = UI.section(\"Creating a new method\", UI.Icon.CODE, false, false, methodSelect, mdescLabel, responseSection);\n\t    var __ret = inputState.typeValues;\n\t    //panel.addChild(typeOfValue)\n\t    var savedResolve;\n\t    var savedReject;\n\t    var resultPromise = new Promise(function (resolve, reject) {\n\t        savedResolve = resolve;\n\t        savedReject = reject;\n\t    });\n\t    _dialog(panel, function () {\n\t        savedResolve({\n\t            method: method,\n\t            realBodyType: realBodyType,\n\t            code: code,\n\t            bodyTypeString: bodyTypeString,\n\t            bodyType: bodyType,\n\t            actualType: actualType,\n\t            isSchema: isSchema\n\t        });\n\t        return true;\n\t    })(this);\n\t    return resultPromise;\n\t}\n\texports.newMethod = newMethod;\n\tfunction run(inputState) {\n\t    return newMethod(inputState);\n\t}\n\texports.run = run;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction run(initialState) {\n\t    if (initialState.isParentNull) {\n\t        return Promise.resolve({\n\t            canceled: true\n\t        });\n\t    }\n\t    var changes = {};\n\t    var item = UIBuilder.buildItem(initialState.detailsTree, {\n\t        uri: \"localchanges\",\n\t        position: -1,\n\t        reconciler: {\n\t            schedule: function (runnable) { return runnable.run(); }\n\t        },\n\t        localModel: changes\n\t    });\n\t    item.setTitle(initialState.title);\n\t    var panel = item.render({\n\t        showDescription: true\n\t    });\n\t    panel.margin(8, 8, 8, 8);\n\t    return new Promise(function (resolve) {\n\t        UI.simpleModalDialog(panel, function () {\n\t            resolve(changes);\n\t            return true;\n\t        }, function () {\n\t            resolve({\n\t                canceled: true\n\t            });\n\t            return true;\n\t        });\n\t    });\n\t}\n\texports.run = run;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLGFBQW9CLFlBQVk7SUFDNUIsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDbkIsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztJQUV0QixJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7UUFDckQsR0FBRyxFQUFFLGNBQWM7UUFDbkIsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNaLFVBQVUsRUFBRTtZQUNSLFFBQVEsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBZCxDQUFjO1NBQ3ZDO1FBQ0QsVUFBVSxFQUFFLE9BQU87S0FDdEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwQixlQUFlLEVBQUUsSUFBSTtLQUN4QixDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDdkIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQUU7WUFDQyxPQUFPLENBQUM7Z0JBQ0osUUFBUSxFQUFFLElBQUk7YUFDakIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQXZDRCxrQkF1Q0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvbnMvc2ltcGxlQWN0aW9uL3VpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpYlVJTW9kdWxlID0gcmVxdWlyZShcImF0b20tdWktbGliXCIpXG5cbmRlY2xhcmUgbGV0IFVJOiBhbnk7XG5kZWNsYXJlIGxldCBJREU6IGFueTtcbmRlY2xhcmUgbGV0IFVJQnVpbGRlcjogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuKGluaXRpYWxTdGF0ZSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYoaW5pdGlhbFN0YXRlLmlzUGFyZW50TnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB2YXIgY2hhbmdlczogYW55ID0ge307XG5cbiAgICB2YXIgaXRlbSA9IFVJQnVpbGRlci5idWlsZEl0ZW0oaW5pdGlhbFN0YXRlLmRldGFpbHNUcmVlLCB7XG4gICAgICAgIHVyaTogXCJsb2NhbGNoYW5nZXNcIixcbiAgICAgICAgcG9zaXRpb246IC0xLFxuICAgICAgICByZWNvbmNpbGVyOiB7XG4gICAgICAgICAgICBzY2hlZHVsZTogcnVubmFibGUgPT4gcnVubmFibGUucnVuKClcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYWxNb2RlbDogY2hhbmdlc1xuICAgIH0pO1xuXG4gICAgaXRlbS5zZXRUaXRsZShpbml0aWFsU3RhdGUudGl0bGUpO1xuXG4gICAgdmFyIHBhbmVsID0gaXRlbS5yZW5kZXIoe1xuICAgICAgICBzaG93RGVzY3JpcHRpb246IHRydWVcbiAgICB9KTtcblxuICAgIHBhbmVsLm1hcmdpbig4LCA4LCA4LCA4KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBVSS5zaW1wbGVNb2RhbERpYWxvZyhwYW5lbCwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShjaGFuZ2VzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSJdfQ==\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom-package-deps\");\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// main.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2bdb529e7aa78df1527a","\"use strict\";\n/// <reference path=\"../../typings/main.d.ts\" />\nvar editorTools = require(\"./editor-tools/editor-tools\");\nvar quickCommands = require(\"./quick-commands/quick-commands\");\nvar provider = require(\"./suggestion/provider\");\nvar decl = require(\"./dialogs/assist-utils\");\nvar linterUI = require(\"./core/linter-ui\");\nvar patchElements = require(\"./core/patchElements\");\nvar CompositeDisposable = require('atom').CompositeDisposable;\n// import sharedASTInitializer = require(\"./shared-ast-initializer\")\nvar commandManager = require(\"./quick-commands/command-manager\");\nvar contextMenu = require(\"./context-menu/contextMenu\");\n// import quickFixActions = require(\"./context-menu/quickFix\")\n// import actions = require(\"./context-menu/actions\")\nvar contextMenuImpl = require(\"./context-menu/contextMenuImpl\");\nvar package_entry_point;\n(function (package_entry_point) {\n    var subscriptions = new CompositeDisposable();\n    function activate(state) {\n        require('atom-package-deps').install('api-workbench', true)\n            .then(function () {\n            subscriptions.add(atom.commands.add('atom-workspace', {\n                /*'api-workbench:popular-apis': apiList.showPopularApis,*/\n                'api-workbench:editor-tools': editorTools.initEditorTools,\n                /*'api-workbench:console': Console.toggle,*/\n                'api-workbench:go-to-definition': decl.gotoDeclaration,\n                'api-workbench:find-usages': decl.findUsages,\n                /*'api-workbench:quick-outline':quickOutline.show,\n                'api-workbench:quick-commands': quickCommands.showCommands,*/\n                'api-workbench:rename': decl.renameRAMLElement,\n                'api-workbench:new-project': decl.newProject,\n            }));\n            //subscriptions.add(atom.workspace.addOpener(Console.opener))\n            ////subscriptions.add(atom.workspace.addOpener(RamlScriptReport.opener))\n            patchElements.doPatch();\n            commandManager.initialize();\n            contextMenu.initialize();\n            // sharedASTInitializer.initialize()\n            quickCommands.registerCommands();\n            // quickFixActions.initialize()\n            // actions.register();\n            editorTools.initEditorTools();\n            contextMenuImpl.initializeActionBasedMenu('atom-text-editor[data-grammar=\"source raml\"],.raml-outline');\n        });\n    }\n    package_entry_point.activate = activate;\n    function getProvider() {\n        return provider;\n    }\n    package_entry_point.getProvider = getProvider;\n    function provideLinter() {\n        return linterUI;\n    }\n    package_entry_point.provideLinter = provideLinter;\n    function consumeLinter(linterApi) {\n        subscriptions.add(linterUI.initEditorObservers(linterApi));\n    }\n    package_entry_point.consumeLinter = consumeLinter;\n    function deactivate() {\n        subscriptions.dispose();\n    }\n    package_entry_point.deactivate = deactivate;\n    package_entry_point.config = {\n        grammars: {\n            type: 'array',\n            default: [\n                'source.raml'\n            ]\n        },\n        openConsoleInSplitPane: {\n            type: 'boolean',\n            default: true\n        }\n    };\n})(package_entry_point || (package_entry_point = {}));\nmodule.exports = package_entry_point;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdEQUFnRDtBQUtoRCx5REFBeUQ7QUFDekQsK0RBQWlFO0FBQ2pFLGdEQUFnRDtBQUVoRCw2Q0FBNkM7QUFDN0MsMkNBQTJDO0FBQzNDLG9EQUFvRDtBQUNwRCxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztBQUM5RCxvRUFBb0U7QUFDcEUsaUVBQW1FO0FBQ25FLHdEQUEwRDtBQUMxRCw4REFBOEQ7QUFDOUQscURBQXFEO0FBQ3JELGdFQUFrRTtBQUVsRSxJQUFPLG1CQUFtQixDQXFFekI7QUFyRUQsV0FBTyxtQkFBbUI7SUFFdEIsSUFBSSxhQUFhLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBRTdDLGtCQUEwQixLQUFLO1FBQzNCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDO2FBQ3RELElBQUksQ0FBQztZQUNGLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ2xELDBEQUEwRDtnQkFDMUQsNEJBQTRCLEVBQUMsV0FBVyxDQUFDLGVBQWU7Z0JBQ3hELDRDQUE0QztnQkFDNUMsZ0NBQWdDLEVBQUMsSUFBSSxDQUFDLGVBQWU7Z0JBQ3JELDJCQUEyQixFQUFDLElBQUksQ0FBQyxVQUFVO2dCQUMzQzs2RUFDNkQ7Z0JBQzdELHNCQUFzQixFQUFDLElBQUksQ0FBQyxpQkFBaUI7Z0JBQzdDLDJCQUEyQixFQUFDLElBQUksQ0FBQyxVQUFVO2FBRzlDLENBQUMsQ0FBQyxDQUFBO1lBRUgsNkRBQTZEO1lBQzdELHdFQUF3RTtZQUV4RSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFeEIsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFBO1lBQzNCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUN4QixvQ0FBb0M7WUFFcEMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUE7WUFDaEMsK0JBQStCO1lBQy9CLHNCQUFzQjtZQUV0QixXQUFXLENBQUMsZUFBZSxFQUFFLENBQUE7WUFFN0IsZUFBZSxDQUFDLHlCQUF5QixDQUFDLDREQUE0RCxDQUFDLENBQUE7UUFDM0csQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBbENlLDRCQUFRLFdBa0N2QixDQUFBO0lBR0Q7UUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFGZSwrQkFBVyxjQUUxQixDQUFBO0lBRUQ7UUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFGZSxpQ0FBYSxnQkFFNUIsQ0FBQTtJQUVELHVCQUE4QixTQUFTO1FBQ25DLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUZlLGlDQUFhLGdCQUU1QixDQUFBO0lBRUQ7UUFDSSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUZlLDhCQUFVLGFBRXpCLENBQUE7SUFFVSwwQkFBTSxHQUFHO1FBQ2hCLFFBQVEsRUFBRTtZQUNOLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFO2dCQUNMLGFBQWE7YUFDaEI7U0FDSjtRQUNELHNCQUFzQixFQUFFO1lBQ3BCLElBQUksRUFBRSxTQUFTO1lBQ2YsT0FBTyxFQUFFLElBQUk7U0FDaEI7S0FDSixDQUFBO0FBQ0wsQ0FBQyxFQXJFTSxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBcUV6QjtBQUNELGlCQUFRLG1CQUFtQixDQUFBIiwiZmlsZSI6InNyYy9hdG9tL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG4vLyBpbXBvcnQgQ29uc29sZSA9IHJlcXVpcmUoJy4vY29uc29sZS9pbmRleCcpO1xuaW1wb3J0IGFwaUxpc3QgPSByZXF1aXJlKCcuL3BvcHVsYXItYXBpcy9wb3B1bGFyLWFwaXMnKTtcbmltcG9ydCBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbmltcG9ydCBlZGl0b3JUb29scz1yZXF1aXJlKCcuL2VkaXRvci10b29scy9lZGl0b3ItdG9vbHMnKVxuaW1wb3J0IHF1aWNrQ29tbWFuZHMgPSByZXF1aXJlKCcuL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzJylcbmltcG9ydCBwcm92aWRlcj1yZXF1aXJlKFwiLi9zdWdnZXN0aW9uL3Byb3ZpZGVyXCIpXG5pbXBvcnQgcXVpY2tPdXRsaW5lPXJlcXVpcmUoXCIuL3F1aWNrLW91dGxpbmUvcXVpY2stb3V0bGluZVwiKVxuaW1wb3J0IGRlY2w9cmVxdWlyZShcIi4vZGlhbG9ncy9hc3Npc3QtdXRpbHNcIilcbmltcG9ydCBsaW50ZXJVST1yZXF1aXJlKFwiLi9jb3JlL2xpbnRlci11aVwiKVxuaW1wb3J0IHBhdGNoRWxlbWVudHM9cmVxdWlyZShcIi4vY29yZS9wYXRjaEVsZW1lbnRzXCIpXG52YXIgQ29tcG9zaXRlRGlzcG9zYWJsZSA9IHJlcXVpcmUoJ2F0b20nKS5Db21wb3NpdGVEaXNwb3NhYmxlO1xuLy8gaW1wb3J0IHNoYXJlZEFTVEluaXRpYWxpemVyID0gcmVxdWlyZShcIi4vc2hhcmVkLWFzdC1pbml0aWFsaXplclwiKVxuaW1wb3J0IGNvbW1hbmRNYW5hZ2VyID0gcmVxdWlyZShcIi4vcXVpY2stY29tbWFuZHMvY29tbWFuZC1tYW5hZ2VyXCIpXG5pbXBvcnQgY29udGV4dE1lbnUgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvY29udGV4dE1lbnVcIilcbi8vIGltcG9ydCBxdWlja0ZpeEFjdGlvbnMgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvcXVpY2tGaXhcIilcbi8vIGltcG9ydCBhY3Rpb25zID0gcmVxdWlyZShcIi4vY29udGV4dC1tZW51L2FjdGlvbnNcIilcbmltcG9ydCBjb250ZXh0TWVudUltcGwgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvY29udGV4dE1lbnVJbXBsXCIpXG5cbm1vZHVsZSBwYWNrYWdlX2VudHJ5X3BvaW50IHtcblxuICAgIHZhciBzdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlIChzdGF0ZSkge1xuICAgICAgICByZXF1aXJlKCdhdG9tLXBhY2thZ2UtZGVwcycpLmluc3RhbGwoJ2FwaS13b3JrYmVuY2gnLCB0cnVlKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICAgICAgICAgICAgICAgLyonYXBpLXdvcmtiZW5jaDpwb3B1bGFyLWFwaXMnOiBhcGlMaXN0LnNob3dQb3B1bGFyQXBpcywqL1xuICAgICAgICAgICAgICAgICAgICAnYXBpLXdvcmtiZW5jaDplZGl0b3ItdG9vbHMnOmVkaXRvclRvb2xzLmluaXRFZGl0b3JUb29scyxcbiAgICAgICAgICAgICAgICAgICAgLyonYXBpLXdvcmtiZW5jaDpjb25zb2xlJzogQ29uc29sZS50b2dnbGUsKi9cbiAgICAgICAgICAgICAgICAgICAgJ2FwaS13b3JrYmVuY2g6Z28tdG8tZGVmaW5pdGlvbic6ZGVjbC5nb3RvRGVjbGFyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICdhcGktd29ya2JlbmNoOmZpbmQtdXNhZ2VzJzpkZWNsLmZpbmRVc2FnZXMsXG4gICAgICAgICAgICAgICAgICAgIC8qJ2FwaS13b3JrYmVuY2g6cXVpY2stb3V0bGluZSc6cXVpY2tPdXRsaW5lLnNob3csXG4gICAgICAgICAgICAgICAgICAgICdhcGktd29ya2JlbmNoOnF1aWNrLWNvbW1hbmRzJzogcXVpY2tDb21tYW5kcy5zaG93Q29tbWFuZHMsKi9cbiAgICAgICAgICAgICAgICAgICAgJ2FwaS13b3JrYmVuY2g6cmVuYW1lJzpkZWNsLnJlbmFtZVJBTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnYXBpLXdvcmtiZW5jaDpuZXctcHJvamVjdCc6ZGVjbC5uZXdQcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOnNlbGVjdC1ub2RlJzpkZWNsLnNlbGVjdCwqL1xuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOnJldmFsaWRhdGUnOmRlY2wucmV2YWxpZGF0ZSovXG4gICAgICAgICAgICAgICAgfSkpXG5cbiAgICAgICAgICAgICAgICAvL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihDb25zb2xlLm9wZW5lcikpXG4gICAgICAgICAgICAgICAgLy8vL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihSYW1sU2NyaXB0UmVwb3J0Lm9wZW5lcikpXG5cbiAgICAgICAgICAgICAgICBwYXRjaEVsZW1lbnRzLmRvUGF0Y2goKTtcblxuICAgICAgICAgICAgICAgIGNvbW1hbmRNYW5hZ2VyLmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIC8vIHNoYXJlZEFTVEluaXRpYWxpemVyLmluaXRpYWxpemUoKVxuXG4gICAgICAgICAgICAgICAgcXVpY2tDb21tYW5kcy5yZWdpc3RlckNvbW1hbmRzKClcbiAgICAgICAgICAgICAgICAvLyBxdWlja0ZpeEFjdGlvbnMuaW5pdGlhbGl6ZSgpXG4gICAgICAgICAgICAgICAgLy8gYWN0aW9ucy5yZWdpc3RlcigpO1xuXG4gICAgICAgICAgICAgICAgZWRpdG9yVG9vbHMuaW5pdEVkaXRvclRvb2xzKClcblxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51SW1wbC5pbml0aWFsaXplQWN0aW9uQmFzZWRNZW51KCdhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cInNvdXJjZSByYW1sXCJdLC5yYW1sLW91dGxpbmUnKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRQcm92aWRlcigpe1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVMaW50ZXIoKXtcbiAgICAgICAgcmV0dXJuIGxpbnRlclVJO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb25zdW1lTGludGVyKGxpbnRlckFwaSkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLmFkZChsaW50ZXJVSS5pbml0RWRpdG9yT2JzZXJ2ZXJzKGxpbnRlckFwaSkpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCl7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gICAgfVxuXG4gICAgZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgICAgIGdyYW1tYXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgZGVmYXVsdDogW1xuICAgICAgICAgICAgICAgICdzb3VyY2UucmFtbCdcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3BlbkNvbnNvbGVJblNwbGl0UGFuZToge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0ID1wYWNrYWdlX2VudHJ5X3BvaW50XG4iXX0=\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/main.js\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar path = require(\"path\");\nvar atom = require(\"../core/atomWrapper\");\nvar detailsView = require(\"./details-view\");\nvar outlineView = require(\"./outline-view\");\nvar ramlServer = require(\"raml-language-server\");\nvar markOccurrences = require(\"../core/markOccurences\");\nvar _bmc = 0;\nfunction benchmark(func) {\n    var t0 = new Date().getTime();\n    if (_bmc != 0 && func)\n        console.log(func + \" took \" + (t0 - _bmc) + \" miliseconds.\");\n    _bmc = t0;\n}\nvar EditorManager = /** @class */ (function () {\n    function EditorManager(display) {\n        if (display === void 0) { display = true; }\n        var _this = this;\n        this._initialized = false;\n        this.opened = false;\n        this.updateCount = 0;\n        this.outlineCount = 0;\n        this._cleanOutline = false;\n        this.performanceDebug = true;\n        this.fire = true;\n        this.placeholder = false;\n        manager = window[\"manager\"] = this;\n        this.markOccurrencesReconciler = new ramlServer.Reconciler(ramlServer.getNodeClientConnection(), 200);\n        atom.workspace.onDidChangeActivePaneItem(function (e) { return _this.updateEverything(display); });\n        atom.workspace.observeTextEditors(function (editor) {\n            editor.onDidDestroy(function () {\n                var path = editor.getPath();\n                ramlServer.getNodeClientConnection().documentClosed(path);\n            });\n            editor.onDidChangeCursorPosition(function (event) { return _this.cursorChanged(editor, event.newBufferPosition); });\n        });\n        this.updateEverything(display);\n        this.addAutoCloseListener();\n        this.addListenersForStructure();\n    }\n    EditorManager.prototype.getPath = function () {\n        console.log(\"ETM::GetPath\");\n        return this.currentEditor ? this.currentEditor.getPath() : null;\n    };\n    EditorManager.prototype.getCurrentEditor = function () { return this.currentEditor; };\n    EditorManager.prototype.getCurrentPosition = function () {\n        return this.currentPosition;\n    };\n    EditorManager.prototype.cursorChanged = function (editor, newBufferPosition) {\n        markOccurrences.clearOccurences(editor);\n        this.markOccurrencesReconciler.schedule(new markOccurrences.MarkOccurrenceRunnable(editor, newBufferPosition));\n        var buffer = editor.getBuffer();\n        var pos = buffer.characterIndexForPosition(editor.getCursorBufferPosition());\n        ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, pos);\n        this.currentPosition = pos;\n    };\n    EditorManager.prototype.internalScheduleUpdateViews = function (count) {\n        var _this = this;\n        this.updateCount = count;\n        setTimeout(function () {\n            if (_this.updateCount == count) {\n                _this.updateViews();\n            }\n        }, 500);\n    };\n    EditorManager.prototype.scheduleViewsUpdate = function () {\n        if (this.fire) {\n            this.internalScheduleUpdateViews(this.updateCount + 1);\n        }\n    };\n    EditorManager.prototype.internalScheduleOutlineUpdate = function (count) {\n        var _this = this;\n        this.outlineCount = count;\n        setTimeout(function () {\n            if (_this.outlineCount == count) {\n                _this.updateOutline();\n            }\n        }, 500);\n    };\n    EditorManager.prototype.scheduleOutlineUpdate = function () {\n        this.internalScheduleOutlineUpdate(this.outlineCount + 1);\n    };\n    EditorManager.prototype.addAutoCloseListener = function () {\n        var _this = this;\n        atom.workspace.onDidDestroyPane(function (evt) {\n            try {\n                var edcount = atom.workspace.getPaneItems().filter(function (e) {\n                    return e['softTabs'] != undefined;\n                }).length;\n                if (edcount == 0) {\n                    // this.ast=null;\n                    // this.unit=null;\n                    // this._currentNode=null;\n                    _this.currentEditor = null;\n                    if (global.cleanCache) {\n                        global.cleanCache();\n                    }\n                    if (atom.workspace.paneForItem(_this._view))\n                        atom.workspace.paneForItem(_this._view).destroy();\n                    if (atom.workspace.paneForItem(_this._details))\n                        atom.workspace.paneForItem(_this._details).destroy();\n                    _this.opened = false;\n                }\n            }\n            catch (e) {\n                //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n                console.log(e);\n            }\n        });\n    };\n    EditorManager.prototype.getOrCreateView = function () {\n        if (!this._view) {\n            this._view = new outlineView.RamlOutline();\n            if (this.unitPath) {\n                this._view.setUnit(this.unitPath);\n            }\n            // if (this.ast){\n            //     this._view.setUnit(this.ast);\n            // }\n        }\n        return this._view;\n    };\n    EditorManager.prototype.getDetails = function () {\n        if (!EditorManager.DETAILS_SUPPORT)\n            return null;\n        if (!this._details)\n            this._details = new detailsView.RamlDetails();\n        return this._details;\n    };\n    EditorManager.prototype.updateDetails = function () {\n        this.getDetails().update();\n    };\n    EditorManager.prototype.reparseAST = function () {\n        if (this.currentEditor) {\n            var _path = this.currentEditor.getPath();\n            var bf = this.currentEditor.getBuffer();\n            this.unitPath = _path;\n            // var prj = project.createProject(path.dirname(_path));\n            // var unit = prj.setCachedUnitContent(path.basename(_path), this.currentEditor.getBuffer().getText());\n            //\n            // unit.project().addTextChangeListener(delta=>{\n            //     if (delta.unit!=unit){\n            //         return;\n            //     }\n            //     var cm=delta.offset;\n            //     var end=delta.replacementLength;\n            //     var text=delta.text;\n            //     var buffer=(<atom.IBuffer>this.currentEditor.getBuffer());\n            //     var start=buffer.positionForCharacterIndex(cm);\n            //     var endPosition=buffer.positionForCharacterIndex(cm+end);\n            //     try {\n            //         this.fire=false;\n            //         (<any>buffer).setTextInRange({start: start, end: endPosition}, text);\n            //         this.scheduleOutlineUpdate();\n            //     } finally{\n            //         this.fire=true;\n            //     }\n            // });\n            // this.ast = unit.highLevel();\n            // this.unit = unit;\n        }\n    };\n    EditorManager.prototype.isETPane = function (pane) {\n        if (!this._view) {\n            return;\n        }\n        var items = pane.getItems();\n        return ((EditorManager.DETAILS_SUPPORT && items.indexOf(this.getDetails()) >= 0)\n            || items.indexOf(this._view) >= 0);\n    };\n    EditorManager.prototype.display = function () {\n        console.log(\"ETM::Display\");\n        var aw = atom.workspace;\n        var fpane = atom.workspace.paneForItem(this.getCurrentEditor());\n        if (!fpane)\n            return;\n        if (!aw.paneForItem(this.getOrCreateView()))\n            doSplit(this.getOrCreateView());\n        if (EditorManager.DETAILS_SUPPORT) {\n            if (!aw.paneForItem(manager.getDetails()))\n                doSplit(this.getDetails(), SplitDirections.BOTTOM);\n        }\n        this.opened = true;\n    };\n    // updateText(node?: ll.ILowLevelASTNode) {\n    //     this.fire = false;\n    //     var editor = this.currentEditor;\n    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n    //     editor.setText(this.unit.contents());\n    //     this.fire = true;\n    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n    // }\n    // selectNode(hnode: hl.IHighLevelNode) {\n    //     var node = hnode.lowLevel();\n    //     if (!node) return;\n    //     var editor = this.currentEditor;\n    //     if (!editor) return;\n    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n    // }\n    EditorManager.prototype.setViewsDisplayStyle = function (visible) {\n        if (this._details && this._details.element) {\n            this._details.element.style.display = visible ? null : \"none\";\n        }\n        if (this._view && this._view.element) {\n            this._view.element.style.display = visible ? null : \"none\";\n        }\n    };\n    EditorManager.prototype.isRaml = function (editor) {\n        if (!editor) {\n            return false;\n        }\n        var editorPath = editor.getPath();\n        if (!editorPath) {\n            return false;\n        }\n        var extName = path.extname(editorPath);\n        if (extName !== '.raml') {\n            return false;\n        }\n        return true;\n    };\n    EditorManager.prototype.updateEverything = function (display) {\n        if (display === void 0) { display = true; }\n        var editor = atom.workspace.getActiveTextEditor();\n        if (editor) {\n            this.setViewsDisplayStyle(this.isRaml(editor));\n        }\n        if (!editor || editor == this.currentEditor || !this.isRaml(editor)) {\n            return;\n        }\n        this.currentEditor = editor;\n        if (this.opened == false && display)\n            this.display();\n        //we are not listening to the editor changes any more,\n        //instead we are listening to the reports of the server that something is avilable, like the structure\n        if (!editor.patched) {\n            this.addListenersToEditor(editor);\n        }\n        this.reparseAST();\n        var pos = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());\n        this.positionUpdated(pos);\n        this.scheduleViewsUpdate();\n    };\n    EditorManager.prototype.addListenersToEditor = function (cedit) {\n        var _this = this;\n        var buffer = cedit.getBuffer();\n        buffer.onDidChange(function (x) {\n            try {\n                //this.reparseAST();\n                var pos = buffer.characterIndexForPosition(cedit.getCursorBufferPosition());\n                _this.positionUpdated(pos);\n                //this.scheduleViewsUpdate();\n            }\n            catch (e) {\n                console.log(e);\n            }\n        });\n        //updating ast node on position change\n        // cedit.getLastCursor().onDidChangePosition(x=> {\n        //     if (!this.fire) return;\n        //     this.positionUpdated(buffer.characterIndexForPosition(cedit.getCursorBufferPosition()));\n        //     this.scheduleViewsUpdate();\n        // });\n        this.addListenersOnMove(cedit);\n        this.currentEditor.patched = true;\n    };\n    EditorManager.prototype.addListenersForStructure = function () {\n        var _this = this;\n        ramlServer.getNodeClientConnection().onStructureReport(function (report) {\n            var categoryNames = [];\n            for (var categoryName in report.structure)\n                categoryNames.push(categoryName);\n            var categoryNamesString = categoryNames.join();\n            ramlServer.getNodeClientConnection().debug(\"Got new structure report with categories \"\n                + categoryNamesString, \"EditorManager\", \"addListenersForStructure\");\n            var editor = atom.workspace.getActiveTextEditor();\n            if (!editor || !_this.isRaml(editor)) {\n                return;\n            }\n            _this.updateOutline();\n        });\n    };\n    EditorManager.prototype.addListenersOnMove = function (cedit) {\n        var _this = this;\n        var movingPane = false;\n        atom.workspace.onDidAddPaneItem(function (event) {\n            if (movingPane || _this.isETPane(event.pane) == false || event.item == _this.getOrCreateView() || (EditorManager.DETAILS_SUPPORT && event.item == _this.getDetails()))\n                return event;\n            setTimeout(function () {\n                try {\n                    var fpane = atom.workspace.paneForItem(cedit);\n                    if (fpane) {\n                        movingPane = true;\n                        event.pane.moveItemToPane(event.item, fpane, null);\n                        movingPane = false;\n                        fpane.setActiveItem(event.item);\n                        fpane.activate();\n                    }\n                }\n                catch (e) {\n                    //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n                    console.log(e);\n                }\n            }, 18);\n        });\n    };\n    // _currentNode: hl.IHighLevelNode;\n    // //_selectedNode: hl.IHighLevelNode;\n    // patchCurrentNode(n:hl.IHighLevelNode){\n    //     this._currentNode=n;\n    // }\n    //\n    // getCurrentNode() {\n    //     if (this._currentNode == null) return this._currentNode = this.ast;\n    //     else return this._currentNode;\n    // }\n    // setSelectedNode(node: hl.IHighLevelNode) {\n    //     //this._selectedNode = node;\n    //\n    //     if (this.unit){\n    //         var unitPath=this.unit.absolutePath();\n    //         while (node.lowLevel().unit().absolutePath()!=unitPath){\n    //             if (!node.parent()){\n    //                 break;\n    //             }\n    //             else{\n    //                 node=node.parent();\n    //             }\n    //         }\n    //     }\n    //     var id=node.id();\n    //     var anode=this.ast.findById(id);\n    //     if (anode){\n    //         node=anode;\n    //     }\n    //     if (this._details){\n    //         this._details.show(node);\n    //     }\n    //     var editor = this.getCurrentEditor();\n    //     if (editor) {\n    //         this.fire=false;\n    //         try {\n    //             var buffer = editor.getBuffer();\n    //             var posStart = buffer.positionForCharacterIndex(node.lowLevel().start());\n    //             var posEnd = buffer.positionForCharacterIndex(node.lowLevel().end());\n    //             editor.setCursorBufferPosition(posStart);\n    //             this.positionUpdated(buffer.characterIndexForPosition(editor.getCursorBufferPosition()));\n    //         }finally{\n    //             this.fire=true;\n    //         }\n    //     }\n    // }\n    // getSelectedNode() {\n    //     return this.getCurrentNode()\n    //     //else return this._selectedNode;\n    // }\n    EditorManager.prototype.setText = function (text) {\n        console.log(\"ETM::SetText\");\n        var editor = this.currentEditor;\n        if (editor == null)\n            return;\n        editor.setText(text);\n    };\n    EditorManager.prototype.isFromEdgeRow = function () {\n        var editor = this.getCurrentEditor();\n        if (!editor) {\n            return false;\n        }\n        var currentPosition = editor.getCursorBufferPosition();\n        if (!currentPosition) {\n            return false;\n        }\n        var currentRow = currentPosition.row;\n        var previousRow = editor.previousRow;\n        editor.previousRow = currentRow;\n        if (previousRow === undefined) {\n            return false;\n        }\n        if (previousRow === currentRow) {\n            return false;\n        }\n        if (previousRow === editor.getBuffer().getLastRow() || previousRow === 0) {\n            return true;\n        }\n    };\n    EditorManager.prototype.updateViews = function () {\n        //var cNode = this.getCurrentNode();\n        var ds = new Date().getMilliseconds();\n        if (EditorManager.DETAILS_SUPPORT && this._details) {\n            this.getDetails().show(manager.unitPath, manager.currentPosition, this.isFromEdgeRow());\n        }\n        if (this._view) {\n            this.getOrCreateView().setUnit(manager.unitPath);\n            // this.getOrCreateView().setUnit(manager.ast);\n            //this.getOrCreateView().setSelection(cNode);\n        }\n        var d1 = new Date().getMilliseconds();\n        if (this.performanceDebug) {\n            console.log(\"Views update:\" + (d1 - ds));\n        }\n    };\n    EditorManager.prototype.updateOutline = function () {\n        ramlServer.getNodeClientConnection().debug(\"Updating outline\", \"EditorManager\", \"updateOutline\");\n        if (this._view) {\n            this.getOrCreateView().setUnit(manager.unitPath);\n        }\n    };\n    EditorManager.prototype.positionUpdated = function (newPosition) {\n        this.currentPosition = newPosition;\n        if (this._details) {\n            ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, this.currentPosition);\n            // this.getDetails().show(manager.unitPath, this.currentPosition, this.isFromEdgeRow());\n        }\n        // if (this.ast){\n        //     this._currentNode=this.ast.findElementAtOffset(this.currentPosition);\n        // }\n    };\n    EditorManager.DETAILS_SUPPORT = true;\n    return EditorManager;\n}());\nvar manager = null;\nfunction initEditorTools(display) {\n    if (display === void 0) { display = true; }\n    if (manager == null)\n        manager = new EditorManager(display);\n    else if (display)\n        manager.display();\n}\nexports.initEditorTools = initEditorTools;\nfunction editorToolsStatus() {\n    return manager != null && manager.opened;\n}\nexports.editorToolsStatus = editorToolsStatus;\nfunction aquireManager() {\n    if (!manager) {\n        manager = new EditorManager(true);\n    }\n    return manager;\n}\nexports.aquireManager = aquireManager;\n// export function updateAndSelect(node:hl.IHighLevelNode){\n//     if (aquireManager()._view) {\n//         aquireManager()._view.refresh();\n//     }\n//     aquireManager().updateText();\n//     aquireManager().selectNode(node);\n// }\nvar SplitDirections;\n(function (SplitDirections) {\n    SplitDirections[SplitDirections[\"RIGHT\"] = 0] = \"RIGHT\";\n    SplitDirections[SplitDirections[\"LEFT\"] = 1] = \"LEFT\";\n    SplitDirections[SplitDirections[\"TOP\"] = 2] = \"TOP\";\n    SplitDirections[SplitDirections[\"BOTTOM\"] = 3] = \"BOTTOM\";\n})(SplitDirections = exports.SplitDirections || (exports.SplitDirections = {}));\nfunction doSplit(value, dir) {\n    if (dir === void 0) { dir = SplitDirections.RIGHT; }\n    var newPane = null;\n    switch (dir) {\n        case SplitDirections.BOTTOM:\n            newPane = atom.workspace.getActivePane().splitDown({});\n            break;\n        case SplitDirections.TOP:\n            newPane = atom.workspace.getActivePane().splitUp({});\n            break;\n        case SplitDirections.LEFT:\n            newPane = atom.workspace.getActivePane().splitLeft({});\n            break;\n        case SplitDirections.RIGHT:\n            newPane = atom.workspace.getActivePane().splitRight({});\n            break;\n    }\n    newPane.addItem(value);\n    return newPane;\n}\nexports.doSplit = doSplit;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2VkaXRvci10b29scy9lZGl0b3ItdG9vbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQsMkJBQTJCO0FBRzNCLDBDQUE2QztBQU83Qyw0Q0FBNEM7QUFDNUMsNENBQTRDO0FBRTVDLGlEQUFvRDtBQUNwRCx3REFBMEQ7QUFFMUQsSUFBSSxJQUFJLEdBQVksQ0FBQyxDQUFDO0FBQ3RCLG1CQUFtQixJQUFhO0lBQzVCLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDO0lBRS9ELElBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxDQUFDO0FBbUJEO0lBdUNJLHVCQUFZLE9BQXVCO1FBQXZCLHdCQUFBLEVBQUEsY0FBdUI7UUFBbkMsaUJBc0JDO1FBL0NPLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBSXRDLFdBQU0sR0FBWSxLQUFLLENBQUM7UUFJaEIsZ0JBQVcsR0FBUyxDQUFDLENBQUM7UUFFdEIsaUJBQVksR0FBUyxDQUFDLENBQUM7UUFFL0Isa0JBQWEsR0FBQyxLQUFLLENBQUM7UUFFcEIscUJBQWdCLEdBQUMsSUFBSSxDQUFDO1FBOEx0QixTQUFJLEdBQVksSUFBSSxDQUFDO1FBcVJyQixnQkFBVyxHQUFZLEtBQUssQ0FBQztRQXZjekIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7UUFFbkMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0RyxJQUFJLENB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Q3ZCLE9BQU8sR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNyRCxLQUFLLENBQUM7UUFDVixLQUFLLGVBQWUsQ0FBQyxHQUFHO1lBQ3BCLE9BQU8sR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNuRCxLQUFLLENBQUM7UUFDVixLQUFLLGVBQWUsQ0FBQyxJQUFJO1lBQ3JCLE9BQU8sR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNyRCxLQUFLLENBQUM7UUFDVixLQUFLLGVBQWUsQ0FBQyxLQUFLO1lBQ3RCLE9BQU8sR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RCxLQUFLLENBQUM7SUFDZCxDQUFDO0lBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ25CLENBQUM7QUFsQkQsMEJBa0JDIiwiZmlsZSI6InNyYy9hdG9tL2VkaXRvci10b29scy9lZGl0b3ItdG9vbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuaW1wb3J0IHBhdGg9cmVxdWlyZSgncGF0aCcpXG5pbXBvcnQgRGlzcG9zYWJsZSA9IFVJLklEaXNwb3NhYmxlXG5pbXBvcnQgQ29tcG9zaXRlRGlzcG9zYWJsZSA9IFVJLkNvbXBvc2l0ZURpc3Bvc2FibGVcbmltcG9ydCBhdG9tID0gcmVxdWlyZSgnLi4vY29yZS9hdG9tV3JhcHBlcicpO1xuLy8gaW1wb3J0IHJwPXJlcXVpcmUoXCJyYW1sLTEtcGFyc2VyXCIpXG4vLyBpbXBvcnQgaGw9cnAuaGw7XG4vLyBpbXBvcnQgbGw9cnAubGw7XG4vLyBpbXBvcnQgcHJvamVjdD1ycC5wcm9qZWN0O1xuaW1wb3J0IF89cmVxdWlyZShcInVuZGVyc2NvcmVcIilcbmltcG9ydCBwYWlyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvcGFpclwiKTtcbmltcG9ydCBkZXRhaWxzVmlldz1yZXF1aXJlKFwiLi9kZXRhaWxzLXZpZXdcIilcbmltcG9ydCBvdXRsaW5lVmlldz1yZXF1aXJlKFwiLi9vdXRsaW5lLXZpZXdcIilcbmltcG9ydCBVST1yZXF1aXJlKFwiYXRvbS11aS1saWJcIilcbmltcG9ydCByYW1sU2VydmVyID0gcmVxdWlyZShcInJhbWwtbGFuZ3VhZ2Utc2VydmVyXCIpO1xuaW1wb3J0IG1hcmtPY2N1cnJlbmNlcyA9IHJlcXVpcmUoXCIuLi9jb3JlL21hcmtPY2N1cmVuY2VzXCIpXG5cbnZhciBfYm1jIDogbnVtYmVyID0gMDtcbmZ1bmN0aW9uIGJlbmNobWFyayhmdW5jPzogc3RyaW5nKTogdm9pZCB7XG4gICAgdmFyIHQwID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKF9ibWMgIT0gMCAmJiBmdW5jKVxuICAgICAgICBjb25zb2xlLmxvZyhmdW5jICsgXCIgdG9vayBcIiArICh0MC1fYm1jKSArIFwiIG1pbGlzZWNvbmRzLlwiKTtcblxuICAgIF9ibWMgPSB0MDtcbn1cblxuaW50ZXJmYWNlIFBvaW50IHtcbiAgICByb3c6IG51bWJlcjtcbiAgICBjb2x1bW46IG51bWJlcjtcbn1cbmludGVyZmFjZSBSYW5nZSB7XG4gICAgc3RhcnQ6IFBvaW50O1xuICAgIGVuZDogUG9pbnQ7XG59XG5pbnRlcmZhY2UgSUNoYW5nZUNvbW1hbmQge1xuICAgIG5ld1RleHQ6IHN0cmluZztcbiAgICBvbGRUZXh0OiBzdHJpbmc7XG4gICAgb2xkUmFuZ2U6IFJhbmdlO1xuICAgIG5ld1JhbmdlOiBSYW5nZTtcbn1cblxuXG5cbmNsYXNzIEVkaXRvck1hbmFnZXJ7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRFZGl0b3I6YXRvbS5JVGV4dEVkaXRvcjtcblxuICAgIF92aWV3OiBvdXRsaW5lVmlldy5SYW1sT3V0bGluZTtcbiAgICBfZGV0YWlsczogZGV0YWlsc1ZpZXcuUmFtbERldGFpbHM7XG5cbiAgICAvLyBhc3Q6IGhsLklIaWdoTGV2ZWxOb2RlO1xuICAgIHVuaXRQYXRoIDogc3RyaW5nO1xuICAgIC8vIHVuaXQ6IGxsLklDb21waWxhdGlvblVuaXQ7XG5cbiAgICBjaGFuZ2luZzogYm9vbGVhbjtcbiAgICBleGVjdXRpbmdDb21tYW5kOiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHByaXZhdGUgbWFya09jY3VycmVuY2VzUmVjb25jaWxlcjtcblxuICAgIG9wZW5lZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBjdXJyZW50UG9zaXRpb246IG51bWJlcjtcblxuICAgIHByaXZhdGUgdXBkYXRlQ291bnQ6IG51bWJlcj0wO1xuXG4gICAgcHJpdmF0ZSBvdXRsaW5lQ291bnQ6IG51bWJlcj0wO1xuXG4gICAgX2NsZWFuT3V0bGluZT1mYWxzZTtcblxuICAgIHBlcmZvcm1hbmNlRGVidWc9dHJ1ZTtcblxuICAgIHByaXZhdGUgc3RhdGljIERFVEFJTFNfU1VQUE9SVCA9IHRydWVcblxuICAgIGdldFBhdGgoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFVE06OkdldFBhdGhcIik7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRFZGl0b3IgPyB0aGlzLmN1cnJlbnRFZGl0b3IuZ2V0UGF0aCgpIDogbnVsbDtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50RWRpdG9yKCkgeyByZXR1cm4gdGhpcy5jdXJyZW50RWRpdG9yOyB9XG5cbiAgICBjb25zdHJ1Y3RvcihkaXNwbGF5OiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBtYW5hZ2VyID0gd2luZG93W1wibWFuYWdlclwiXSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5tYXJrT2NjdXJyZW5jZXNSZWNvbmNpbGVyID0gbmV3IHJhbWxTZXJ2ZXIuUmVjb25jaWxlcihyYW1sU2VydmVyLmdldE5vZGVDbGllbnRDb25uZWN0aW9uKCksIDIwMCk7XG5cbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbShlID0+IHRoaXMudXBkYXRlRXZlcnl0aGluZyhkaXNwbGF5KSk7XG5cbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKGVkaXRvcj0+e1xuICAgICAgICAgICAgZWRpdG9yLm9uRGlkRGVzdHJveSgoKT0+e1xuXG4gICAgICAgICAgICAgICAgbGV0IHBhdGggPSBlZGl0b3IuZ2V0UGF0aCgpO1xuXG4gICAgICAgICAgICAgICAgcmFtbFNlcnZlci5nZXROb2RlQ2xpZW50Q29ubmVjdGlvbigpLmRvY3VtZW50Q2xvc2VkKHBhdGgpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZWRpdG9yLm9uRGlkQ2hhbmdlQ3Vyc29yUG9zaXRpb24oZXZlbnQ9PnRoaXMuY3Vyc29yQ2hhbmdlZChlZGl0b3IsIGV2ZW50Lm5ld0J1ZmZlclBvc2l0aW9uKSlcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnVwZGF0ZUV2ZXJ5dGhpbmcoZGlzcGxheSk7XG4gICAgICAgIHRoaXMuYWRkQXV0b0Nsb3NlTGlzdGVuZXIoKTtcblxuICAgICAgICB0aGlzLmFkZExpc3RlbmVyc0ZvclN0cnVjdHVyZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDdXJyZW50UG9zaXRpb24oKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGN1cnNvckNoYW5nZWQoZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yLCBuZXdCdWZmZXJQb3NpdGlvbjogUG9pbnQpIHtcblxuICAgICAgICBtYXJrT2NjdXJyZW5jZXMuY2xlYXJPY2N1cmVuY2VzKGVkaXRvcik7XG5cbiAgICAgICAgdGhpcy5tYXJrT2NjdXJyZW5jZXNSZWNvbmNpbGVyLnNjaGVkdWxlKG5ldyBtYXJrT2NjdXJyZW5jZXMuTWFya09jY3VycmVuY2VSdW5uYWJsZShlZGl0b3IsIG5ld0J1ZmZlclBvc2l0aW9uKSk7XG5cbiAgICAgICAgbGV0IGJ1ZmZlciA9IGVkaXRvci5nZXRCdWZmZXIoKTtcbiAgICAgICAgbGV0IHBvcyA9IGJ1ZmZlci5jaGFyYWN0ZXJJbmRleEZvclBvc2l0aW9uKGVkaXRvci5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpKTtcblxuICAgICAgICByYW1sU2VydmVyLmdldE5vZGVDbGllbnRDb25uZWN0aW9uKCkucG9zaXRpb25DaGFuZ2VkKG1hbmFnZXIudW5pdFBhdGgsIHBvcyk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPSBwb3M7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxTY2hlZHVsZVVwZGF0ZVZpZXdzKGNvdW50Om51bWJlcil7XG4gICAgICAgIHRoaXMudXBkYXRlQ291bnQ9Y291bnQ7XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZUNvdW50PT1jb3VudCl7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LDUwMCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGVWaWV3c1VwZGF0ZSgpe1xuICAgICAgICBpZiAodGhpcy5maXJlKXtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxTY2hlZHVsZVVwZGF0ZVZpZXdzKHRoaXMudXBkYXRlQ291bnQrMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnRlcm5hbFNjaGVkdWxlT3V0bGluZVVwZGF0ZShjb3VudDpudW1iZXIpe1xuICAgICAgICB0aGlzLm91dGxpbmVDb3VudD1jb3VudDtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMub3V0bGluZUNvdW50PT1jb3VudCl7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVPdXRsaW5lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sNTAwKTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZU91dGxpbmVVcGRhdGUoKXtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFNjaGVkdWxlT3V0bGluZVVwZGF0ZSh0aGlzLm91dGxpbmVDb3VudCsxKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQXV0b0Nsb3NlTGlzdGVuZXIoKSB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9uRGlkRGVzdHJveVBhbmUoZXZ0PT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZWRjb3VudCA9IGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpLmZpbHRlcihmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVsnc29mdFRhYnMnXSAhPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChlZGNvdW50ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5hc3Q9bnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy51bml0PW51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuX2N1cnJlbnROb2RlPW51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEVkaXRvcj1udWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKChnbG9iYWwgYXMgYW55KS5jbGVhbkNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZ2xvYmFsIGFzIGFueSkuY2xlYW5DYWNoZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0b20ud29ya3NwYWNlLnBhbmVGb3JJdGVtKHRoaXMuX3ZpZXcpKSBhdG9tLndvcmtzcGFjZS5wYW5lRm9ySXRlbSh0aGlzLl92aWV3KS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdG9tLndvcmtzcGFjZS5wYW5lRm9ySXRlbSh0aGlzLl9kZXRhaWxzKSkgYXRvbS53b3Jrc3BhY2UucGFuZUZvckl0ZW0odGhpcy5fZGV0YWlscykuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvL1RPRE8gUkVNT1ZFIElUIExBVEVSIFdFIE5FRUQgVE8gQkUgUFJFVHkgREVGRU5TSVZFIEFUIFRISVMgTU9NRU5UXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRPckNyZWF0ZVZpZXcoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdmlldykge1xuICAgICAgICAgICAgdGhpcy5fdmlldyA9IG5ldyBvdXRsaW5lVmlldy5SYW1sT3V0bGluZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMudW5pdFBhdGgpe1xuICAgICAgICAgICAgICAgICB0aGlzLl92aWV3LnNldFVuaXQodGhpcy51bml0UGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiAodGhpcy5hc3Qpe1xuICAgICAgICAgICAgLy8gICAgIHRoaXMuX3ZpZXcuc2V0VW5pdCh0aGlzLmFzdCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREZXRhaWxzKCkge1xuICAgICAgICBpZiAoIUVkaXRvck1hbmFnZXIuREVUQUlMU19TVVBQT1JUKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCF0aGlzLl9kZXRhaWxzKSB0aGlzLl9kZXRhaWxzID0gbmV3IGRldGFpbHNWaWV3LlJhbWxEZXRhaWxzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXRhaWxzO1xuICAgIH1cblxuICAgIHVwZGF0ZURldGFpbHMoKSB7XG4gICAgICAgIHRoaXMuZ2V0RGV0YWlscygpLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHJlcGFyc2VBU1QoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRFZGl0b3IpIHtcbiAgICAgICAgICAgIHZhciBfcGF0aCA9IHRoaXMuY3VycmVudEVkaXRvci5nZXRQYXRoKCk7XG4gICAgICAgICAgICB2YXIgYmY9dGhpcy5jdXJyZW50RWRpdG9yLmdldEJ1ZmZlcigpO1xuXG4gICAgICAgICAgICB0aGlzLnVuaXRQYXRoID0gX3BhdGg7XG4gICAgICAgICAgICAvLyB2YXIgcHJqID0gcHJvamVjdC5jcmVhdGVQcm9qZWN0KHBhdGguZGlybmFtZShfcGF0aCkpO1xuICAgICAgICAgICAgLy8gdmFyIHVuaXQgPSBwcmouc2V0Q2FjaGVkVW5pdENvbnRlbnQocGF0aC5iYXNlbmFtZShfcGF0aCksIHRoaXMuY3VycmVudEVkaXRvci5nZXRCdWZmZXIoKS5nZXRUZXh0KCkpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHVuaXQucHJvamVjdCgpLmFkZFRleHRDaGFuZ2VMaXN0ZW5lcihkZWx0YT0+e1xuICAgICAgICAgICAgLy8gICAgIGlmIChkZWx0YS51bml0IT11bml0KXtcbiAgICAgICAgICAgIC8vICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vICAgICB2YXIgY209ZGVsdGEub2Zmc2V0O1xuICAgICAgICAgICAgLy8gICAgIHZhciBlbmQ9ZGVsdGEucmVwbGFjZW1lbnRMZW5ndGg7XG4gICAgICAgICAgICAvLyAgICAgdmFyIHRleHQ9ZGVsdGEudGV4dDtcbiAgICAgICAgICAgIC8vICAgICB2YXIgYnVmZmVyPSg8YXRvbS5JQnVmZmVyPnRoaXMuY3VycmVudEVkaXRvci5nZXRCdWZmZXIoKSk7XG4gICAgICAgICAgICAvLyAgICAgdmFyIHN0YXJ0PWJ1ZmZlci5wb3NpdGlvbkZvckNoYXJhY3RlckluZGV4KGNtKTtcbiAgICAgICAgICAgIC8vICAgICB2YXIgZW5kUG9zaXRpb249YnVmZmVyLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgoY20rZW5kKTtcbiAgICAgICAgICAgIC8vICAgICB0cnkge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLmZpcmU9ZmFsc2U7XG4gICAgICAgICAgICAvLyAgICAgICAgICg8YW55PmJ1ZmZlcikuc2V0VGV4dEluUmFuZ2Uoe3N0YXJ0OiBzdGFydCwgZW5kOiBlbmRQb3NpdGlvbn0sIHRleHQpO1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnNjaGVkdWxlT3V0bGluZVVwZGF0ZSgpO1xuICAgICAgICAgICAgLy8gICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5maXJlPXRydWU7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAvLyB0aGlzLmFzdCA9IHVuaXQuaGlnaExldmVsKCk7XG4gICAgICAgICAgICAvLyB0aGlzLnVuaXQgPSB1bml0O1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBpc0VUUGFuZShwYW5lKSB7XG4gICAgICAgaWYgKCF0aGlzLl92aWV3KXtcbiAgICAgICAgICAgcmV0dXJuO1xuICAgICAgIH1cbiAgICAgICB2YXIgaXRlbXMgPSBwYW5lLmdldEl0ZW1zKCk7XG4gICAgICAgcmV0dXJuICgoRWRpdG9yTWFuYWdlci5ERVRBSUxTX1NVUFBPUlQgJiYgaXRlbXMuaW5kZXhPZih0aGlzLmdldERldGFpbHMoKSkgPj0gMClcbiAgICAgICAgfHwgaXRlbXMuaW5kZXhPZih0aGlzLl92aWV3KSA+PSAwKTtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVUTTo6RGlzcGxheVwiKTtcbiAgICAgICAgdmFyIGF3ID0gYXRvbS53b3Jrc3BhY2U7XG4gICAgICAgIHZhciBmcGFuZSA9IGF0b20ud29ya3NwYWNlLnBhbmVGb3JJdGVtKHRoaXMuZ2V0Q3VycmVudEVkaXRvcigpKTtcbiAgICAgICAgaWYgKCFmcGFuZSkgcmV0dXJuO1xuICAgICAgICBpZiAoIWF3LnBhbmVGb3JJdGVtKHRoaXMuZ2V0T3JDcmVhdGVWaWV3KCkpKVxuICAgICAgICAgICAgZG9TcGxpdCh0aGlzLmdldE9yQ3JlYXRlVmlldygpKTtcblxuICAgICAgICBpZiAoRWRpdG9yTWFuYWdlci5ERVRBSUxTX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIGlmICghYXcucGFuZUZvckl0ZW0obWFuYWdlci5nZXREZXRhaWxzKCkpKVxuICAgICAgICAgICAgICAgIGRvU3BsaXQodGhpcy5nZXREZXRhaWxzKCksIFNwbGl0RGlyZWN0aW9ucy5CT1RUT00pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcGVuZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGZpcmU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLy8gdXBkYXRlVGV4dChub2RlPzogbGwuSUxvd0xldmVsQVNUTm9kZSkge1xuICAgIC8vICAgICB0aGlzLmZpcmUgPSBmYWxzZTtcbiAgICAvLyAgICAgdmFyIGVkaXRvciA9IHRoaXMuY3VycmVudEVkaXRvcjtcbiAgICAvLyAgICAgdmFyIHBvcyA9IG5vZGUgPyBlZGl0b3IuZ2V0QnVmZmVyKCkucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChub2RlLnN0YXJ0KCkpIDogbnVsbDtcbiAgICAvLyAgICAgZWRpdG9yLnNldFRleHQodGhpcy51bml0LmNvbnRlbnRzKCkpO1xuICAgIC8vICAgICB0aGlzLmZpcmUgPSB0cnVlO1xuICAgIC8vICAgICBpZiAocG9zKSAoPGFueT5lZGl0b3IpLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKHBvcyk7XG4gICAgLy8gfVxuXG4gICAgLy8gc2VsZWN0Tm9kZShobm9kZTogaGwuSUhpZ2hMZXZlbE5vZGUpIHtcbiAgICAvLyAgICAgdmFyIG5vZGUgPSBobm9kZS5sb3dMZXZlbCgpO1xuICAgIC8vICAgICBpZiAoIW5vZGUpIHJldHVybjtcbiAgICAvLyAgICAgdmFyIGVkaXRvciA9IHRoaXMuY3VycmVudEVkaXRvcjtcbiAgICAvLyAgICAgaWYgKCFlZGl0b3IpIHJldHVybjtcbiAgICAvLyAgICAgdmFyIHBvcyA9IG5vZGUgPyBlZGl0b3IuZ2V0QnVmZmVyKCkucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChub2RlLnN0YXJ0KCkpIDogbnVsbDtcbiAgICAvLyAgICAgaWYgKHBvcykgKDxhbnk+ZWRpdG9yKS5zZXRDdXJzb3JCdWZmZXJQb3NpdGlvbihwb3MpO1xuICAgIC8vIH1cbiAgICBcbiAgICBwcml2YXRlIHNldFZpZXdzRGlzcGxheVN0eWxlKHZpc2libGU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYodGhpcy5fZGV0YWlscyAmJiAoPGFueT50aGlzKS5fZGV0YWlscy5lbGVtZW50KSB7XG4gICAgICAgICAgICAoPGFueT50aGlzKS5fZGV0YWlscy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB2aXNpYmxlID8gbnVsbCA6IFwibm9uZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5fdmlldyAmJiAoPGFueT50aGlzKS5fdmlldy5lbGVtZW50KSB7XG4gICAgICAgICAgICAoPGFueT50aGlzKS5fdmlldy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB2aXNpYmxlID8gbnVsbCA6IFwibm9uZVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgaXNSYW1sKGVkaXRvcik6IGJvb2xlYW4ge1xuICAgICAgICBpZighZWRpdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWRpdG9yUGF0aCA9IGVkaXRvci5nZXRQYXRoKCk7XG4gICAgICAgIFxuICAgICAgICBpZighZWRpdG9yUGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgZXh0TmFtZSA9IHBhdGguZXh0bmFtZShlZGl0b3JQYXRoKTtcbiAgICAgICAgXG4gICAgICAgIGlmKGV4dE5hbWUgIT09ICcucmFtbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgdXBkYXRlRXZlcnl0aGluZyhkaXNwbGF5OiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICB2YXIgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICAgICAgICBcbiAgICAgICAgaWYoZWRpdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZpZXdzRGlzcGxheVN0eWxlKHRoaXMuaXNSYW1sKGVkaXRvcikpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZighZWRpdG9yIHx8IGVkaXRvciA9PSB0aGlzLmN1cnJlbnRFZGl0b3IgfHwgIXRoaXMuaXNSYW1sKGVkaXRvcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudEVkaXRvciA9IGVkaXRvcjtcblxuICAgICAgICBpZiAodGhpcy5vcGVuZWQgPT0gZmFsc2UgJiYgZGlzcGxheSkgdGhpcy5kaXNwbGF5KCk7XG5cbiAgICAgICAgLy93ZSBhcmUgbm90IGxpc3RlbmluZyB0byB0aGUgZWRpdG9yIGNoYW5nZXMgYW55IG1vcmUsXG4gICAgICAgIC8vaW5zdGVhZCB3ZSBhcmUgbGlzdGVuaW5nIHRvIHRoZSByZXBvcnRzIG9mIHRoZSBzZXJ2ZXIgdGhhdCBzb21ldGhpbmcgaXMgYXZpbGFibGUsIGxpa2UgdGhlIHN0cnVjdHVyZVxuICAgICAgICBpZiAoISg8YW55PmVkaXRvcikucGF0Y2hlZCkge1xuICAgICAgICAgICB0aGlzLmFkZExpc3RlbmVyc1RvRWRpdG9yKCBlZGl0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXBhcnNlQVNUKCk7XG5cbiAgICAgICAgdmFyIHBvcyA9ICg8YW55PmVkaXRvci5nZXRCdWZmZXIoKSkuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihlZGl0b3IuZ2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oKSk7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvblVwZGF0ZWQocG9zKTtcblxuICAgICAgICB0aGlzLnNjaGVkdWxlVmlld3NVcGRhdGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZExpc3RlbmVyc1RvRWRpdG9yKGNlZGl0KSB7XG4gICAgICAgIHZhciBidWZmZXIgPSBjZWRpdC5nZXRCdWZmZXIoKTtcbiAgICAgICAgYnVmZmVyLm9uRGlkQ2hhbmdlKHggPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvL3RoaXMucmVwYXJzZUFTVCgpO1xuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBidWZmZXIuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihjZWRpdC5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uVXBkYXRlZChwb3MpO1xuICAgICAgICAgICAgICAgIC8vdGhpcy5zY2hlZHVsZVZpZXdzVXBkYXRlKCk7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy91cGRhdGluZyBhc3Qgbm9kZSBvbiBwb3NpdGlvbiBjaGFuZ2VcbiAgICAgICAgLy8gY2VkaXQuZ2V0TGFzdEN1cnNvcigpLm9uRGlkQ2hhbmdlUG9zaXRpb24oeD0+IHtcbiAgICAgICAgLy8gICAgIGlmICghdGhpcy5maXJlKSByZXR1cm47XG4gICAgICAgIC8vICAgICB0aGlzLnBvc2l0aW9uVXBkYXRlZChidWZmZXIuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihjZWRpdC5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpKSk7XG4gICAgICAgIC8vICAgICB0aGlzLnNjaGVkdWxlVmlld3NVcGRhdGUoKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzT25Nb3ZlKGNlZGl0KTtcbiAgICAgICAgKDxhbnk+dGhpcy5jdXJyZW50RWRpdG9yKS5wYXRjaGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZExpc3RlbmVyc0ZvclN0cnVjdHVyZSgpIHtcbiAgICAgICAgcmFtbFNlcnZlci5nZXROb2RlQ2xpZW50Q29ubmVjdGlvbigpLm9uU3RydWN0dXJlUmVwb3J0KHJlcG9ydD0+e1xuXG4gICAgICAgICAgICBsZXQgY2F0ZWdvcnlOYW1lcyA9IFtdXG4gICAgICAgICAgICBmb3IobGV0IGNhdGVnb3J5TmFtZSBpbiByZXBvcnQuc3RydWN0dXJlKSBjYXRlZ29yeU5hbWVzLnB1c2goY2F0ZWdvcnlOYW1lKTtcblxuICAgICAgICAgICAgbGV0IGNhdGVnb3J5TmFtZXNTdHJpbmcgPSBjYXRlZ29yeU5hbWVzLmpvaW4oKTtcbiAgICAgICAgICAgIHJhbWxTZXJ2ZXIuZ2V0Tm9kZUNsaWVudENvbm5lY3Rpb24oKS5kZWJ1ZyhcIkdvdCBuZXcgc3RydWN0dXJlIHJlcG9ydCB3aXRoIGNhdGVnb3JpZXMgXCJcbiAgICAgICAgICAgICAgICArIGNhdGVnb3J5TmFtZXNTdHJpbmcsIFwiRWRpdG9yTWFuYWdlclwiLCBcImFkZExpc3RlbmVyc0ZvclN0cnVjdHVyZVwiKTtcblxuICAgICAgICAgICAgdmFyIGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcblxuICAgICAgICAgICAgaWYoIWVkaXRvciB8fCAhdGhpcy5pc1JhbWwoZWRpdG9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51cGRhdGVPdXRsaW5lKCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRMaXN0ZW5lcnNPbk1vdmUoY2VkaXQpIHtcbiAgICAgICAgdmFyIG1vdmluZ1BhbmU9ZmFsc2U7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9uRGlkQWRkUGFuZUl0ZW0oZXZlbnQ9PiB7XG4gICAgICAgICAgICBpZiAobW92aW5nUGFuZSB8fCB0aGlzLmlzRVRQYW5lKGV2ZW50LnBhbmUpID09IGZhbHNlIHx8IGV2ZW50Lml0ZW0gPT0gdGhpcy5nZXRPckNyZWF0ZVZpZXcoKSB8fCAoRWRpdG9yTWFuYWdlci5ERVRBSUxTX1NVUFBPUlQgJiYgZXZlbnQuaXRlbSA9PSB0aGlzLmdldERldGFpbHMoKSkpIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZwYW5lID0gYXRvbS53b3Jrc3BhY2UucGFuZUZvckl0ZW0oY2VkaXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnBhbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmluZ1BhbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucGFuZS5tb3ZlSXRlbVRvUGFuZShldmVudC5pdGVtLCBmcGFuZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZpbmdQYW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcGFuZS5zZXRBY3RpdmVJdGVtKGV2ZW50Lml0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnBhbmUuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9UT0RPIFJFTU9WRSBJVCBMQVRFUiBXRSBORUVEIFRPIEJFIFBSRVR5IERFRkVOU0lWRSBBVCBUSElTIE1PTUVOVFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxOCk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLy8gX2N1cnJlbnROb2RlOiBobC5JSGlnaExldmVsTm9kZTtcbiAgICAvLyAvL19zZWxlY3RlZE5vZGU6IGhsLklIaWdoTGV2ZWxOb2RlO1xuXG4gICAgLy8gcGF0Y2hDdXJyZW50Tm9kZShuOmhsLklIaWdoTGV2ZWxOb2RlKXtcbiAgICAvLyAgICAgdGhpcy5fY3VycmVudE5vZGU9bjtcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyBnZXRDdXJyZW50Tm9kZSgpIHtcbiAgICAvLyAgICAgaWYgKHRoaXMuX2N1cnJlbnROb2RlID09IG51bGwpIHJldHVybiB0aGlzLl9jdXJyZW50Tm9kZSA9IHRoaXMuYXN0O1xuICAgIC8vICAgICBlbHNlIHJldHVybiB0aGlzLl9jdXJyZW50Tm9kZTtcbiAgICAvLyB9XG5cblxuICAgIC8vIHNldFNlbGVjdGVkTm9kZShub2RlOiBobC5JSGlnaExldmVsTm9kZSkge1xuICAgIC8vICAgICAvL3RoaXMuX3NlbGVjdGVkTm9kZSA9IG5vZGU7XG4gICAgLy9cbiAgICAvLyAgICAgaWYgKHRoaXMudW5pdCl7XG4gICAgLy8gICAgICAgICB2YXIgdW5pdFBhdGg9dGhpcy51bml0LmFic29sdXRlUGF0aCgpO1xuICAgIC8vICAgICAgICAgd2hpbGUgKG5vZGUubG93TGV2ZWwoKS51bml0KCkuYWJzb2x1dGVQYXRoKCkhPXVuaXRQYXRoKXtcbiAgICAvLyAgICAgICAgICAgICBpZiAoIW5vZGUucGFyZW50KCkpe1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICAgICAgZWxzZXtcbiAgICAvLyAgICAgICAgICAgICAgICAgbm9kZT1ub2RlLnBhcmVudCgpO1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgICB2YXIgaWQ9bm9kZS5pZCgpO1xuICAgIC8vICAgICB2YXIgYW5vZGU9dGhpcy5hc3QuZmluZEJ5SWQoaWQpO1xuICAgIC8vICAgICBpZiAoYW5vZGUpe1xuICAgIC8vICAgICAgICAgbm9kZT1hbm9kZTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZiAodGhpcy5fZGV0YWlscyl7XG4gICAgLy8gICAgICAgICB0aGlzLl9kZXRhaWxzLnNob3cobm9kZSk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgdmFyIGVkaXRvciA9IHRoaXMuZ2V0Q3VycmVudEVkaXRvcigpO1xuICAgIC8vICAgICBpZiAoZWRpdG9yKSB7XG4gICAgLy8gICAgICAgICB0aGlzLmZpcmU9ZmFsc2U7XG4gICAgLy8gICAgICAgICB0cnkge1xuICAgIC8vICAgICAgICAgICAgIHZhciBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgLy8gICAgICAgICAgICAgdmFyIHBvc1N0YXJ0ID0gYnVmZmVyLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgobm9kZS5sb3dMZXZlbCgpLnN0YXJ0KCkpO1xuICAgIC8vICAgICAgICAgICAgIHZhciBwb3NFbmQgPSBidWZmZXIucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChub2RlLmxvd0xldmVsKCkuZW5kKCkpO1xuICAgIC8vICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3JCdWZmZXJQb3NpdGlvbihwb3NTdGFydCk7XG4gICAgLy8gICAgICAgICAgICAgdGhpcy5wb3NpdGlvblVwZGF0ZWQoYnVmZmVyLmNoYXJhY3RlckluZGV4Rm9yUG9zaXRpb24oZWRpdG9yLmdldEN1cnNvckJ1ZmZlclBvc2l0aW9uKCkpKTtcbiAgICAvLyAgICAgICAgIH1maW5hbGx5e1xuICAgIC8vICAgICAgICAgICAgIHRoaXMuZmlyZT10cnVlO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gZ2V0U2VsZWN0ZWROb2RlKCkge1xuICAgIC8vICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50Tm9kZSgpXG4gICAgLy8gICAgIC8vZWxzZSByZXR1cm4gdGhpcy5fc2VsZWN0ZWROb2RlO1xuICAgIC8vIH1cblxuICAgIHNldFRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRVRNOjpTZXRUZXh0XCIpO1xuICAgICAgICB2YXIgZWRpdG9yID0gdGhpcy5jdXJyZW50RWRpdG9yO1xuICAgICAgICBpZiAoZWRpdG9yID09IG51bGwpIHJldHVybjtcbiAgICAgICAgZWRpdG9yLnNldFRleHQodGV4dCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0Zyb21FZGdlUm93KCk6IGJvb2xlYW4ge1xuICAgICAgICB2YXIgZWRpdG9yID0gdGhpcy5nZXRDdXJyZW50RWRpdG9yKClcblxuICAgICAgICBpZighZWRpdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gZWRpdG9yLmdldEN1cnNvckJ1ZmZlclBvc2l0aW9uKCk7XG5cbiAgICAgICAgaWYoIWN1cnJlbnRQb3NpdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRSb3cgPSBjdXJyZW50UG9zaXRpb24ucm93O1xuXG4gICAgICAgIHZhciBwcmV2aW91c1JvdyA9ICg8YW55PmVkaXRvcikucHJldmlvdXNSb3c7XG5cbiAgICAgICAgKDxhbnk+ZWRpdG9yKS5wcmV2aW91c1JvdyA9IGN1cnJlbnRSb3c7XG5cbiAgICAgICAgaWYocHJldmlvdXNSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocHJldmlvdXNSb3cgPT09IGN1cnJlbnRSb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHByZXZpb3VzUm93ID09PSAoPGFueT5lZGl0b3IuZ2V0QnVmZmVyKCkpLmdldExhc3RSb3coKSB8fCBwcmV2aW91c1JvdyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVWaWV3cygpIHtcbiAgICAgICAgLy92YXIgY05vZGUgPSB0aGlzLmdldEN1cnJlbnROb2RlKCk7XG4gICAgICAgIHZhciBkcz1uZXcgRGF0ZSgpLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgICBpZiAoRWRpdG9yTWFuYWdlci5ERVRBSUxTX1NVUFBPUlQgJiYgdGhpcy5fZGV0YWlscykge1xuICAgICAgICAgICAgdGhpcy5nZXREZXRhaWxzKCkuc2hvdyhtYW5hZ2VyLnVuaXRQYXRoLCBtYW5hZ2VyLmN1cnJlbnRQb3NpdGlvbiwgdGhpcy5pc0Zyb21FZGdlUm93KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl92aWV3KSB7XG4gICAgICAgICAgICB0aGlzLmdldE9yQ3JlYXRlVmlldygpLnNldFVuaXQobWFuYWdlci51bml0UGF0aCk7XG4gICAgICAgICAgICAvLyB0aGlzLmdldE9yQ3JlYXRlVmlldygpLnNldFVuaXQobWFuYWdlci5hc3QpO1xuICAgICAgICAgICAgLy90aGlzLmdldE9yQ3JlYXRlVmlldygpLnNldFNlbGVjdGlvbihjTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGQxPW5ldyBEYXRlKCkuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICAgIGlmICh0aGlzLnBlcmZvcm1hbmNlRGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVmlld3MgdXBkYXRlOlwiICsgKGQxIC0gZHMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU91dGxpbmUoKSB7XG5cbiAgICAgICAgcmFtbFNlcnZlci5nZXROb2RlQ2xpZW50Q29ubmVjdGlvbigpLmRlYnVnKFwiVXBkYXRpbmcgb3V0bGluZVwiLCBcIkVkaXRvck1hbmFnZXJcIiwgXCJ1cGRhdGVPdXRsaW5lXCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl92aWV3KSB7XG4gICAgICAgICAgICB0aGlzLmdldE9yQ3JlYXRlVmlldygpLnNldFVuaXQobWFuYWdlci51bml0UGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb3NpdGlvblVwZGF0ZWQobmV3UG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuX2RldGFpbHMpIHtcbiAgICAgICAgICAgIHJhbWxTZXJ2ZXIuZ2V0Tm9kZUNsaWVudENvbm5lY3Rpb24oKS5wb3NpdGlvbkNoYW5nZWQobWFuYWdlci51bml0UGF0aCwgdGhpcy5jdXJyZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgLy8gdGhpcy5nZXREZXRhaWxzKCkuc2hvdyhtYW5hZ2VyLnVuaXRQYXRoLCB0aGlzLmN1cnJlbnRQb3NpdGlvbiwgdGhpcy5pc0Zyb21FZGdlUm93KCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmICh0aGlzLmFzdCl7XG4gICAgICAgIC8vICAgICB0aGlzLl9jdXJyZW50Tm9kZT10aGlzLmFzdC5maW5kRWxlbWVudEF0T2Zmc2V0KHRoaXMuY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIHBsYWNlaG9sZGVyOiBib29sZWFuID0gZmFsc2U7XG5cbn1cbnZhciBtYW5hZ2VyIDogRWRpdG9yTWFuYWdlciA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RWRpdG9yVG9vbHMoZGlzcGxheTogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAobWFuYWdlciA9PSBudWxsKSBtYW5hZ2VyID0gbmV3IEVkaXRvck1hbmFnZXIoZGlzcGxheSk7XG4gICAgZWxzZSBpZiAoZGlzcGxheSkgbWFuYWdlci5kaXNwbGF5KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlZGl0b3JUb29sc1N0YXR1cygpIHtcbiAgICByZXR1cm4gbWFuYWdlciAhPSBudWxsICYmIG1hbmFnZXIub3BlbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXF1aXJlTWFuYWdlcigpe1xuICAgIGlmICghbWFuYWdlcil7XG4gICAgICAgIG1hbmFnZXI9bmV3IEVkaXRvck1hbmFnZXIodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBtYW5hZ2VyO1xufVxuLy8gZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFuZFNlbGVjdChub2RlOmhsLklIaWdoTGV2ZWxOb2RlKXtcbi8vICAgICBpZiAoYXF1aXJlTWFuYWdlcigpLl92aWV3KSB7XG4vLyAgICAgICAgIGFxdWlyZU1hbmFnZXIoKS5fdmlldy5yZWZyZXNoKCk7XG4vLyAgICAgfVxuLy8gICAgIGFxdWlyZU1hbmFnZXIoKS51cGRhdGVUZXh0KCk7XG4vLyAgICAgYXF1aXJlTWFuYWdlcigpLnNlbGVjdE5vZGUobm9kZSk7XG4vLyB9XG5leHBvcnQgZW51bSBTcGxpdERpcmVjdGlvbnN7XG4gICAgUklHSFQsXG4gICAgTEVGVCxcbiAgICBUT1AsXG4gICAgQk9UVE9NXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb1NwbGl0KHZhbHVlOmFueSxkaXI6U3BsaXREaXJlY3Rpb25zPVNwbGl0RGlyZWN0aW9ucy5SSUdIVCl7XG4gICAgdmFyIG5ld1BhbmU9bnVsbDtcbiAgICBzd2l0Y2goIGRpcikge1xuICAgICAgICBjYXNlIFNwbGl0RGlyZWN0aW9ucy5CT1RUT006XG4gICAgICAgICAgICBuZXdQYW5lPWF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKS5zcGxpdERvd24oe30pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU3BsaXREaXJlY3Rpb25zLlRPUDpcbiAgICAgICAgICAgIG5ld1BhbmU9YXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZSgpLnNwbGl0VXAoe30pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU3BsaXREaXJlY3Rpb25zLkxFRlQ6XG4gICAgICAgICAgICBuZXdQYW5lPWF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKS5zcGxpdExlZnQoe30pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU3BsaXREaXJlY3Rpb25zLlJJR0hUOlxuICAgICAgICAgICAgbmV3UGFuZT1hdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKCkuc3BsaXRSaWdodCh7fSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgbmV3UGFuZS5hZGRJdGVtKHZhbHVlKVxuICAgIHJldHVybiBuZXdQYW5lO1xufVxuIl19\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/editor-tools.js\n// module id = 1\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 2\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar Workspace = /** @class */ (function () {\n    function Workspace() {\n    }\n    Workspace.prototype.onDidChangeActivePaneItem = function (callback) {\n        return atom.workspace.onDidChangeActivePaneItem(callback);\n    };\n    Workspace.prototype.addModalPanel = function (arg) {\n        return atom.workspace.addModalPanel(arg);\n    };\n    Workspace.prototype.getActiveTextEditor = function () {\n        return atom.workspace.getActiveTextEditor();\n    };\n    Workspace.prototype.getActivePane = function () {\n        return atom.workspace.getActivePane();\n    };\n    Workspace.prototype.getActiveEditor = function () {\n        return atom.workspace.getActiveEditor();\n    };\n    Workspace.prototype.addRightPanel = function (arg) {\n        return atom.workspace.addRightPanel(arg);\n    };\n    Workspace.prototype.paneForItem = function (arg) {\n        return atom.workspace.paneForItem(arg);\n    };\n    Workspace.prototype.getPaneItems = function () {\n        return atom.workspace.getPaneItems();\n    };\n    Workspace.prototype.onDidAddPaneItem = function (callback) {\n        return atom.workspace.onDidAddPaneItem(callback);\n    };\n    Workspace.prototype.onDidDestroyPane = function (callback) {\n        return atom.workspace.onDidDestroyPane(callback);\n    };\n    Workspace.prototype.open = function (path, args) {\n        atom.workspace.open(path, args);\n    };\n    Workspace.prototype.observeTextEditors = function (callback) {\n        atom.workspace.observeTextEditors(callback);\n    };\n    return Workspace;\n}());\nexports.Workspace = Workspace;\nfunction open(pathsToOpen) {\n    atom.open(pathsToOpen);\n}\nexports.open = open;\nexports.workspace = new Workspace();\nvar CommandManager = /** @class */ (function () {\n    function CommandManager() {\n    }\n    CommandManager.prototype.add = function (selector, type, callback) {\n        return atom.commands.add(selector, type, callback);\n    };\n    return CommandManager;\n}());\nexports.CommandManager = CommandManager;\nexports.commands = new CommandManager();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvYXRvbVdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQ7SUFBQTtJQTRDQSxDQUFDO0lBM0NHLDZDQUF5QixHQUF6QixVQUEwQixRQUEwQjtRQUNoRCxNQUFNLENBQU8sSUFBSSxDQUFDLFNBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsaUNBQWEsR0FBYixVQUFjLEdBQW9CO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsdUNBQW1CLEdBQW5CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsaUNBQWEsR0FBYjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxtQ0FBZSxHQUFmO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFhLEdBQWIsVUFBYyxHQUFRO1FBQ2xCLE1BQU0sQ0FBTyxJQUFJLENBQUMsU0FBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLEdBQVE7UUFDaEIsTUFBTSxDQUFPLElBQUksQ0FBQyxTQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxnQ0FBWSxHQUFaO1FBQ0ksTUFBTSxDQUFRLElBQUksQ0FBQyxTQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUNELG9DQUFnQixHQUFoQixVQUFpQixRQUFvRTtRQUNqRixNQUFNLENBQVEsSUFBSSxDQUFDLFNBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0Qsb0NBQWdCLEdBQWhCLFVBQWlCLFFBQTBDO1FBQ3ZELE1BQU0sQ0FBUSxJQUFJLENBQUMsU0FBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCx3QkFBSSxHQUFKLFVBQUssSUFBSSxFQUFFLElBQUk7UUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHNDQUFrQixHQUFsQixVQUFtQixRQUFxQztRQUNwRCxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTCxnQkFBQztBQUFELENBNUNBLEFBNENDLElBQUE7QUE1Q1ksOEJBQVM7QUE4Q3RCLGNBQXFCLFdBQVc7SUFDdEIsSUFBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRkQsb0JBRUM7QUE2RVUsUUFBQSxTQUFTLEdBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQU1qRDtJQUFBO0lBSUEsQ0FBQztJQUhHLDRCQUFHLEdBQUgsVUFBSSxRQUFnQixFQUFFLElBQVksRUFBRSxRQUFvQjtRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQUpZLHdDQUFjO0FBTWhCLFFBQUEsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9hdG9tV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5leHBvcnQgY2xhc3MgV29ya3NwYWNlIHtcbiAgICBvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrOihhcmc6YW55KSA9PiB2b2lkKTp2b2lkIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBhZGRNb2RhbFBhbmVsKGFyZzpBZGRNb2RhbFBhbmVsQXJnKTphbnkge1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbChhcmcpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZVRleHRFZGl0b3IoKTogSVRleHRFZGl0b3Ige1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZVBhbmUoKTogSVBhbmUge1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZSgpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZUVkaXRvcigpOiBJRWRpdG9yIHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZUVkaXRvcigpO1xuICAgIH1cblxuICAgIGFkZFJpZ2h0UGFuZWwoYXJnOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5hZGRSaWdodFBhbmVsKGFyZyk7XG4gICAgfVxuXG4gICAgcGFuZUZvckl0ZW0oYXJnOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5wYW5lRm9ySXRlbShhcmcpO1xuICAgIH1cbiAgICBnZXRQYW5lSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiAoPGFueT4gYXRvbS53b3Jrc3BhY2UpLmdldFBhbmVJdGVtcygpO1xuICAgIH1cbiAgICBvbkRpZEFkZFBhbmVJdGVtKGNhbGxiYWNrOiAoZXZlbnQ6IHsgaXRlbTogYW55OyBwYW5lOiBJUGFuZTsgaW5kZXg6IG51bWJlciB9KSA9PiB2b2lkKSB7XG4gICAgICAgIHJldHVybiAoPGFueT4gYXRvbS53b3Jrc3BhY2UpLm9uRGlkQWRkUGFuZUl0ZW0oY2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkRpZERlc3Ryb3lQYW5lKGNhbGxiYWNrOiAoZXZlbnQ6IHsgcGFuZTogSVBhbmUgfSkgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gKDxhbnk+IGF0b20ud29ya3NwYWNlKS5vbkRpZERlc3Ryb3lQYW5lKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb3BlbihwYXRoLCBhcmdzKSB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4ocGF0aCwgYXJncyk7XG4gICAgfVxuXG4gICAgb2JzZXJ2ZVRleHRFZGl0b3JzKGNhbGxiYWNrIDogKGVkaXRvcjpJVGV4dEVkaXRvcik9PnZvaWQpIHtcbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuKHBhdGhzVG9PcGVuKSB7XG4gICAgKDxhbnk+YXRvbSkub3BlbihwYXRoc1RvT3Blbik7XG59XG5cbmludGVyZmFjZSBJUGFuZSB7XG4gICAgc3BsaXRVcChhcmc6YW55KTogSVBhbmU7XG5cbiAgICBzcGxpdERvd24oYXJnOmFueSk6IElQYW5lO1xuXG4gICAgc3BsaXRMZWZ0KGFyZzphbnkpOiBJUGFuZTtcblxuICAgIHNwbGl0UmlnaHQoYXJnOmFueSk6IElQYW5lO1xuXG4gICAgYWRkSXRlbShpdGVtOmFueSwgaW5kZXg6bnVtYmVyKTtcblxuICAgIGFjdGl2YXRlSXRlbUF0SW5kZXgoYXJnOiBhbnkpO1xuICAgIFxuICAgIG1vdmVJdGVtVG9QYW5lKGl0ZW06YW55LCBwYW5lOklQYW5lLCBpbmRleDpudW1iZXIpOnZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnR7XG4gICAgcm93Om51bWJlcjtcbiAgICBjb2x1bW46bnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhbmdlIHtcbiAgICBzdGFydDpQb2ludDtcbiAgICBlbmQ6UG9pbnQ7XG59XG5cbmV4cG9ydCAgaW50ZXJmYWNlICBJQ3Vyc29yIHtcbiAgICBnZXRCdWZmZXJQb3NpdGlvbigpOiBQb2ludDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSAgSUJ1ZmZlciB7XG4gICAgcG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChpbmRleE9mOmFueSk6IFBvaW50O1xuICAgIGNoYXJhY3RlckluZGV4Rm9yUG9zaXRpb24ocG9zaXRpb246UG9pbnQpOm51bWJlcjtcblxuICAgIHJhbmdlRm9yUm93KGFueSk6IFJhbmdlO1xuXG4gICAgc2V0VGV4dCh0ZXh0KTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlICBJVGV4dEVkaXRvciB7XG4gICAgZ2V0VGV4dCgpOiBzdHJpbmc7XG5cbiAgICBnZXRQYXRoKCk6IHN0cmluZztcblxuICAgIGdldExhc3RDdXJzb3IoKTogSUN1cnNvcjtcblxuICAgIGdldEJ1ZmZlcigpOiBJQnVmZmVyO1xuXG4gICAgc2V0VGV4dCh0ZXh0KTtcblxuICAgIGdldEN1cnNvckJ1ZmZlclBvc2l0aW9uKCk6UG9pbnQ7XG5cbiAgICBvbkRpZERlc3Ryb3koY2FsbGJhY2s6KCk9PnZvaWQpO1xuXG4gICAgb25EaWRDaGFuZ2VDdXJzb3JQb3NpdGlvbihjYWxsYmFjazogKGV2ZW50OntcbiAgICAgICAgIG9sZEJ1ZmZlclBvc2l0aW9uOlBvaW50LFxuICAgICAgICAgb2xkU2NyZWVuUG9zaXRpb246UG9pbnQsXG4gICAgICAgICBuZXdCdWZmZXJQb3NpdGlvbjpQb2ludCxcbiAgICAgICAgIG5ld1NjcmVlblBvc2l0aW9uOlBvaW50LFxuICAgICAgICAgdGV4dENoYW5nZWQ6Ym9vbGVhbixcbiAgICAgICAgIGN1cnNvcjogSUN1cnNvclxuICAgICB9KT0+dm9pZCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgIElFZGl0b3Ige1xuICAgIGdldEJ1ZmZlcigpOiBJQnVmZmVyO1xuXG4gICAgc2V0U2VsZWN0ZWRCdWZmZXJSYW5nZShyYW5nZTogYW55LCBhcmc6IGFueSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkTW9kYWxQYW5lbEFyZyB7XG4gICAgaXRlbTogYW55O1xufVxuXG5leHBvcnQgdmFyIHdvcmtzcGFjZTpXb3Jrc3BhY2UgPSBuZXcgV29ya3NwYWNlKCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbW1hbmRNYW5hZ2VyIHtcbiAgICBhZGQoc2VsZWN0b3I6IHN0cmluZywgdHlwZTogc3RyaW5nLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IEF0b21Db3JlLkRpc3Bvc2FibGU7XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kTWFuYWdlciB7XG4gICAgYWRkKHNlbGVjdG9yOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuIGF0b20uY29tbWFuZHMuYWRkKHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5leHBvcnQgdmFyIGNvbW1hbmRzID0gbmV3IENvbW1hbmRNYW5hZ2VyKCk7Il19\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/atomWrapper.js\n// module id = 3\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UI = require(\"atom-ui-lib\");\nvar SC = require(\"../util/ScrollViewUI\");\nvar CompositeDisposable = UI.CompositeDisposable;\nvar details = require(\"./details\");\nvar editorTools = require(\"./editor-tools\");\nvar ramlServer = require(\"raml-language-server\");\nvar reconciler_1 = require(\"./reconciler\");\nvar RamlDetails = /** @class */ (function (_super) {\n    __extends(RamlDetails, _super);\n    function RamlDetails(allowStructureChanges) {\n        if (allowStructureChanges === void 0) { allowStructureChanges = true; }\n        var _this = _super.call(this) || this;\n        _this.allowStructureChanges = allowStructureChanges;\n        _this.disposables = new CompositeDisposable();\n        _this.addClass('raml-details');\n        var connection = ramlServer.getNodeClientConnection();\n        connection.onDetailsReport(function (report) { return _this.onDetailsReport(report); });\n        _this.reconciler = new reconciler_1.Reconciler(connection, 800);\n        return _this;\n    }\n    RamlDetails.prototype.getTitle = function () {\n        return \"Details\";\n    };\n    RamlDetails.prototype.attached = function () {\n        try {\n            this.element.innerHTML = \"<div></div>\";\n            this._children = [];\n            this.container = UI.vc();\n            this.addChild(this.container);\n            this.ui().appendChild(this.container.ui());\n            _super.prototype.attached.call(this);\n        }\n        catch (e) {\n        }\n    };\n    RamlDetails.prototype.setResource = function (detailsNode, context) {\n        if (this.wasSchema) {\n            this.schemaView.dispose();\n            this.schemaView = null;\n        }\n        this.wasSchema = false;\n        window[\"detailsnode\"] = detailsNode;\n        window[\"detailscontext\"] = context;\n        if (detailsNode == null)\n            this.displayEmpty();\n        details.updateDetailsPanel(detailsNode, context, this.container, true);\n    };\n    RamlDetails.prototype.update = function () {\n        if (window[\"detailsnode\"]) {\n            this.setResource(window[\"detailsnode\"], window[\"detailscontext\"]);\n        }\n    };\n    RamlDetails.prototype.displayEmpty = function () {\n        this.container.clear();\n        // if (!editorTools.aquireManager().ast) {\n        //     this.container.addChild(UI.h3(\"Our API is fabulously empty\").margin(8, 8, 20, 8));\n        //     var create = new UI.Button(\"Create new API\", UI.ButtonSizes.LARGE, UI.ButtonHighlights.SUCCESS, UI.Icon.REPO_CLONE, ()=>dialogs.newApi());\n        //     create.margin(8, 8, 20, 0);\n        //     this.container.addChild(create);\n        // }\n    };\n    RamlDetails.prototype.destroy = function () {\n        editorTools.aquireManager()._details = null;\n        this.disposables.dispose();\n        this._unitPath = null;\n        this._position = null;\n        this.container.dispose();\n        this.container = null;\n        window[\"detailsnode\"] = null;\n        window[\"detailscontext\"] = null;\n        this._children = [];\n        if (details.oldItem) {\n            details.oldItem.detach();\n        }\n        if (this.wasSchema) {\n            this.schemaView.dispose();\n            this.schemaView = null;\n        }\n        details.oldItem = null;\n    };\n    RamlDetails.prototype.show = function (unitPath, position, force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        if (!force && this._unitPath == unitPath && this._position === position)\n            return;\n        this._unitPath = unitPath;\n        this._position = position;\n        var reconciler = this.reconciler;\n        try {\n            // if (isSchema(node))\n            //     this.setSchema(this._node);\n            // else\n            //     this.setResource(node);\n            ramlServer.getNodeClientConnection().getDetails(unitPath, position).then(function (detailsNode) {\n                _this.setResource(detailsNode, {\n                    uri: unitPath,\n                    position: position,\n                    localModel: false,\n                    reconciler: reconciler\n                });\n            });\n        }\n        catch (e) { }\n    };\n    RamlDetails.prototype.onDetailsReport = function (report) {\n        var _this = this;\n        if (report.uri != this._unitPath)\n            return;\n        var reconciler = this.reconciler;\n        //if (this._position == report.position) return;\n        ramlServer.getNodeClientConnection().getLatestVersion(report.uri).then(function (latestVersion) {\n            //ignoring outdated reports\n            if (report.version != null && report.version < latestVersion)\n                return;\n            _this.setResource(report.details, {\n                uri: report.uri,\n                position: report.position,\n                localModel: false,\n                reconciler: reconciler,\n            });\n        });\n    };\n    return RamlDetails;\n}(SC.Scrollable));\nexports.RamlDetails = RamlDetails;\n// function isSchema(p: hl.IHighLevelNode) {\n//     if (!p){\n//         return false;\n//     }\n//     return universeHelpers.isGlobalSchemaType(p.definition());\n// } \n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/details-view.js\n// module id = 4\n// module chunks = 0","module.exports = require(\"atom-ui-lib\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom-ui-lib\"\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Created by kor on 22/06/15.\n */\nvar SpacePenViews = require(\"atom-space-pen-views\");\nvar Scrollable = /** @class */ (function (_super) {\n    __extends(Scrollable, _super);\n    function Scrollable() {\n        var _this = _super.call(this) || this;\n        _this._children = [];\n        return _this;\n    }\n    Scrollable.content = function () {\n        var v = this.div({ class: 'scrollpad pane-item padded', tabindex: -1, style: \"overflow:scroll;\" });\n        return v;\n    };\n    Scrollable.prototype.dispose = function () {\n    };\n    Scrollable.prototype.caption = function () { return \"\"; };\n    Scrollable.prototype.scroll = function (top, left) {\n        this.element.scrollTop = top;\n        this.element.scrollLeft = left;\n    };\n    Scrollable.prototype.size = function () {\n        return {\n            top: this.element.scrollTop,\n            left: this.element.scrollLeft,\n            bottom: this.element.scrollTop + this.element.clientHeight,\n            right: this.element.scrollLeft + this.element.clientWidth\n        };\n    };\n    Scrollable.prototype.changed = function () { };\n    Scrollable.prototype.refresh = function () { };\n    Scrollable.prototype.ui = function () {\n        return this.element;\n    };\n    Scrollable.prototype.setParent = function (p) {\n        if (this._parent != null)\n            this._parent.removeChild(this);\n        this._parent = p;\n    };\n    //TODO REMOVE COPY PASTE\n    Scrollable.prototype.addChild = function (child) {\n        child.setParent(this);\n        this._children.push(child);\n        //this.changed();\n    };\n    Scrollable.prototype.removeChild = function (child) {\n        this._children = this._children.filter(function (x) { return x != child; });\n        // this.changed();\n    };\n    Scrollable.prototype.doRender = function () {\n        return this.innerRenderUI();\n    };\n    /**\n     *\n     * @returns not null element;\n     */\n    Scrollable.prototype.selfRender = function () {\n        return document.createElement(\"div\");\n    };\n    Scrollable.prototype.attached = function () {\n        this.html(this.innerRenderUI());\n    };\n    Scrollable.prototype.innerRenderUI = function () {\n        var start = this.selfRender();\n        this._children.forEach(function (x) {\n            var el = x.renderUI();\n            if (el) {\n                start.appendChild(el);\n            }\n        });\n        return start;\n    };\n    Scrollable.prototype.renderUI = function () {\n        return this.element;\n    };\n    Scrollable.prototype.parent = function () {\n        return null;\n    };\n    Scrollable.prototype.children = function () {\n        return this._children;\n    };\n    Scrollable.prototype.isAttached = function () {\n        return true;\n    };\n    return Scrollable;\n}(SpacePenViews.ScrollView));\nexports.Scrollable = Scrollable;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvU2Nyb2xsVmlld1VJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsb0RBQXVEO0FBRXZEO0lBQWdDLDhCQUF3QjtJQUlwRDtRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQUpBLGVBQVMsR0FBcUIsRUFBRSxDQUFBOztJQUlqQyxDQUFDO0lBQ00sa0JBQU8sR0FBZDtRQUNJLElBQUksQ0FBQyxHQUFTLElBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUE7UUFFekcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCw0QkFBTyxHQUFQO0lBRUEsQ0FBQztJQUlELDRCQUFPLEdBQVAsY0FBWSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV4QiwyQkFBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLElBQVk7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNJLE1BQU0sQ0FBQztZQUNILEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO1lBQzFELEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7U0FDNUQsQ0FBQTtJQUNMLENBQUM7SUFFRCw0QkFBTyxHQUFQLGNBQVksQ0FBQztJQUNiLDRCQUFPLEdBQVAsY0FBWSxDQUFDO0lBR2IsdUJBQUUsR0FBRjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFJRCw4QkFBUyxHQUFULFVBQVUsQ0FBaUI7UUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELHdCQUF3QjtJQUN4Qiw2QkFBUSxHQUFSLFVBQVMsS0FBNEM7UUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixpQkFBaUI7SUFDckIsQ0FBQztJQUNELGdDQUFXLEdBQVgsVUFBWSxLQUFxQjtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxJQUFJLEtBQUssRUFBVixDQUFVLENBQUMsQ0FBQztRQUN2RCxrQkFBa0I7SUFDdEIsQ0FBQztJQUNELDZCQUFRLEdBQVI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDRDs7O09BR0c7SUFDSywrQkFBVSxHQUFsQjtRQUNJLE1BQU0sQ0FBTSxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ1UsSUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsa0NBQWEsR0FBYjtRQUNJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7WUFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELDJCQUFNLEdBQU47UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELCtCQUFVLEdBQVY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCxpQkFBQztBQUFELENBdkdBLEFBdUdDLENBdkcrQixhQUFhLENBQUMsVUFBVSxHQXVHdkQ7QUF2R1ksZ0NBQVUiLCJmaWxlIjoic3JjL2F0b20vdXRpbC9TY3JvbGxWaWV3VUkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkga29yIG9uIDIyLzA2LzE1LlxuICovXG5pbXBvcnQgU3BhY2VQZW5WaWV3cyA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5pbXBvcnQgVUkgPSByZXF1aXJlKFwiYXRvbS11aS1saWJcIilcbmV4cG9ydCBjbGFzcyBTY3JvbGxhYmxlIGV4dGVuZHMgU3BhY2VQZW5WaWV3cy5TY3JvbGxWaWV3IGltcGxlbWVudHMgVUkuVUlDb21wb25lbnQge1xuXG4gICAgIF9jaGlsZHJlbjogVUkuVUlDb21wb25lbnRbXSA9IFtdXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbnRlbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgdiA9ICg8YW55PnRoaXMpLmRpdih7IGNsYXNzOiAnc2Nyb2xscGFkIHBhbmUtaXRlbSBwYWRkZWQnLCB0YWJpbmRleDogLTEsIHN0eWxlOiBcIm92ZXJmbG93OnNjcm9sbDtcIiB9KVxuXG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuXG4gICAgfVxuICAgIGVsZW1lbnQ6SFRNTEVsZW1lbnRcblxuXG4gICAgY2FwdGlvbigpIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgIHNjcm9sbCh0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDsgICAgXG4gICAgfVxuICAgIFxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRoaXMuZWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5lbGVtZW50LnNjcm9sbFRvcCArIHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICByaWdodDogdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgKyB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZWQoKSB7IH1cbiAgICByZWZyZXNoKCkgeyB9XG5cbiAgICBwcml2YXRlIF91aTogVUkuSFRNTFR5cGVzO1xuICAgIHVpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcmVudDogVUkuVUlDb21wb25lbnQ7XG5cbiAgICBzZXRQYXJlbnQocDogVUkuVUlDb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHA7XG4gICAgfVxuXG4gICAgLy9UT0RPIFJFTU9WRSBDT1BZIFBBU1RFXG4gICAgYWRkQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50fFVJLkJhc2ljQ29tcG9uZW50PGFueT4pIHtcbiAgICAgICAgY2hpbGQuc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgLy90aGlzLmNoYW5nZWQoKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4uZmlsdGVyKHg9PiB4ICE9IGNoaWxkKTtcbiAgICAgICAgLy8gdGhpcy5jaGFuZ2VkKCk7XG4gICAgfVxuICAgIGRvUmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclJlbmRlclVJKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMgbm90IG51bGwgZWxlbWVudDtcbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGZSZW5kZXIoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gPGFueT5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIH1cblxuICAgIGF0dGFjaGVkKCkge1xuICAgICAgICAoPGFueT50aGlzKS5odG1sKHRoaXMuaW5uZXJSZW5kZXJVSSgpKVxuICAgIH1cblxuICAgIGlubmVyUmVuZGVyVUkoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlbGZSZW5kZXIoKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCh4PT4ge1xuICAgICAgICAgICAgdmFyIGVsID0geC5yZW5kZXJVSSgpXG4gICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG5cbiAgICByZW5kZXJVSSgpOiBVSS5IVE1MVHlwZXMge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHBhcmVudCgpOiBhbnkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjaGlsZHJlbigpOiBVSS5VSUNvbXBvbmVudFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICAgIH1cblxuICAgIGlzQXR0YWNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0iXX0=\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/util/ScrollViewUI.js\n// module id = 6\n// module chunks = 0","module.exports = require(\"atom-space-pen-views\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom-space-pen-views\"\n// module id = 7\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UI = require(\"atom-ui-lib\");\nvar detailElements = require(\"./detailElements\");\nvar HTTPANDHTTPS = \"HTTP, HTTPS\";\nvar HTTPHTTPS = \"HTTP/HTTPS\";\nexports.nodes = {\n    Api: {\n        properties: [\"title\", \"version\", \"baseUri\", \"mediaType\", \"protocols\"],\n        actions: []\n    },\n    Resource: {\n        properties: [\"relativeUri\", \"displayName\", \"description\", \"is\", \"type\"]\n    },\n    Method: {\n        properties: [\"method\", \"displayName\", \"description\", \"is\", \"type\", \"protocols\", \"securedBy\"]\n    },\n    DataElement: {\n        properties: [\"name\", \"displayName\", \"description\", \"default\", \"required\"]\n    },\n    Response: {\n        properties: [\"code\", \"description\"]\n    }\n};\nexports.filterOut = {\n    properties: [\"location\", \"annotations\", \"repeat\", \"locationKind\", \"signature\"]\n};\nvar focusedPropertyName = null;\nvar focusedPosition = -1;\nvar toFocus = null;\nfunction updateDetailsPanel(detailsReport, context, panel, updateTextOnDone) {\n    if (updateTextOnDone === void 0) { updateTextOnDone = false; }\n    panel.clear();\n    var cfg = atom.config;\n    var l = atom.styles.emitter.handlersByEventName;\n    var sadd = [].concat(l['did-add-style-element']);\n    var sremove = [].concat(l['did-remove-style-element']);\n    var schange = [].concat(l['did-update-style-element']);\n    var cfgCh = [].concat(cfg.emitter.handlersByEventName['did-change']);\n    var grammars = atom.grammars.emitter.handlersByEventName;\n    var addGrammar = [].concat(grammars[\"did-add-grammar\"]);\n    var updateGrammar = [].concat(grammars[\"did-update-grammar\"]);\n    var emptyGrammarListeners = [].concat(atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"]);\n    try {\n        var empty = true;\n        var item = detailElements.buildItem(detailsReport, context, false);\n        // item.addListener(x=> {\n        //     editorTools.aquireManager().updateText(null);\n        // })\n        var rend;\n        try {\n            rend = item.render({});\n        }\n        finally {\n            if (exports.oldItem) {\n                exports.oldItem.detach();\n            }\n            exports.oldItem = item;\n            if (rend) {\n                panel.addChild(rend);\n            }\n            empty = false;\n        }\n        if (toFocus) {\n            var field = toFocus.getActualField().ui();\n            field.focus();\n            field.getModel().setCursorBufferPosition(focusedPosition);\n            toFocus = null;\n            focusedPosition = null;\n            focusedPropertyName = null;\n        }\n        if (empty) {\n            var errLabel = UI.h3(\"Object has no additional properties.\");\n            UI.applyStyling(UI.TextClasses.WARNING, errLabel);\n            errLabel.setStyle(\"text-align\", \"center\").margin(0, 0, 24, 12);\n            panel.addChild(errLabel);\n        }\n    }\n    catch (Error) {\n        throw Error;\n    }\n    finally {\n        cfg.emitter.handlersByEventName['did-change'] = cfgCh;\n        l['did-add-style-element'] = sadd;\n        l['did-remove-style-element'] = sremove;\n        l['did-update-style-element'] = schange;\n        grammars[\"did-add-grammar\"] = addGrammar;\n        grammars[\"did-update-grammar\"] = updateGrammar;\n        atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"] = emptyGrammarListeners;\n    }\n}\nexports.updateDetailsPanel = updateDetailsPanel;\n// function getSchemaType(value: string)\n// {\n//     var schema = schemautil.createSchema(value, null);\n//     if (!schema || !schema.getType) return \"Invalid\";\n//     switch (schema.getType()) {\n//         case \"source.json\":\n//             return \"JSON\";\n//         case \"text.xml\":\n//             return \"XML\";\n//         default :\n//             return \"Unknown type\";\n//     }\n// }\n// export function getStringValue(x : string | hl.IStructuredValue) : string {\n//     if (typeof x ===\"object\") return (<hl.IStructuredValue>x).valueName();\n//     else return <string>x;\n// }\n//\n// export function propertyInfo(node: hl.IHighLevelNode, name: string) {\n//     var prop = node.definition().property(name);\n//     if (prop.isValueProperty() == false) return null;\n//     var isMulti = prop.isMultiValue();\n//     var required = prop.isRequired();\n//     var value : string;\n//     var values = [];\n//     var type : string;\n//     var ipath: string;\n//     var rangeName = prop.range().nameId();\n//\n//     if (isMulti) {\n//         values = node.attributes(name).map(x=>x.value());\n//         value = values.map(x=>getStringValue(x)).join(\", \");\n//         switch (rangeName) {\n//             case \"StringType\":\n//                 type = 'enum';\n//                 if (!node.definition().getAdapter(def.RAMLService).isUserDefined()&&name==\"protocols\"){\n//                     type=\"protocols\"\n//                 }\n//                 break;\n//             case \"TraitRef\":\n//                 type = 'trait';\n//                 break;\n//             default:\n//                 type = 'unknown';\n//         }\n//     } else {\n//         var attr = node.attr(name);\n//         value = attr && attr.value() ? attr.value() : \"\";\n//\n//         switch (rangeName) {\n//             case \"MarkdownString\":\n//                 type = 'markdown';\n//                 values = value.split(\"\\n\");\n//                 value =  values[0];\n//                 break;\n//             case \"SchemaString\":\n//                 type = 'schema';\n//                 if (value.indexOf(\"\\n\") >= 0) {\n//                     values = [value];\n//                     value = \"(\" + getSchemaType(value) + \" Schema)\";\n//                 }\n//                 break;\n//             case \"ExampleString\":\n//                 type = 'schexample';\n//                 try {\n//                     ipath = attr.lowLevel().includePath();\n//                 } catch(e) { ipath = \"\"; }\n//                 values = [value, ipath];\n//                 value =  \"Example\" + (ipath != \"\" ? \" (referenced from \" + ipath + \")\" : \"\");\n//                 break;\n//             case \"ResourceTypeRef\":\n//                 type = \"type\";\n//                 break;\n//             default:\n//                 type = 'string';\n//         }\n//         if (type == \"string\") {\n//             if (value.indexOf(\"\\n\") >= 0) {\n//                 values = value.split(\"\\n\");\n//                 value = \"(\" + values.length + \" lines) \" + values[0].substring(0, 20) + \" ...\";\n//                 type = \"multiline\";\n//             }\n//             if (attr)\n//                 ipath = attr.lowLevel().includePath();\n//\n//             if (ipath) {\n//                 value = \"(included from \" + ipath +\")\";\n//                 type = \"include\";\n//             }\n//         }\n//     }\n//     var ret = {\n//         value: value,\n//         values: values,\n//         type: type,\n//         include: ipath,\n//         required: required,\n//     };\n//     return ret;\n// }\n// export function stringView(node: hl.IHighLevelNode, name: string) {\n//     return getStringValue(propertyInfo(node, name).value);\n// } \n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/details.js\n// module id = 8\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar UI = require(\"atom-ui-lib\");\n//import contextActions = require(\"raml-actions\")\nvar assistUtils = require(\"../dialogs/assist-utils\");\nvar ramlServer = require(\"raml-language-server\");\nvar lastSelectedCaption;\nvar inRender = false;\n/**\n * Runnable that updates details values remotely\n */\nvar UpdateModelRunnable = /** @class */ (function () {\n    function UpdateModelRunnable(context, item, newValue) {\n        this.context = context;\n        this.item = item;\n        this.newValue = newValue;\n        this.cancelled = false;\n    }\n    /**\n     * Performs the actual business logics.\n     * Should resolve the promise when finished.\n     */\n    UpdateModelRunnable.prototype.run = function () {\n        if (this.context.localModel) {\n            this.context.localModel[this.item.id] = this.newValue;\n            return Promise.resolve();\n        }\n        var connection = ramlServer.getNodeClientConnection();\n        return connection.changeDetailValue(this.context.uri, this.context.position, this.item.id, this.newValue);\n    };\n    /**\n     * Whether two runnable conflict with each other.\n     * Must work fast as its called often.\n     * @param other\n     */\n    UpdateModelRunnable.prototype.conflicts = function (other) {\n        if (isUpdateModelRunnable(other)) {\n            return this.getUri() === other.getUri();\n        }\n        return false;\n    };\n    /**\n     * Cancels the runnable. run() method should do nothing if launched later,\n     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n     */\n    UpdateModelRunnable.prototype.cancel = function () {\n        this.cancelled = true;\n    };\n    /**\n     * Whether cancel() method was called at least once.\n     */\n    UpdateModelRunnable.prototype.isCanceled = function () {\n        return this.cancelled;\n    };\n    UpdateModelRunnable.prototype.getUri = function () {\n        return this.context.uri;\n    };\n    return UpdateModelRunnable;\n}());\n/**\n * Instanceof for UpdateModelRunnable\n * @param runnable\n */\nfunction isUpdateModelRunnable(runnable) {\n    return runnable.getUri != null;\n}\nvar Item = /** @class */ (function () {\n    function Item(_title, description) {\n        if (description === void 0) { description = \"\"; }\n        this._title = _title;\n        this.description = description;\n        this.listeners = [];\n    }\n    Item.prototype.needsSeparateLabel = function () {\n        return false;\n    };\n    Item.prototype.detach = function () {\n        this.dispose();\n        this.children().forEach(function (x) {\n            if (x.detach)\n                x.detach();\n        });\n    };\n    Item.prototype.addListener = function (r) {\n        this.listeners.push(r);\n    };\n    Item.prototype.removeListener = function (r) {\n        this.listeners = this.listeners.filter(function (x) { return x != r; });\n    };\n    Item.prototype.add = function (i) {\n        throw new Error(\"Not supported\");\n    };\n    Item.prototype.root = function () {\n        if (this.parent) {\n            return this.parent.root();\n        }\n        return this;\n    };\n    Item.prototype.title = function () {\n        return this._title;\n    };\n    Item.prototype.children = function () {\n        return [];\n    };\n    Item.prototype.setDescription = function (desc) {\n        this.description = desc;\n    };\n    Item.prototype.setTitle = function (t) {\n        this._title = t;\n    };\n    Item.prototype.render = function (r) {\n        if (r === void 0) { r = {}; }\n        throw new Error(\"Not Implemented\");\n    };\n    Item.prototype.item = function (name) {\n        return null;\n    };\n    Item.prototype.setError = function (text) {\n    };\n    Item.prototype.clearErrors = function () {\n    };\n    return Item;\n}());\nexports.Item = Item;\nvar TypeDisplayItem = /** @class */ (function (_super) {\n    __extends(TypeDisplayItem, _super);\n    function TypeDisplayItem(detailsNode, context) {\n        var _this = _super.call(this, \"Type \" + detailsNode.title, \"\") || this;\n        _this.detailsNode = detailsNode;\n        _this.context = context;\n        return _this;\n    }\n    TypeDisplayItem.prototype.render = function (r) {\n        var container = new UI.WrapPanel();\n        container.setCaption(this.title());\n        return container;\n        //return typeDisplay.render(this.detailsNode);\n    };\n    TypeDisplayItem.prototype.dispose = function () {\n    };\n    return TypeDisplayItem;\n}(Item));\nexports.TypeDisplayItem = TypeDisplayItem;\nvar Category = /** @class */ (function (_super) {\n    __extends(Category, _super);\n    function Category() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._children = [];\n        return _this;\n    }\n    Category.prototype.add = function (i) {\n        i.parent = this;\n        this._children.push(i);\n    };\n    Category.prototype.children = function () {\n        return this._children;\n    };\n    Category.prototype.plainChildren = function () {\n        return this._children.filter(function (x) { return !(x instanceof Category); });\n    };\n    Category.prototype.categories = function () {\n        return this._children.filter(function (x) { return (x instanceof Category); });\n    };\n    Category.prototype.item = function (name) {\n        var it;\n        this._children.forEach(function (x) {\n            if (x.title() == name) {\n                it = x;\n            }\n            var rr = x.item(name);\n            if (rr) {\n                it = rr;\n            }\n        });\n        return it;\n    };\n    Category.prototype.render = function (r) {\n        var _this = this;\n        if (r === void 0) { r = {}; }\n        var section = this.createSection(r);\n        this._result = section;\n        if (this.description && r.showDescription) {\n            this.descriptionLabel = UI.label(this.description);\n            section.addChild(this.descriptionLabel);\n        }\n        this.contributeTop(section);\n        this.plainChildren().forEach(function (x) { return _this.addChild(section, x); });\n        var wrappedChild = this.createWrappedChild(section);\n        this.subCategories = wrappedChild;\n        var cats = this.categories();\n        var remap = {};\n        cats.forEach(function (x) { return remap[x.title()] = x; });\n        var newCats = [];\n        if (remap[\"General\"]) {\n            newCats.push(remap[\"General\"]);\n            delete remap[\"General\"];\n        }\n        if (remap[\"Facets\"]) {\n            newCats.push(remap[\"Facets\"]);\n            delete remap[\"Facets\"];\n        }\n        for (var c in remap) {\n            newCats.push(remap[c]);\n        }\n        newCats.forEach(function (x) { return _this.addChild(wrappedChild, x); });\n        return section;\n    };\n    Category.prototype.detach = function () {\n        _super.prototype.detach.call(this);\n        this._result.dispose();\n    };\n    Category.prototype.createSection = function (r) {\n        if (r.showHeader) {\n            return new UI.Section(UI.h3(this.title()), false);\n        }\n        var pnl = new UI.Panel();\n        pnl.setCaption(this.title());\n        return pnl;\n    };\n    Category.prototype.createWrappedChild = function (section) {\n        return section;\n    };\n    Category.prototype.addChild = function (section, item) {\n        var child = item.render();\n        if (section instanceof UI.TabFolder) {\n            var tf = section;\n            tf.add(child.caption(), UI.Icon.NONE, child);\n        }\n        else {\n            if (item.needsSeparateLabel()) {\n                var firstLabel = UI.label(item.title());\n                firstLabel.margin(0, 5, 0, 0);\n                section.addChild(firstLabel);\n                section.addChild(UI.label(item.description));\n            }\n            section.addChild(child);\n        }\n    };\n    Category.prototype.contributeTop = function (section) {\n    };\n    Category.prototype.dispose = function () {\n    };\n    Category.prototype.setError = function (text) {\n    };\n    Category.prototype.clearErrors = function () {\n        this._children.forEach(function (x) { return x.clearErrors(); });\n    };\n    Category.prototype.update = function (i) {\n    };\n    return Category;\n}(Item));\nvar TopLevelNode = /** @class */ (function (_super) {\n    __extends(TopLevelNode, _super);\n    function TopLevelNode(detailsNode, context) {\n        var _this = _super.call(this, detailsNode.title, detailsNode.description) || this;\n        _this.detailsNode = detailsNode;\n        _this.context = context;\n        _this.ep = null;\n        return _this;\n    }\n    TopLevelNode.prototype.detach = function () {\n        _super.prototype.detach.call(this);\n        this._result.dispose();\n    };\n    TopLevelNode.prototype.createWrappedChild = function (section) {\n        var tf = new UI.TabFolder();\n        tf.setOnSelected(function () {\n            if (!inRender) {\n                lastSelectedCaption = (tf.selectedComponent().caption());\n            }\n        });\n        section.addChild(tf);\n        return tf;\n    };\n    TopLevelNode.prototype.subCategoryByNameOrCreate = function (name) {\n        var item = _.find(this.children(), function (x) { return x.title() == name; });\n        if (!item) {\n            var rs = new Category(name);\n            this.add(rs);\n            return rs;\n        }\n        return item;\n    };\n    TopLevelNode.prototype.addItemToCategory = function (name, it) {\n        if (name == null) {\n            this._children.push(it);\n            it.parent = this;\n            return;\n        }\n        this.subCategoryByNameOrCreate(name).add(it);\n    };\n    TopLevelNode.prototype.contributeTop = function (section) {\n        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n        this.ep = UI.hc(this.errorLabel);\n        this.ep.setDisplay(false);\n        section.addChild(this.ep);\n    };\n    TopLevelNode.prototype.render = function (r) {\n        if (r === void 0) { r = {}; }\n        inRender = true;\n        try {\n            var result = _super.prototype.render.call(this, r);\n            this._options = r;\n            this._panel = result;\n            var tf = this.subCategories;\n            for (var n = 0; n < tf.tabsCount(); n++) {\n                var item = tf.get(n);\n                if (item.header == lastSelectedCaption) {\n                    tf.setSelectedIndex(n);\n                    return result;\n                }\n            }\n            var documentation = \"\";\n            if (this.detailsNode.description) {\n                documentation = this.detailsNode.description;\n            }\n            if (documentation.length && !r.showDescription) {\n                result.addChild(UI.html(\"<hr/>\"));\n                result.addChild(UI.label(documentation, UI.Icon.INBOX, UI.TextClasses.SUBTLE));\n            }\n            this.update(this);\n            return result;\n        }\n        finally {\n            inRender = false;\n        }\n    };\n    TopLevelNode.prototype.dispose = function () {\n        this.detailsNode = null;\n    };\n    TopLevelNode.prototype.update = function (i) {\n        // if (!this._panel){\n        //     return;\n        // }\n        // if (i instanceof PropertyEditorInfo){\n        //     var prInfo=<PropertyEditorInfo>i;\n        //     if (prInfo.property.getAdapter(def.RAMLPropertyService).isTypeExpr()||prInfo.property.isDescriminator()){\n        //         rp.utils.updateType(this.node);\n        //         var extras=<Category>this.item(\"Facets\");\n        //         if (extras&&extras._result) {\n        //             extras._result.clear();\n        //         }\n        //\n        //         var item=buildItem(this.node,false);\n        //         var newExtras=<Category>item.item(\"Facets\");\n        //         if (newExtras) {\n        //             if (extras&&extras._result) {\n        //                 extras._children = newExtras._children;\n        //                 extras._children.forEach(x=>x.parent = extras);\n        //                 if (extras._children.length > 0) {\n        //                     extras._result.setDisplay(true);\n        //                     //workaroung events flow issue in UI.ts\n        //                 }\n        //                 newExtras.children().forEach(x=> {\n        //                     extras._result.addChild(x.render(this._options))\n        //                 })\n        //             }\n        //             else{\n        //                 this._children.push(newExtras);\n        //                 if (this._panel) {\n        //                     this._panel.addChild(newExtras.render(this._options))\n        //                 }\n        //             }\n        //         }\n        //         else{\n        //             if (extras&&extras._result) {\n        //                 extras._result.setDisplay(false);\n        //             }\n        //         }\n        //     }\n        // }\n        // var kp=null;\n        // this.node.definition().allProperties().forEach(x=>{\n        //     if (x.getAdapter(def.RAMLPropertyService).isKey()){\n        //         kp=x;\n        //     }\n        // })\n        // if (kp){\n        //     var keyItem=<PropertyEditorInfo>this.item(kp.nameId());\n        //     if (keyItem){\n        //         var m=keyItem.fld;\n        //         var vl=m.getBinding().get();\n        //         if ((!vl)||vl.trim().length==0){\n        //             this._panel.getBinding().setStatus(UI.errorStatus(\"\"));\n        //         }\n        //         else{\n        //             this._panel.getBinding().setStatus(UI.okStatus());\n        //         }\n        //     }\n        // }\n        //\n        // var errors;\n        //\n        // if(this.node.property() && universehelpers.isExampleProperty(this.node.property())) {\n        //     var parent = this.node.parent()\n        //\n        //     if(parent) {\n        //         var parsed = parent.parsedType();\n        //\n        //         var exampleMeta =  _.find((<any>parsed).metaInfo || [], (meta: any): boolean => {\n        //             return meta && meta._name === 'example';\n        //         });\n        //\n        //         if(exampleMeta) {\n        //             var validateObject = exampleMeta.validateSelf(this.node.types().getAnnotationTypeRegistry());\n        //\n        //             errors = ((validateObject && validateObject.getErrors()) || []).map(error => {\n        //                 return this.node.createIssue(error);\n        //             });\n        //         }\n        //     }\n        // } else {\n        //     errors = this.node.errors();\n        // }\n        //\n        // this.clearErrors();\n        // this.ep.setDisplay(false)\n        // if (!resourceRegistry.hasAsyncRequests() && errors&&errors.length>0){\n        //     var notFound=[];\n        //     errors.forEach(error=>{\n        //         if (error.extras&&error.extras.length>0){\n        //             error=error.extras[0];\n        //         }\n        //         var item = error.node && this.item(error.node.name());\n        //         if (item){\n        //             item.setError(error.message);\n        //         }\n        //         else{notFound.push(error);}\n        //     })\n        //     if (notFound.length>0){\n        //         this.errorLabel.setIcon(UI.Icon.BUG)\n        //         var et=notFound.map(x=>x.node.name()+\":\"+x.message).join(\",\");\n        //         if (et.length>100){\n        //             et=et.substring(0,100)+\"...\";\n        //         }\n        //         this.errorLabel.setText(et)\n        //         this.ep.setDisplay(true);\n        //     }\n        //     else{\n        //         this.ep.setDisplay(false);\n        //     }\n        // }\n    };\n    return TopLevelNode;\n}(Category));\nvar CheckBox2 = /** @class */ (function (_super) {\n    __extends(CheckBox2, _super);\n    function CheckBox2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CheckBox2.prototype.setLabelWidth = function (n) {\n        this.setStyle(\"margin-left\", (n + 2) + \"ch\");\n    };\n    return CheckBox2;\n}(UI.CheckBox));\nvar PropertyEditorInfo = /** @class */ (function (_super) {\n    __extends(PropertyEditorInfo, _super);\n    function PropertyEditorInfo(outlineNode, context) {\n        var _this = _super.call(this, outlineNode.title, outlineNode.description) || this;\n        _this.outlineNode = outlineNode;\n        _this.context = context;\n        _this.rendered = false;\n        _this.update = function (newValue, oldValue) {\n            if (!_this.rendered) {\n                return;\n            }\n            _this.fromEditorToModel(newValue, oldValue);\n        };\n        return _this;\n    }\n    PropertyEditorInfo.prototype.dispose = function () {\n        this.outlineNode = null;\n        this.fld.getBinding().removeListener(this.update);\n    };\n    PropertyEditorInfo.prototype.clearErrors = function () {\n        this.setError(null);\n    };\n    PropertyEditorInfo.prototype.setError = function (text) {\n        if (text) {\n            this.errorLabel.setText(text);\n            this.errorLabel.setDisplay(true);\n        }\n        else {\n            if (this.errorLabel) {\n                this.errorLabel.setDisplay(false);\n            }\n        }\n    };\n    PropertyEditorInfo.prototype.fromEditorToModel = function (newValue, oldValue) {\n        var detailsChangeRunnable = new UpdateModelRunnable(this.context, this.outlineNode, newValue);\n        var context = this.context;\n        context.reconciler.schedule(detailsChangeRunnable).then(function (changedDocuments) {\n            if (context.localModel) {\n                return;\n            }\n            assistUtils.applyChangedDocuments(changedDocuments);\n            assistUtils.gotoPosition(context.position);\n        });\n    };\n    PropertyEditorInfo.prototype.toLocalValue = function (inputValue) {\n        return inputValue;\n    };\n    PropertyEditorInfo.prototype.toUIValue = function (value) {\n        return value;\n    };\n    PropertyEditorInfo.prototype.fromModelToEditor = function () {\n        this.fld.getBinding().set(this.outlineNode.valueText);\n    };\n    PropertyEditorInfo.prototype.render = function () {\n        var container = new UI.WrapPanel();\n        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n        this.errorLabel.setDisplay(false);\n        this.errorLabel.setStyle(\"margin-left\", (this._title.length + 1) + \"ch\");\n        var field = this.createField();\n        this.fld = field;\n        field.getBinding().addListener(this.update);\n        container.setCaption(this.title());\n        this.fromModelToEditor();\n        container.addChild(field);\n        container.addChild(this.errorLabel);\n        this.rendered = true;\n        return container;\n    };\n    PropertyEditorInfo.prototype.createField = function () {\n        return UI.texfField(this.needsSeparateLabel() ? \"\" : this.outlineNode.title, \"\", function (x) { });\n    };\n    return PropertyEditorInfo;\n}(Item));\nvar SimpleMultiEditor = /** @class */ (function (_super) {\n    __extends(SimpleMultiEditor, _super);\n    function SimpleMultiEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // fromEditorToModel(){\n    //     // var field=this.fld;\n    //     // var vl=field.getBinding().get();\n    //     // if (vl==null){\n    //     //     vl=\"\";\n    //     // }\n    //     // var attrs=this.node.attributes(this.property.nameId());\n    //     // var av=attrs.map(x=>escapeValue(\"\"+x.value())).join(\", \");\n    //     // if (av==vl){\n    //     //     return;\n    //     // }\n    //     // var ww=vl.split(\",\");\n    //     // var vl=ww.filter(x=>x.trim().length>0).map(x=>x.trim());\n    //     //\n    //     // if(this.node.lowLevel().includePath() && !this.node.lowLevel().unit().resolve(this.node.lowLevel().includePath())) {\n    //     //     return;\n    //     // }\n    //     //\n    //     // var attribute = this.node.attrOrCreate(this.property.nameId());\n    //     // attribute.setValues(vl)\n    //     //\n    //     // var root=this.root()\n    //     // if (root){\n    //     //     root.update(this);\n    //     // }\n    // }\n    SimpleMultiEditor.prototype.fromModelToEditor = function () {\n        this.fld.getBinding().set(this.outlineNode.valueText);\n    };\n    return SimpleMultiEditor;\n}(PropertyEditorInfo));\nfunction escapeValue(v) {\n    if (v.length > 0) {\n        if (v.charAt(0) == \"'\") {\n            return '\"' + v + '\"';\n        }\n        if (v.charAt(0) == '\"') {\n            return '\"' + v + '\"';\n        }\n    }\n    if (v.indexOf(' ') != -1 || v.indexOf(',') != -1) {\n        if (v.indexOf('\"') == -1) {\n            return '\"' + v + '\"';\n        }\n        if (v.indexOf(\"'\") == -1) {\n            return \"'\" + v + \"'\";\n        }\n    }\n    return v;\n}\nvar CheckBoxField = /** @class */ (function (_super) {\n    __extends(CheckBoxField, _super);\n    function CheckBoxField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CheckBoxField.prototype.createField = function () {\n        return new CheckBox2(this.outlineNode.title, UI.Icon.NONE, function (x) { });\n    };\n    CheckBoxField.prototype.toUIValue = function (value) {\n        if (!value) {\n            return false;\n        }\n        if (value === true || value.trim() === 'true') {\n            return true;\n        }\n        return false;\n    };\n    CheckBoxField.prototype.toLocalValue = function (value) {\n        return value + \"\";\n    };\n    return CheckBoxField;\n}(PropertyEditorInfo));\n// class ActionsItem extends Item{\n//\n//     constructor(private node:hl.IHighLevelNode){\n//         super(\"Actions\",\"\");\n//     }\n//     render(r:RenderingOptions){\n//         return suggestions.generateSuggestionsPanel(this.node);\n//     }\n//     dispose(){\n//         this.node=null;\n//     }\n//\n// }\n// class ContextActionsItem extends Item{\n//     constructor(node:hl.IHighLevelNode,name:string,private actions:contextActions.IContextDependedAction[]){\n//         super(name,\"\");\n//     }\n//     dispose(){\n//\n//     }\n//\n//     render(r:RenderingOptions){\n//         var result=UI.hc();\n//         result.addChild(UI.h3(this.title()))\n//         this.actions.forEach(x=>{\n//             result.addChild(UI.button(x.name,UI.ButtonSizes.EXTRA_SMALL,UI.ButtonHighlights.SUCCESS,UI.Icon.CHECKLIST,a=>x.onClick()).margin(3,3,3,3))\n//         })\n//         return result;\n//     }\n// }\nvar MarkdownFieldUI = /** @class */ (function (_super) {\n    __extends(MarkdownFieldUI, _super);\n    function MarkdownFieldUI(text, onchange) {\n        var _this = _super.call(this, text, onchange) || this;\n        _this.margin(0, 0, 6, 12);\n        _this.setMini(false);\n        _this.setStyle(\"min-height\", \"100px\");\n        //this.setStyle(\"max-height\",\"200px\");\n        _this.setStyle(\"border\", \"solid\");\n        _this.setStyle(\"border-width\", \"1px\");\n        _this.setStyle(\"border-radius\", \"2px\");\n        _this.setStyle(\"font-size\", \"1.15em\");\n        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n        _this.setGrammar('source.mdcustom');\n        return _this;\n    }\n    MarkdownFieldUI.prototype.setLabelWidth = function () {\n    };\n    MarkdownFieldUI.prototype.setLabelHeight = function () {\n    };\n    MarkdownFieldUI.prototype.setRequired = function (v) {\n    };\n    return MarkdownFieldUI;\n}(UI.AtomEditorElement));\nvar XMLField = /** @class */ (function (_super) {\n    __extends(XMLField, _super);\n    function XMLField(text, onchange) {\n        var _this = _super.call(this, text, onchange) || this;\n        _this.margin(0, 0, 6, 12);\n        _this.setMini(false);\n        _this.setStyle(\"min-height\", \"100px\");\n        //this.setStyle(\"max-height\",\"200px\");\n        _this.setStyle(\"border\", \"solid\");\n        _this.setStyle(\"border-width\", \"1px\");\n        _this.setStyle(\"border-radius\", \"2px\");\n        _this.setStyle(\"font-size\", \"1.15em\");\n        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n        _this.setGrammar('text.xml');\n        return _this;\n    }\n    XMLField.prototype.setLabelWidth = function () {\n    };\n    XMLField.prototype.setLabelHeight = function () {\n    };\n    XMLField.prototype.setRequired = function (v) {\n    };\n    return XMLField;\n}(UI.AtomEditorElement));\nvar JSONField = /** @class */ (function (_super) {\n    __extends(JSONField, _super);\n    function JSONField(text, onchange) {\n        var _this = _super.call(this, text, onchange) || this;\n        _this.margin(0, 0, 6, 12);\n        _this.setMini(false);\n        _this.setStyle(\"min-height\", \"100px\");\n        //this.setStyle(\"max-height\",\"200px\");\n        _this.setStyle(\"border\", \"solid\");\n        _this.setStyle(\"border-width\", \"1px\");\n        _this.setStyle(\"border-radius\", \"2px\");\n        _this.setStyle(\"font-size\", \"1.15em\");\n        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n        _this.setGrammar('source.json');\n        return _this;\n    }\n    JSONField.prototype.setLabelWidth = function () {\n    };\n    JSONField.prototype.setLabelHeight = function () {\n    };\n    JSONField.prototype.setRequired = function (v) {\n    };\n    return JSONField;\n}(UI.AtomEditorElement));\nvar MarkdownField = /** @class */ (function (_super) {\n    __extends(MarkdownField, _super);\n    function MarkdownField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MarkdownField.prototype.createField = function () {\n        var editor = new MarkdownFieldUI(\"\", function (x) { });\n        return editor;\n    };\n    MarkdownField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    return MarkdownField;\n}(PropertyEditorInfo));\nvar ExampleField = /** @class */ (function (_super) {\n    __extends(ExampleField, _super);\n    function ExampleField(outlineNode, context) {\n        return _super.call(this, outlineNode, context) || this;\n    }\n    ExampleField.prototype.createField = function () {\n        var editor = new JSONField(this.outlineNode.valueText, function (x) { });\n        return editor;\n    };\n    ExampleField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    ExampleField.prototype.fromModelToEditor = function () {\n    };\n    ExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n    };\n    return ExampleField;\n}(PropertyEditorInfo));\nvar XMLExampleField = /** @class */ (function (_super) {\n    __extends(XMLExampleField, _super);\n    function XMLExampleField(outlineNode, context) {\n        return _super.call(this, outlineNode, context) || this;\n    }\n    XMLExampleField.prototype.createField = function () {\n        var editor = new XMLField(this.outlineNode.valueText, function (x) { });\n        return editor;\n    };\n    XMLExampleField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    XMLExampleField.prototype.fromModelToEditor = function () {\n    };\n    XMLExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n    };\n    return XMLExampleField;\n}(PropertyEditorInfo));\nvar XMLSchemaField = /** @class */ (function (_super) {\n    __extends(XMLSchemaField, _super);\n    function XMLSchemaField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    XMLSchemaField.prototype.createField = function () {\n        var editor = new XMLField(\"\", function (x) { });\n        return editor;\n    };\n    XMLSchemaField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    return XMLSchemaField;\n}(PropertyEditorInfo));\nvar JSONSchemaField = /** @class */ (function (_super) {\n    __extends(JSONSchemaField, _super);\n    function JSONSchemaField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    JSONSchemaField.prototype.createField = function () {\n        var editor = new JSONField(\"\", function (x) { });\n        return editor;\n    };\n    JSONSchemaField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    return JSONSchemaField;\n}(PropertyEditorInfo));\nvar SelectBox = /** @class */ (function (_super) {\n    __extends(SelectBox, _super);\n    function SelectBox(outlineNode, context) {\n        var _this = _super.call(this, outlineNode, context) || this;\n        _this.outlineNode = outlineNode;\n        return _this;\n    }\n    SelectBox.prototype.createField = function () {\n        var options = this.outlineNode.options ? this.outlineNode.options : [];\n        var select = new UI.SelectField(this.outlineNode.title, function (x) { }, \"\", UI.Icon.NONE, options);\n        select.getActualField().setOptions(options);\n        return select;\n    };\n    return SelectBox;\n}(PropertyEditorInfo));\nvar TypeSelectBox = /** @class */ (function (_super) {\n    __extends(TypeSelectBox, _super);\n    function TypeSelectBox() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TypeSelectBox.prototype.fromEditorToModel = function (newValue, oldValue) {\n        // //current implementation only allows changing the facets of certain types for safety\n        // //TODO change this to arbitrary facets (remove type filtering)\n        //\n        // var oldNames : string[] = [];\n        // var savedAttrs = [];\n        // if (newValue && oldValue) {\n        //     try {\n        //         this.node.definition().allSuperTypes().forEach(superType=> {\n        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n        //                 this.addTypeFacets(superType, oldNames)\n        //             }\n        //         })\n        //\n        //         savedAttrs = [].concat(this.node.attrs())\n        //     } catch (err) {console.log(err)}\n        // }\n        //\n        // super.fromEditorToModel();\n        //\n        // if (newValue && oldValue) {\n        //     try {\n        //         //collecting facets allowed to remove\n        //         var currentUniverse = this.node.definition().universe();\n        //         var names : string[] = [];\n        //\n        //         this.node.definition().allSuperTypes().forEach(superType=>{\n        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n        //                 this.addTypeFacets(superType, names)\n        //             }\n        //         })\n        //\n        //         if (oldNames.length > 0 && names.length > 0) {\n        //             savedAttrs.forEach(attribute => {\n        //                 if (_.find(oldNames, facetName => facetName == attribute.name())\n        //                     && !_.find(names, facetName => facetName == attribute.name())) {\n        //\n        //                     this.node.remove(attribute)\n        //                 }\n        //             })\n        //         }\n        //     } catch (err) {console.log(err)}\n        // }\n    };\n    return TypeSelectBox;\n}(SelectBox));\nvar TreeField = /** @class */ (function (_super) {\n    __extends(TreeField, _super);\n    function TreeField(outlineNode, context) {\n        var _this = _super.call(this) || this;\n        _this.context = context;\n        var renderer = {\n            render: function (node) {\n                var left = UI.label(node.title, UI.Icon.CIRCUIT_BOARD, UI.TextClasses.HIGHLIGHT);\n                var right = UI.label(node.valueText ? (\":\" + node.valueText) : \"\", UI.Icon.NONE, UI.TextClasses.SUCCESS);\n                var result = UI.hc(left, right);\n                return result;\n            }\n        };\n        var getChildren = function (node) {\n            return node.children ? node.children : [];\n        };\n        var viewer = UI.treeViewer(getChildren, renderer, function (x) { return x.title; });\n        var inputValue = {\n            children: [outlineNode]\n        };\n        viewer.setInput(inputValue);\n        _this.addChild(UI.label(outlineNode.title));\n        _this.addChild(viewer);\n        return _this;\n    }\n    TreeField.prototype.setLabelWidth = function () {\n    };\n    TreeField.prototype.setLabelHeight = function () {\n    };\n    TreeField.prototype.setRequired = function (v) {\n    };\n    return TreeField;\n}(UI.Panel));\nvar StructuredField = /** @class */ (function (_super) {\n    __extends(StructuredField, _super);\n    function StructuredField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StructuredField.prototype.createField = function () {\n        var children = this.outlineNode.children;\n        if (!children || children.length != 1)\n            return null;\n        var tm = new TreeField(children[0], this.context);\n        return tm;\n    };\n    return StructuredField;\n}(PropertyEditorInfo));\nvar LowLevelTreeField = /** @class */ (function (_super) {\n    __extends(LowLevelTreeField, _super);\n    function LowLevelTreeField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LowLevelTreeField.prototype.createField = function () {\n        var children = this.outlineNode.children;\n        if (!children || children.length != 1)\n            return null;\n        var tm = new TreeField(children[0], this.context);\n        return tm;\n    };\n    return LowLevelTreeField;\n}(PropertyEditorInfo));\n// function category(p:hl.IProperty,node:hl.IHighLevelNode):string{\n//     if (p.getAdapter(def.RAMLPropertyService).isKey()||p.isRequired()){\n//         return null;\n//     }\n//     if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()) {\n//         if (universehelpers.isDocumentationProperty(p) ||\n//             universehelpers.isUsageProperty(p) ||\n//             universehelpers.isDescriptionProperty(p) ||\n//             universehelpers.isDisplayNameProperty(p) ||\n//             universehelpers.isTitleProperty(p)) {\n//             return \"Documentation\";\n//         }\n//         if (universehelpers.isAnnotationsProperty(p) ||\n//             universehelpers.isIsProperty(p) ||\n//             universehelpers.isSecuredByProperty(p) ||\n//             (universehelpers.isTypeProperty(p)&&!p.getAdapter(def.RAMLPropertyService).isTypeExpr())) {\n//             return \"References\";\n//         }\n//         if (universehelpers.isProtocolsProperty(p)){\n//             return \"General\";\n//         }\n//     }\n//\n//     if (universehelpers.isTypeProperty(p)){\n//         if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()){\n//             return null;\n//         }\n//     }\n//     if (node.property()) {\n//         if (p.domain() && p.domain() != node.property().range()) {\n//             return \"Facets\";\n//         }\n//     }\n//     return \"General\";\n// }\n//\n// var valueOptions = function (x:hl.IProperty, node:hl.IHighLevelNode):string[] {\n//     var vls = search.enumValues(x,node);\n//     if (universehelpers.isNameProperty(x)){\n//         if (node.definition().isAssignableFrom(universe.Universe10.TypeDeclaration.name)){\n//             if (node.property()&&universehelpers.isBodyProperty(node.property())){\n//                 if (!(node.property() instanceof def.UserDefinedProp)) {\n//                     if (node.parent()&&\n//                         universehelpers.isMethodType(node.parent().definition())){\n//                         return [\"application/json\", \"application/xml\",\"multipart/form-data\",\"application/x-www-form-urlencoded\"]\n//                     }\n//                     return [\"application/json\", \"application/xml\"]\n//                 }\n//             }\n//         }\n//     }\n//     if ((!vls) || vls.length == 0) {\n//         var sug = (<def.Property>x).suggester()\n//         if (sug) {\n//             vls = sug(node);\n//\n//         }\n//         if ((!vls) || vls.length == 0) {\n//             vls = (<def.Property>x).getOftenKeys();\n//\n//         }\n//     }\n//     return _.unique(vls);\n// };\n//\n// function addExampleControl(property: hl.IProperty, node : hl.IHighLevelNode,\n//                            exampleElement : hl.IHighLevelNode, example : def.rt.nominalTypes.IExpandableExample,\n//                            container : TopLevelNode) {\n//\n//     if (example.isYAML()) {\n//         container.addItemToCategory(category(property, node),\n//             new LowLevelTreeField(property, node, exampleElement.lowLevel(), example.name()));\n//     } else if (example.isJSONString()) {\n//         container.addItemToCategory(category(property, node),\n//             new ExampleField(property, node, example.asString(), example.name()));\n//     } else if (example.isXMLString()) {\n//         container.addItemToCategory(category(property, node),\n//             new XMLExampleField(property, node, example.asString(), example.name()));\n//     }\n// }\nfunction buildItem(detailsNode, context, dialog) {\n    var root = new TopLevelNode(detailsNode, context);\n    if (detailsNode.children) {\n        for (var _i = 0, _a = detailsNode.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            if (child.type == \"CATEGORY\") {\n                var categoryName = child.title;\n                if (child.children) {\n                    for (var _b = 0, _c = child.children; _b < _c.length; _b++) {\n                        var childOfChild = _c[_b];\n                        buildItemInCategory(childOfChild, root, categoryName, context);\n                    }\n                }\n            }\n            else {\n                buildItemInCategory(child, root, null, context);\n            }\n        }\n    }\n    return root;\n}\nexports.buildItem = buildItem;\nfunction buildItemInCategory(detailsNode, root, categoryName, context) {\n    var item = null;\n    if (detailsNode.type == \"CHECKBOX\") {\n        item = new CheckBoxField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"JSONSCHEMA\"\n        && detailsNode.valueText !== null) {\n        item = new JSONSchemaField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"XMLSCHEMA\"\n        && detailsNode.valueText !== null) {\n        item = new XMLSchemaField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"MARKDOWN\") {\n        item = new MarkdownField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"SELECTBOX\"\n        && detailsNode.options !== null) {\n        item = new SelectBox(detailsNode, context);\n    }\n    else if (detailsNode.type == \"MULTIEDITOR\") {\n        item = new SimpleMultiEditor(detailsNode, context);\n    }\n    else if (detailsNode.type == \"TREE\") {\n        item = new LowLevelTreeField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"STRUCTURED\") {\n        item = new StructuredField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"TYPEDISPLAY\") {\n        item = new TypeDisplayItem(detailsNode, context);\n    }\n    else if (detailsNode.type == \"TYPESELECT\") {\n        item = new TypeSelectBox(detailsNode, context);\n    }\n    else if (detailsNode.type == \"JSONEXAMPLE\"\n        && detailsNode.valueText !== null) {\n        item = new ExampleField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"XMLEXAMPLE\"\n        && detailsNode.valueText !== null) {\n        item = new XMLExampleField(detailsNode, context);\n    }\n    else if (detailsNode.type == \"ATTRIBUTETEXT\") {\n        item = new PropertyEditorInfo(detailsNode, context);\n    }\n    if (item != null) {\n        root.addItemToCategory(categoryName, item);\n    }\n    else {\n        console.log(\"Can not recognize element \" + detailsNode.type);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/detailElements.js\n// module id = 9\n// module chunks = 0","module.exports = require(\"underscore\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"underscore\"\n// module id = 10\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar UI = require(\"atom-ui-lib\");\nvar SpacePenViews = require(\"atom-space-pen-views\");\n// import yaml = require(\"yaml-ast-parser\")\nvar linterUI = require(\"../core/linter-ui\");\nvar editorTools = require(\"../editor-tools/editor-tools\");\nvar ramlServer = require(\"raml-language-server\");\nvar textEditProcessor = ramlServer.textEditProcessor;\n// export function createGlobalSchema(attr:hl.IAttribute){\n//     var r=attr.parent().root();\n//     var t:def.NodeClass=<def.NodeClass>attr.property().range().universe().type(\"GlobalSchema\");\n//     var sc=stubs.createStubNode(t,(<any>t.universe().type(\"Api\")).property(\"schemas\"),\"\"+attr.value());\n//     sc.attrOrCreate(\"value\").setValue(\"!include \"+\"schemas/\"+attr.value()+\".json\")\n//     r.add(sc);\n//     var ed=atom.workspace.getActiveTextEditor();\n//     ed.getBuffer().setText(r.lowLevel().unit().contents());\n//     var sdir=path.resolve(path.dirname(ed.getPath()),\"schemas\");\n//     if (!fs.existsSync(sdir)){\n//         fs.mkdirSync(sdir);\n//     }\n//     var shFile=path.resolve(sdir,attr.value()+\".json\");\n//     fs.writeFileSync(shFile,`\n// {\n//   \"$schema\" : \"http://json-schema.org/draft-04/schema\" ,\n//   \"type\" : \"object\" ,\n//   \"properties\" : {\n//    }\n// }\n// `)\n//    atom.workspace.open(shFile,{});\n// }\n// export function createGlobalSchemaFromNameAndContent(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n//     if (universeHelpers.isRAML10Node(root)) {\n//         createGlobalSchemaFromNameAndContent10(root, name, schp, content, absolutePath);\n//     } else if (universeHelpers.isRAML08Node(root)) {\n//         createGlobalSchemaFromNameAndContent08(root, name, schp, content, absolutePath);\n//     }\n// }\nfunction createSchemaFile(content, schemaPath, absolutePath) {\n    var ed = getActiveEditor();\n    var sdir = absolutePath ? path.dirname(absolutePath) : path.resolve(path.dirname(ed.getPath()), path.dirname(schemaPath));\n    if (!fs.existsSync(sdir)) {\n        fs.mkdirSync(sdir);\n    }\n    var shFile = absolutePath ? absolutePath : path.resolve(path.dirname(ed.getPath()), schemaPath);\n    fs.writeFileSync(shFile, content);\n}\n// export function createGlobalSchemaFromNameAndContent10(root:hl.IHighLevelNode,name:string,\n//                                                        schemaPath:string,content:string, absolutePath?: string){\n//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe10.TypeDeclaration.name);\n//     var sc=stubs.createStubNode(t,\n//         (<any>t.universe().type(universes.Universe10.Api.name)).property(universes.Universe10.Api.properties.types.name),\n//         \"\"+name);\n//\n//     sc.attrOrCreate(universes.Universe10.TypeDeclaration.properties.type.name).setValue(\"!include \"+schemaPath)\n//\n//     root.add(sc);\n//\n//     createSchemaFile(content, schemaPath, absolutePath);\n// }\n// export function createGlobalSchemaFromNameAndContent08(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe08.GlobalSchema.name);\n//     var sc=stubs.createStubNode(t,\n//         (<any>t.universe().type(universes.Universe08.Api.name)).property(universes.Universe08.Api.properties.schemas.name),\n//         \"\"+name);\n//\n//     sc.attrOrCreate(universes.Universe08.GlobalSchema.properties.value.name).setValue(\"!include \"+schp)\n//\n//     root.add(sc);\n//\n//     createSchemaFile(content, schp, absolutePath);\n// }\n// export function saveExample(r:hl.IHighLevelNode,schp:string,content:string){\n//     var ed=getActiveEditor();\n//     var sdir=path.resolve(path.dirname(ed.getPath()),path.dirname(schp));\n//     if (!fs.existsSync(sdir)){\n//         fs.mkdirSync(sdir);\n//     }\n//     var shFile=path.resolve(path.dirname(ed.getPath()),schp);\n//     fs.writeFileSync(shFile,content)\n// }\nvar NewProjectDialog = /** @class */ (function () {\n    function NewProjectDialog(title) {\n        if (title === void 0) { title = \"Create RAML Project\"; }\n        this.title = title;\n        this.apititle = \"New API\";\n        this.version = \"v1\";\n        this.baseUri = \"http://api.samplehost.com\";\n        this._raml1 = true;\n        this._defStructure = true;\n        this._createSampleResource = true;\n        this.sourceValue = path.resolve(this.generateDefaultProjectParentFolder(), \"newRamlProject\");\n    }\n    NewProjectDialog.prototype.generateDefaultProjectParentFolder = function () {\n        return UI.fdUtils.getHome();\n    };\n    NewProjectDialog.prototype.extraContent = function (s) {\n    };\n    NewProjectDialog.prototype.validateProjectLocation = function (value) {\n        var toValidate = value ? value.trim() : \"\";\n        if (!toValidate) {\n            return UI.errorStatus(\"Path should't be empty\");\n        }\n        var parentDirectory = path.dirname(toValidate);\n        if (!parentDirectory || parentDirectory == \".\")\n            return UI.errorStatus(\"Can not find path parent\");\n        if (!fs.existsSync(parentDirectory))\n            return UI.errorStatus(\"Parent directory does not exist\");\n        return UI.okStatus();\n    };\n    NewProjectDialog.prototype.validateTitle = function (value) {\n        var toValidate = value ? value.trim() : \"\";\n        if (!toValidate || toValidate.length < 1) {\n            return UI.errorStatus(\"Title field is required\");\n        }\n        return UI.okStatus();\n    };\n    NewProjectDialog.prototype.show = function () {\n        var _this = this;\n        var zz = null;\n        var section = UI.section(this.title, UI.Icon.BOOK, false, false, UI.h3(\"Please select location to place your project:\")).pad(10, 10);\n        var panel = new UI.Panel(UI.LayoutType.BLOCK);\n        var statusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n        var slf = new UI.CustomField(\"\", statusLabel, function (x) { return x; });\n        slf.setDisplay(this.validateProjectLocation(this.sourceValue).code == UI.StatusCode.ERROR);\n        panel.addChild(slf);\n        var projectLocationInput = UI.texfField(\"\", this.sourceValue, function (x) { return _this.sourceValue = x.getBinding().get(); });\n        projectLocationInput.getBinding().addValidator(function () { return _this.validateProjectLocation(_this.sourceValue); });\n        projectLocationInput.setStyle(\"width\", \"400px\");\n        projectLocationInput.getBinding().addListener(function (value) {\n            //var st = projectLocationInput.getBinding().status()\n            var st = _this.validateProjectLocation(value);\n            if (st.code != UI.StatusCode.ERROR) {\n                //this.updateUI(q, x)\n                statusLabel.setText(\"\");\n                statusLabel.setIcon(UI.Icon.NONE);\n                slf.setDisplay(false);\n            }\n            else {\n                statusLabel.setText(st.message);\n                statusLabel.setIcon(UI.Icon.BUG);\n                slf.setDisplay(true);\n            }\n        });\n        panel.addChild(\n        //UI.hc(\n        projectLocationInput\n        //UI.buttonSimple(\"Browse\",\n        //    ()=>UI.fdUtils..openFolderDialog(\"Select project location\",\n        //            newLocation=> {\n        //                this.sourceValue=newLocation\n        //                projectLocationInput.getBinding().set(newLocation)\n        //                //var atomEditor = projectLocationInput.getActualField()\n        //                //var atomEditorUI = atomEditor.ui()\n        //                //var atomEditorUIModel = atomEditorUI.getModel();\n        //                //atomEditorUIModel.setText(newLocation)\n        //            },\n        //            true, this.sourceValue)\n        //).margin(10,0).setStyle(\"margin-bottom\", \"0.75em\")\n        //).setPercentWidth(100)\n        );\n        panel.addChild(UI.h3(\"Title of your API:\"));\n        var titleStatusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n        var titleStatusMessage = new UI.CustomField(\"\", titleStatusLabel, function (x) { return x; });\n        titleStatusMessage.setDisplay(false);\n        panel.addChild(titleStatusMessage);\n        var titleTextField = UI.texfField(\"\", this.apititle, function (x) { return _this.apititle = x.getBinding().get(); });\n        titleTextField.getBinding().addValidator(function () { return _this.validateTitle(_this.apititle); });\n        titleTextField.getBinding().addListener(function (value) {\n            var status = _this.validateTitle(value);\n            if (status.code !== UI.StatusCode.ERROR) {\n                titleStatusLabel.setText(\"\");\n                titleStatusLabel.setIcon(UI.Icon.NONE);\n                titleStatusMessage.setDisplay(false);\n            }\n            else {\n                titleStatusLabel.setText(status.message);\n                titleStatusLabel.setIcon(UI.Icon.BUG);\n                titleStatusMessage.setDisplay(true);\n            }\n        });\n        panel.addChild(titleTextField);\n        panel.addChild(UI.h3(\"Version of your API\"));\n        panel.addChild(UI.texfField(\"\", this.version, function (x) { return _this.version = x.getBinding().get(); }));\n        panel.addChild(UI.h3(\"Base URI of your API\"));\n        panel.addChild(UI.texfField(\"\", this.baseUri, function (x) { return _this.baseUri = x.getBinding().get(); }));\n        section.addChild(panel);\n        var r1 = UI.checkBox(\"Use RAML 1.0\");\n        r1.setValue(this._raml1);\n        r1.getBinding().addListener(function (x) { return _this._raml1 = r1.getValue(); });\n        section.addChild(r1);\n        var r2 = UI.checkBox(\"Create default directory structure\");\n        r2.setValue(this._defStructure);\n        r2.getBinding().addListener(function (x) { return _this._defStructure = r2.getValue(); });\n        section.addChild(r2);\n        var r3 = UI.checkBox(\"Create sample resource and method\");\n        r3.setValue(this._createSampleResource);\n        r3.getBinding().addListener(function (x) { return _this._createSampleResource = r3.getValue(); });\n        section.addChild(r3);\n        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) { zz.destroy(); }).margin(10, 10));\n        buttonBar.addChild(UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n            if (_this.validateTitle(_this.apititle).code === UI.StatusCode.ERROR) {\n                return;\n            }\n            if (_this.validateProjectLocation(_this.sourceValue).code === UI.StatusCode.ERROR) {\n                return;\n            }\n            _this.onOk(zz);\n            zz.destroy();\n        }));\n        section.addChild(buttonBar);\n        zz = atom.workspace.addModalPanel({ item: section.renderUI() });\n    };\n    NewProjectDialog.prototype.createIfNotExist = function (p) {\n        var ps = path.resolve(this.sourceValue, p);\n        if (!fs.existsSync(ps)) {\n            fs.mkdirSync(ps);\n        }\n    };\n    NewProjectDialog.prototype.onOk = function (zz) {\n        if (!fs.existsSync(this.sourceValue)) {\n            fs.mkdirSync(this.sourceValue);\n        }\n        if (this._defStructure) {\n            this.createIfNotExist(\"schemas\");\n            this.createIfNotExist(\"examples\");\n            this.createIfNotExist(\"traits\");\n            this.createIfNotExist(\"resourceTypes\");\n            this.createIfNotExist(\"securitySchemes\");\n            this.createIfNotExist(\"documentation\");\n            if (this._raml1) {\n                this.createIfNotExist(\"notebooks\");\n                this.createIfNotExist(\"scripts\");\n            }\n        }\n        var content = createRAMLFile(this.apititle, this.version, this.baseUri, this._createSampleResource, this._raml1);\n        var ps = path.resolve(this.sourceValue, \"api.raml\");\n        fs.writeFileSync(ps, content);\n        atom.open({ pathsToOpen: [this.sourceValue, ps] });\n    };\n    return NewProjectDialog;\n}());\nfunction createRAMLFile(title, version, baseUri, sample, raml1) {\n    if (sample === void 0) { sample = true; }\n    if (raml1 === void 0) { raml1 = true; }\n    var apiLines = [(raml1 ? \"#%RAML 1.0\" : \"#%RAML 0.8\"), \"title: \" + title];\n    if (version)\n        apiLines.push(\"version: \" + version);\n    if (baseUri)\n        apiLines.push(\"baseUri: \" + baseUri);\n    var typesLines = [\n        'types:',\n        '  TestType:',\n        '    type: object',\n        '    properties:',\n        '      id: number',\n        '      optional?: string',\n        '      expanded:',\n        '        type: object',\n        '        properties:',\n        '          count: number'\n    ], resourceLines = [\n        '/helloWorld:',\n        '  get:',\n        '    responses:',\n        '      200:',\n        '        body:',\n        '          application/json:',\n        '            example: |',\n        '              {',\n        '                \"message\" : \"Hello World\"',\n        '              }'\n    ];\n    var result = apiLines;\n    if (sample) {\n        if (raml1)\n            result = result.concat(typesLines);\n        result = result.concat(resourceLines);\n    }\n    return result.join('\\n') + '\\n';\n}\nexports.createRAMLFile = createRAMLFile;\nfunction newProject() {\n    new NewProjectDialog().show();\n}\nexports.newProject = newProject;\n// export function moveResource(h:hl.IHighLevelNode){\n//     new move.MoveElementsDialog(h, \"Resource Type\",true).show()\n// }\nfunction splitOnLines(text) {\n    var lines = text.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n    return lines;\n}\nexports.splitOnLines = splitOnLines;\nfunction cleanEmptyLines(text) {\n    var lines = splitOnLines(text);\n    var rs = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (lines[i].trim().length > 0) {\n            rs.push(lines[i]);\n        }\n    }\n    return rs.join(\"\");\n}\nexports.cleanEmptyLines = cleanEmptyLines;\n//FIXME remove it from here duplication with jsyaml2lowLevel.ts\nfunction stripIndent(text, indent) {\n    var lines = splitOnLines(text);\n    var rs = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (i == 0) {\n            rs.push(lines[0]);\n        }\n        else {\n            rs.push(lines[i].substring(indent.length));\n        }\n    }\n    return rs.join(\"\");\n}\n// var leadingIndent = function (node:lowLevel.ILowLevelASTNode, text:string) {\n//     var leading = \"\";\n//     var pos = node.start() - 1;\n//     while (pos > 0) {\n//         var ch = text[pos];\n//         if (ch == '\\r' || ch == '\\n') break;\n//         leading = ch + leading;\n//         pos--;\n//     }\n//     return leading;\n// };\nfunction indent(line) {\n    var rs = \"\";\n    for (var i = 0; i < line.length; i++) {\n        var c = line[i];\n        if (c == '\\r' || c == '\\n') {\n            continue;\n        }\n        if (c == ' ' || c == '\\t') {\n            rs += c;\n            continue;\n        }\n        break;\n    }\n    return rs;\n}\nfunction getActiveEditor() {\n    var activeEditor = atom.workspace.getActiveTextEditor();\n    if (activeEditor) {\n        return activeEditor;\n    }\n    if (editorTools.aquireManager())\n        return editorTools.aquireManager().getCurrentEditor();\n    return null;\n}\nexports.getActiveEditor = getActiveEditor;\n/**\n * Sets active editor cursor at the position (starting from 0).\n * @param position\n */\nfunction gotoPosition(position) {\n    var activeEditor = getActiveEditor();\n    if (!activeEditor) {\n        return;\n    }\n    var bufferPos = activeEditor.getBuffer().positionForCharacterIndex(position);\n    activeEditor.setSelectedBufferRange({ start: bufferPos, end: bufferPos }, {});\n}\nexports.gotoPosition = gotoPosition;\nfunction gotoDeclaration() {\n    var editor = getActiveEditor();\n    if (!editor)\n        return;\n    var position = editor.getCursorBufferPosition();\n    var offset = editor.getBuffer().characterIndexForPosition(position);\n    var path = editor.getPath();\n    ramlServer.getNodeClientConnection().openDeclaration(path, offset).then(function (locations) {\n        if (!locations)\n            return;\n        atom.workspace.open(locations[0].uri, {}).then(function (x) {\n            var activeEditor = getActiveEditor();\n            var p1 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.start);\n            var p2 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.end);\n            activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n        });\n    });\n}\nexports.gotoDeclaration = gotoDeclaration;\n// export class MoveToNewFileDialog{\n//\n//     constructor(private node:hl.IHighLevelNode){\n//\n//     }\n//     destination:string;\n//\n//     show(){\n//         var zz:any=null;\n//         var node=this.node;\n//         var vc=UI.section(\"Move node content to new file \",UI.Icon.GIST_NEW,false,false);\n//         var errorLabel=UI.label(\"please enter correct destination path\",UI.Icon.BUG,UI.TextClasses.ERROR,UI.HighLightClasses.NONE);\n//         vc.addChild(UI.vc(errorLabel));\n//         vc.addChild(UI.label(\"Please enter destination path\"));\n//         var txt=UI.texfField(\"\",\"\",x=>{\n//             if (!txt){\n//                 return;\n//             }\n//             this.destination=txt.getBinding().get();\n//             var isError=this.destination.trim().length==0\n//             if (!isError) {\n//                 if (path.extname(this.destination) != '.raml') {\n//                     isError = true;\n//                 }\n//             }\n//             if (!isError) {\n//                 var dir = path.resolve(path.dirname(getActiveEditor().getPath()), path.dirname(this.destination));\n//                 if (!fs.existsSync(dir)) {\n//                     isError = true;\n//                 }\n//                 else{\n//                     var st=fs.statSync(dir)\n//                     if (!st.isDirectory()){\n//                         isError=true;\n//                     }\n//                 }\n//             }\n//\n//             errorLabel.setDisplay(isError);\n//             okButton.setDisabled(isError);\n//         });\n//         vc.addChild(UI.vc(txt));\n//         var buttonBar=UI.hc().setPercentWidth(100).setStyle(\"display\",\"flex\");\n//         buttonBar.addChild(UI.label(\"\",null,null,null).setStyle(\"flex\",\"1\"))\n//         buttonBar.addChild(UI.button(\"Cancel\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.NO_HIGHLIGHT,UI.Icon.NONE,x=>{zz.destroy()}).margin(10,10))\n//         var okButton=UI.button(\"Move\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.SUCCESS,UI.Icon.NONE,x=>{\n//             var d=path.resolve(path.dirname(getActiveEditor().getPath()), this.destination);\n//             var dump=this.node.lowLevel().dump();\n//             var ci=splitOnLines(dump);\n//             var li=ci.length>1?indent(ci[1]):indent(ci[0]);\n//             dump=dump.substring(this.node.lowLevel().keyEnd()-this.node.lowLevel().start()+1).trim();\n//             dump=stripIndent(dump,li);\n//             dump=\"#%RAML 0.8 \"+this.node.definition().nameId()+\"\\n\"+dump;\n//             fs.writeFileSync(d,dump);\n//             //no we need to replace content of the node with text;\n//\n//             var txt=node.lowLevel().unit().contents();\n//             var endPart=txt.substring(node.lowLevel().end());\n//             var startPart=txt.substring(0,node.lowLevel().keyEnd()+1);\n//             var vl=startPart+\" !include \"+this.destination+endPart;\n//             getActiveEditor().setText(vl);\n//             zz.destroy();\n//         });\n//         okButton.setDisabled(true)\n//         buttonBar.addChild(okButton);\n//         vc.addChild(buttonBar)\n//         var html=vc.renderUI();\n//         zz=(<any>atom).workspace.addModalPanel( { item: html});\n//         html.focus();\n//     }\n//\n//\n// }\n// export function moveOut(h:hl.IHighLevelNode){\n//     new MoveToNewFileDialog(h).show()\n// }\nfunction revalidate() {\n    var currentEditor = getActiveEditor();\n    if (!currentEditor)\n        return;\n    linterUI.relint(currentEditor);\n}\nexports.revalidate = revalidate;\n/**\n * Gets opened editor for specified path or uri.\n * Currently only returns active editor if applicable, in future may also return other opened editors.\n * @param path\n * @returns {any}\n */\nfunction getEditorByUriOrPath(path) {\n    //TODO consider also returning other opened editors\n    var activeEditor = getActiveEditor();\n    if (activeEditor.getPath() == path)\n        return activeEditor;\n    return null;\n}\nexports.getEditorByUriOrPath = getEditorByUriOrPath;\n/**\n * Applies a set of changed documents to current documents and files\n * @param changedDocuments\n */\nfunction applyChangedDocuments(changedDocuments) {\n    for (var _i = 0, changedDocuments_1 = changedDocuments; _i < changedDocuments_1.length; _i++) {\n        var changedDocument = changedDocuments_1[_i];\n        var editor = getEditorByUriOrPath(changedDocument.uri);\n        var oldContents = null;\n        if (editor) {\n            oldContents = editor.getText();\n        }\n        else {\n            oldContents = fs.readFileSync(changedDocument.uri).toString();\n        }\n        var newText = null;\n        if (changedDocument.text) {\n            newText = changedDocument.text;\n        }\n        else if (changedDocument.textEdits) {\n            newText = textEditProcessor.applyDocumentEdits(oldContents, changedDocument.textEdits);\n        }\n        else {\n            continue;\n        }\n        if (editor) {\n            editor.getBuffer().setText(newText);\n        }\n        else {\n            fs.writeFileSync(changedDocument.uri, newText);\n        }\n    }\n}\nexports.applyChangedDocuments = applyChangedDocuments;\n/**\n * Tries to detect the name/symbol at position.\n * In practise it is impossible to do properly in all cases unless having AST at hands\n * or making the server to do this, but MS LSP does not have an interface for this.\n *\n * @param contents\n * @param offset\n */\nfunction findCurrentName(contents, offset) {\n    //we cant use alpha-numeric detection due to potential non-english alphabets.\n    //so we have to defined some stop characters and expand the list when a bug case is detected\n    var stopCharacters = [\n        \"\\r\", \"\\n\", \"[\", \"]\", \":\", \".\", \",\", \" \", \"\\t\", \"{\", \"}\", \"'\", \"'\", \"\\\"\"\n    ];\n    var beginning = 0;\n    for (var currentOffset = offset - 1; currentOffset >= 0; currentOffset--) {\n        var currentChar = contents.charAt(currentOffset);\n        var found = false;\n        for (var _i = 0, stopCharacters_1 = stopCharacters; _i < stopCharacters_1.length; _i++) {\n            var stopChar = stopCharacters_1[_i];\n            if (currentChar == stopChar) {\n                beginning = currentOffset + 1;\n                found = true;\n                break;\n            }\n        }\n        if (found)\n            break;\n    }\n    var end = contents.length;\n    for (var currentOffset = offset; currentOffset < contents.length; currentOffset++) {\n        var currentChar = contents.charAt(currentOffset);\n        var found = false;\n        for (var _a = 0, stopCharacters_2 = stopCharacters; _a < stopCharacters_2.length; _a++) {\n            var stopChar = stopCharacters_2[_a];\n            if (currentChar == stopChar) {\n                end = currentOffset;\n                found = true;\n                break;\n            }\n        }\n        if (found)\n            break;\n    }\n    return contents.substring(beginning, end);\n}\n/**\n * Activates renaming for current active editor and cursor position\n */\nfunction renameRAMLElement() {\n    var editor = getActiveEditor();\n    if (!editor)\n        return;\n    if (path.extname(editor.getPath()) != '.raml')\n        return;\n    var position = editor.getCursorBufferPosition();\n    var offset = editor.getBuffer().characterIndexForPosition(position);\n    var editorPath = editor.getPath();\n    var currentName = findCurrentName(editor.getText(), offset);\n    UI.prompt(\"Enter new name for: \", function (newName) {\n        ramlServer.getNodeClientConnection().\n            rename(editorPath, offset, newName).then(function (changedDocuments) {\n            applyChangedDocuments(changedDocuments);\n        });\n    }, currentName);\n}\nexports.renameRAMLElement = renameRAMLElement;\nvar getKeyValue = function (offset, txt) {\n    var m = offset;\n    for (var i = offset; i >= 0; i--) {\n        var c = txt.charAt(i);\n        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t') {\n            m = i + 1;\n            break;\n        }\n    }\n    var res = \"\";\n    for (var i = m; m < txt.length; i++) {\n        var c = txt.charAt(i);\n        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t' || c == ':') {\n            break;\n        }\n        res += c;\n    }\n    return res;\n};\n// export function select(){\n//     var ed=getActiveEditor();\n//     var request={editor:ed,bufferPosition:ed.getCursorBufferPosition()};\n//     var node=provider.getAstNode(request,false);\n//     if (!node){\n//         return;\n//     }\n//     var start=ed.getBuffer().positionForCharacterIndex(node.lowLevel().start());\n//     var end=ed.getBuffer().positionForCharacterIndex(node.lowLevel().end());\n//     ed.setSelectedBufferRange({start:start,end:end},{});\n// }\n//export function expandSignature(attr:hl.IAttribute){\n//    var tr=signature.convertToTrait(signature.parse(attr));\n//    //console.log('trait:\\n' + tr.highLevel().lowLevel().dump());\n//    var res = attr.parent();\n//    //pr.remove(attr); // incorrect usage!!! remove attributes as below\n//    attr.remove();\n//    tr.highLevel().elements().forEach(x=>{\n//        res.add(<any>x)\n//    });\n//    var ed=getActiveEditor();\n//    ed.setText(attr.root().lowLevel().unit().contents());\n//}\nfunction findUsagesImpl(renderer) {\n    if (renderer === void 0) { renderer = display; }\n    var editor = getActiveEditor();\n    var position = editor.getCursorBufferPosition();\n    var offset = editor.getBuffer().characterIndexForPosition(position);\n    var path = editor.getPath();\n    ramlServer.getNodeClientConnection().findReferences(path, offset).then(function (locations) {\n        if (!locations)\n            return;\n        renderer(locations);\n    });\n}\nexports.findUsagesImpl = findUsagesImpl;\nfunction display(n) {\n    if (sv) {\n        sv.setInput(n);\n    }\n    else {\n        sv = new SearchResultView(n);\n        sv.panel = atom.workspace.addBottomPanel({ item: sv });\n    }\n}\nfunction findUsages() {\n    findUsagesImpl(display);\n}\nexports.findUsages = findUsages;\nvar SearchResultView = /** @class */ (function (_super) {\n    __extends(SearchResultView, _super);\n    function SearchResultView(_result) {\n        var _this = _super.call(this) || this;\n        _this._result = _result;\n        _this.isAttached = false;\n        return _this;\n    }\n    SearchResultView.prototype.initialize = function () {\n        _super.prototype.initialize.apply(this, arguments);\n        return true;\n    };\n    SearchResultView.content = function () {\n        return this.div({ class: 'raml-console pane-item', tabindex: -1 });\n    };\n    SearchResultView.prototype.attached = function () {\n        if (this.isAttached) {\n            return;\n        }\n        this.load();\n        this.isAttached = true;\n    };\n    SearchResultView.prototype.setInput = function (_result) {\n        this._result = _result;\n        this.load();\n    };\n    SearchResultView.prototype.load = function () {\n        var _this = this;\n        var section = UI.section(\"References\", UI.Icon.SEARCH);\n        var view = UI.list(this._result, function (location) {\n            var p1 = getActiveEditor().getBuffer().positionForCharacterIndex(location.range.start);\n            var res = UI.hc(UI.a(location.uri, function (y) {\n                atom.workspace.open(location.uri, {}).then(function (x) {\n                    var activeEditor = getActiveEditor();\n                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(location.range.start);\n                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(location.range.end);\n                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n                });\n            }), UI.label(\" line:\", UI.Icon.NONE, UI.TextClasses.SUBTLE).pad(5, 5), UI.label(\"\" + p1.row, UI.Icon.NONE, UI.TextClasses.SUCCESS));\n            return res;\n        });\n        view.setStyle(\"max-height\", \"400px\");\n        section.addChild(view);\n        section.addChild(UI.button(\"Close\", UI.ButtonSizes.SMALL, UI.ButtonHighlights.PRIMARY, UI.Icon.NONE, function (x) { _this.panel.destroy(); sv = null; }));\n        this.html(section.renderUI());\n    };\n    return SearchResultView;\n}(SpacePenViews.ScrollView));\nvar sv;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/dialogs/assist-utils.js\n// module id = 11\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 12\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar fs = require(\"fs\");\n// import parser = require(\"raml-1-parser\");\n// import parserUtils = parser.utils;\nvar unitUtils = require(\"../util/unit\");\nvar TextBuffer = require(\"basarat-text-buffer\");\nvar editorManager = require(\"./editorManager\");\nvar ramlServer = require(\"raml-language-server\");\nexports.grammarScopes = ['source.raml'];\nexports.scope = 'file';\nexports.lintOnFly = true;\nvar raml_language_server_1 = require(\"raml-language-server\");\nfunction relint(editor) {\n    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n    editor.getBuffer().emitter.emit(\"did-change\", {\n        oldText: editor.getBuffer().getText(),\n        newText: editor.getBuffer().getText()\n    });\n}\nexports.relint = relint;\nfunction initEditorObservers(linter) {\n    atom.workspace.observeTextEditors(function (editor) { return relint(editor); });\n    return {\n        dispose: function () {\n        }\n    };\n}\nexports.initEditorObservers = initEditorObservers;\nfunction destroyLinter(linterApi, linter) {\n    linterApi.deleteMessages(linter);\n    linterApi.deleteLinter(linter);\n}\nfunction isRAMLUnit(editor) {\n    var contents = editor.getBuffer().getText();\n    return unitUtils.isRAMLUnit(contents);\n}\nvar combErrors = function (result) {\n    var map = {};\n    result.forEach(function (x) {\n        var original = JSON.parse(JSON.stringify(x));\n        original.trace = null;\n        var newKey = JSON.stringify(original);\n        var tr = map[newKey];\n        if (tr) {\n            tr.push(x);\n        }\n        else {\n            map[newKey] = [x];\n        }\n    });\n    var rs = [];\n    for (var i in map) {\n        var mes = JSON.parse(i);\n        mes.trace = [];\n        var ms = map[i];\n        ms.forEach(function (x) {\n            if (x.trace) {\n                mes.trace = mes.trace.concat(x.trace);\n            }\n        });\n        mes.trace = combErrors(mes.trace);\n        rs.push(mes);\n    }\n    return rs;\n};\nfunction tabWarnings(textEditor) {\n    var result = [];\n    var text = textEditor.getBuffer().getText();\n    var tab = 0;\n    while (true) {\n        var tab = text.indexOf('\\t', tab);\n        if (tab != -1) {\n            var p1 = textEditor.getBuffer().positionForCharacterIndex(tab);\n            var p2 = textEditor.getBuffer().positionForCharacterIndex(tab + 1);\n            var message = {\n                type: (\"Warning\"),\n                filePath: textEditor.getPath(),\n                text: \"Using tabs  can lead to unpredictable results\",\n                trace: [],\n                range: [[p1.row, p1.column], [p2.row, p2.column]]\n            };\n            result.push(message);\n            tab++;\n        }\n        else {\n            break;\n        }\n    }\n    return result;\n}\nfunction postPocessError(editor, error, buffers) {\n    var editorPath = editor.getPath();\n    if (!buffers[editorPath]) {\n        buffers[editorPath] = editor.getBuffer();\n    }\n    return Promise.resolve(error).then(function (error) {\n        if (!error.filePath) {\n            error.filePath = editorPath;\n        }\n        var buffer = buffers[error.filePath];\n        if (!buffer) {\n            return new Promise(function (resolve, reject) {\n                fs.readFile(error.filePath, function (err, data) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        buffer = new TextBuffer(data.toString());\n                        buffers[error.filePath] = buffer;\n                        resolve(buffer);\n                    }\n                });\n            });\n        }\n        return buffer;\n    }).then(function (buffer) {\n        clientConnection.debugDetail(\"Converting an error with range: [\" + error.range.start + \" , \" + error.range.end + \"]\", \"Linter-ui\", \"postPocessError\");\n        if (error.range.start != null && error.range.end != null) {\n            clientConnection.debugDetail(\"Converting an error with range as array: [\" + error.range[0] + \" , \" + error.range[1] + \"]\", \"Linter-ui\", \"postPocessError\");\n            var p1 = buffer.positionForCharacterIndex(error.range.start);\n            var p2 = buffer.positionForCharacterIndex(error.range.end);\n            clientConnection.debugDetail(\"Result error range: [\" + p1.row + \" , \" + p1.column + \"] ; [\" + p2.row + \" , \" + p2.column + \"]\", \"Linter-ui\", \"postPocessError\");\n            error.range = [[p1.row, p1.column], [p2.row, p2.column]];\n        }\n        var traceErrors = error.trace || [];\n        var tracePromises = traceErrors.map(function (traceError) { return postPocessError(editor, traceError, buffers); });\n        return Promise.all(tracePromises).then(function (trace) {\n            error.trace = trace;\n            return error;\n        });\n    });\n}\nfunction getEditorId(textEditor) {\n    return textEditor.id;\n}\nvar ValidationReportExpected = /** @class */ (function () {\n    function ValidationReportExpected() {\n    }\n    return ValidationReportExpected;\n}());\nvar clientConnection = raml_language_server_1.getNodeClientConnection();\nvar expectedValidationReports = [];\nfunction findAndRemoveExpectedReports(uri, versionLimit) {\n    var result = [];\n    expectedValidationReports = expectedValidationReports.filter(function (reportExpected) {\n        if (reportExpected.uri == uri\n            && (versionLimit == null || reportExpected.expectedVersion == null ||\n                versionLimit >= reportExpected.expectedVersion)) {\n            result.push(reportExpected);\n            return false;\n        }\n        return true;\n    });\n    return result;\n}\nvar latestRecievedReport = null;\nclientConnection.onValidationReport(function (report) {\n    clientConnection.debugDetail(\"Got debug report for uri \" + report.pointOfViewUri +\n        \" and version \" + report.version, \"linter-ui\", \"onValidationReport\");\n    var expectedReports = findAndRemoveExpectedReports(report.pointOfViewUri, report.version);\n    clientConnection.debugDetail(\"Found expected reports: \" + expectedReports.length, \"linter-ui\", \"onValidationReport\");\n    for (var _i = 0, expectedReports_1 = expectedReports; _i < expectedReports_1.length; _i++) {\n        var expectedReport = expectedReports_1[_i];\n        expectedReport.resolve(report.issues);\n    }\n    latestRecievedReport = report;\n});\nfunction runValidationSheduleUpdater(textEditor, resolve, reject) {\n    var uri = textEditor.getPath();\n    //in any way, lets report current state, it should not hurt.\n    clientConnection.documentChanged({\n        uri: uri,\n        text: textEditor.getBuffer().getText()\n    });\n    clientConnection.getLatestVersion(uri).then(function (version) {\n        clientConnection.debugDetail(\"Scheduling validation for uri \" + uri + \" and version \" +\n            version, \"linter-ui\", \"runValidationSheduleUpdater\");\n        if (latestRecievedReport && latestRecievedReport.version &&\n            latestRecievedReport.version >= version) {\n            //we already know validation report for this version\n            clientConnection.debugDetail(\"Previous report found v \" +\n                latestRecievedReport.version + \" resolving, issues \" +\n                (latestRecievedReport.issues ? latestRecievedReport.issues.length : 0), \"linter-ui\", \"runValidationSheduleUpdater\");\n            resolve(latestRecievedReport.issues);\n        }\n        else {\n            //lets wait until the server provides a report for this or later version\n            expectedValidationReports.push({\n                uri: uri,\n                expectedVersion: version,\n                resolve: resolve,\n                reject: reject\n            });\n            clientConnection.debugDetail(\"Pushing the expected report to the list for version \" +\n                version, \"linter-ui\", \"runValidationSheduleUpdater\");\n        }\n    });\n}\nfunction lint(textEditor) {\n    if (!isRAMLUnit(textEditor)) {\n        return Promise.resolve([]);\n    }\n    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n    var promise = new Promise(function (resolve, reject) {\n        runValidationSheduleUpdater(textEditor, resolve, reject);\n    }).then(function (errors) {\n        clientConnection.debugDetail(\"Update report handled in with issues \" +\n            (errors ? errors.length : 0), \"linter-ui\", \"lint\");\n        var buffers = {};\n        var promises = errors.map(function (error) { return postPocessError(textEditor, error, buffers); });\n        var tabs = tabWarnings(textEditor);\n        promises = promises.concat(tabs);\n        return Promise.all(promises).then(function (errors) {\n            var result = combErrors(errors);\n            var warnings = 0;\n            return result.filter(function (error) { return error ? true : false; }).filter(function (error) {\n                return error.type === 'Warning' && warnings++ >= 20 ? false : true;\n            });\n        });\n    });\n    clientConnection.debugDetail(\"Before returning from lint\", \"linter-ui\", \"lint\");\n    return promise;\n}\nexports.lint = lint;\nfunction addListenersToEditor(editor) {\n    var currentBuffer = editor.getBuffer();\n    currentBuffer.onDidChange(function (x) {\n        try {\n            ramlServer.getNodeClientConnection().debug(\"Change detected\", \"linter-ui\", \"addListenersToEditor\");\n            ramlServer.getNodeClientConnection().documentChanged({\n                uri: currentBuffer.getPath(),\n                text: currentBuffer.getText()\n            });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    });\n}\nfunction addListenersToWorkspace() {\n    atom.workspace.onDidChangeActivePaneItem(function (e) {\n        var editor = atom.workspace.getActiveTextEditor();\n        if (editor) {\n            addListenersToEditor(editor);\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/linter-ui.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns whether the current text matches RAML unit.\n * @param contents\n * @returns {RegExpMatchArray}\n */\nfunction isRAMLUnit(contents) {\n    return contents.match(/^\\s*#%RAML\\s+(\\d\\.\\d)\\s*(\\w*)\\s*$/m);\n}\nexports.isRAMLUnit = isRAMLUnit;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvdW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCxvQkFBMkIsUUFBZ0I7SUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRkQsZ0NBRUMiLCJmaWxlIjoic3JjL2F0b20vdXRpbC91bml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgdGV4dCBtYXRjaGVzIFJBTUwgdW5pdC5cbiAqIEBwYXJhbSBjb250ZW50c1xuICogQHJldHVybnMge1JlZ0V4cE1hdGNoQXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JBTUxVbml0KGNvbnRlbnRzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudHMubWF0Y2goL15cXHMqIyVSQU1MXFxzKyhcXGRcXC5cXGQpXFxzKihcXHcqKVxccyokL20pO1xufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/util/unit.js\n// module id = 14\n// module chunks = 0","module.exports = require(\"basarat-text-buffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"basarat-text-buffer\"\n// module id = 15\n// module chunks = 0","\"use strict\";\n/**\n * Created by kor on 24/07/15.\n */\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import fs = require ('fs')\n// import path = require ('path')\nvar editorTools = require(\"../editor-tools/editor-tools\");\n// import rp=require(\"raml-1-parser\")\n// import project=rp.project;\n// export function ast(editor:AtomCore.IEditor):rp.IHighLevelNode{\n//     var man=editorTools.aquireManager();\n//     if (editorTools.aquireManager()){\n//         if (man.getCurrentEditor()==editor){\n//             return man.ast;\n//         }\n//     }\n//     var p=editor.getPath();\n//     var prj=project.createProject(path.dirname(p));\n//     var unit=prj.unit(path.basename(p));\n//     var text=editor.getBuffer().getText();\n//     if (!unit){\n//         return null;\n//     }\n//     unit.updateContent(text);\n//     var ast=<rp.IHighLevelNode>unit.highLevel();\n//     return ast;\n// }\nfunction toggleEditorTools() {\n    var man = editorTools.aquireManager();\n    if (man) {\n        man.getCurrentEditor();\n    }\n}\nexports.toggleEditorTools = toggleEditorTools;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvZWRpdG9yTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFDSCxtREFBbUQ7O0FBRW5ELDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsMERBQTBEO0FBQzFELHFDQUFxQztBQUNyQyw2QkFBNkI7QUFFN0Isa0VBQWtFO0FBQ2xFLDJDQUEyQztBQUMzQyx3Q0FBd0M7QUFDeEMsK0NBQStDO0FBQy9DLDhCQUE4QjtBQUM5QixZQUFZO0FBQ1osUUFBUTtBQUNSLDhCQUE4QjtBQUM5QixzREFBc0Q7QUFDdEQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUM3QyxrQkFBa0I7QUFDbEIsdUJBQXVCO0FBQ3ZCLFFBQVE7QUFDUixnQ0FBZ0M7QUFDaEMsbURBQW1EO0FBQ25ELGtCQUFrQjtBQUNsQixJQUFJO0FBRUo7SUFDSSxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFdEMsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztRQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNCLENBQUM7QUFDTCxDQUFDO0FBTkQsOENBTUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9lZGl0b3JNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGtvciBvbiAyNC8wNy8xNS5cbiAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuLy8gaW1wb3J0IGZzID0gcmVxdWlyZSAoJ2ZzJylcbi8vIGltcG9ydCBwYXRoID0gcmVxdWlyZSAoJ3BhdGgnKVxuaW1wb3J0IGVkaXRvclRvb2xzPXJlcXVpcmUoXCIuLi9lZGl0b3ItdG9vbHMvZWRpdG9yLXRvb2xzXCIpXG4vLyBpbXBvcnQgcnA9cmVxdWlyZShcInJhbWwtMS1wYXJzZXJcIilcbi8vIGltcG9ydCBwcm9qZWN0PXJwLnByb2plY3Q7XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBhc3QoZWRpdG9yOkF0b21Db3JlLklFZGl0b3IpOnJwLklIaWdoTGV2ZWxOb2Rle1xuLy8gICAgIHZhciBtYW49ZWRpdG9yVG9vbHMuYXF1aXJlTWFuYWdlcigpO1xuLy8gICAgIGlmIChlZGl0b3JUb29scy5hcXVpcmVNYW5hZ2VyKCkpe1xuLy8gICAgICAgICBpZiAobWFuLmdldEN1cnJlbnRFZGl0b3IoKT09ZWRpdG9yKXtcbi8vICAgICAgICAgICAgIHJldHVybiBtYW4uYXN0O1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHZhciBwPWVkaXRvci5nZXRQYXRoKCk7XG4vLyAgICAgdmFyIHByaj1wcm9qZWN0LmNyZWF0ZVByb2plY3QocGF0aC5kaXJuYW1lKHApKTtcbi8vICAgICB2YXIgdW5pdD1wcmoudW5pdChwYXRoLmJhc2VuYW1lKHApKTtcbi8vICAgICB2YXIgdGV4dD1lZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0VGV4dCgpO1xuLy8gICAgIGlmICghdW5pdCl7XG4vLyAgICAgICAgIHJldHVybiBudWxsO1xuLy8gICAgIH1cbi8vICAgICB1bml0LnVwZGF0ZUNvbnRlbnQodGV4dCk7XG4vLyAgICAgdmFyIGFzdD08cnAuSUhpZ2hMZXZlbE5vZGU+dW5pdC5oaWdoTGV2ZWwoKTtcbi8vICAgICByZXR1cm4gYXN0O1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRWRpdG9yVG9vbHMoKTogdm9pZCB7XG4gICAgdmFyIG1hbiA9IGVkaXRvclRvb2xzLmFxdWlyZU1hbmFnZXIoKTtcbiAgICBcbiAgICBpZihtYW4pe1xuICAgICAgICBtYW4uZ2V0Q3VycmVudEVkaXRvcigpO1xuICAgIH1cbn1cbiJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/editorManager.js\n// module id = 16\n// module chunks = 0","module.exports = require(\"raml-language-server\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"raml-language-server\"\n// module id = 17\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseConstructor = require(\"promise-polyfill\");\nif (typeof Promise === \"undefined\" && typeof window !== \"undefined\") {\n    window.Promise = PromiseConstructor;\n}\nvar Reconciler = /** @class */ (function () {\n    function Reconciler(logger, timeout) {\n        this.logger = logger;\n        this.timeout = timeout;\n        this.waitingList = [];\n        this.runningList = [];\n    }\n    Reconciler.prototype.schedule = function (runnable) {\n        var _this = this;\n        this.addToWaitingList(runnable);\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                _this.logger.debugDetail(\"Time came to execute \" + runnable.toString(), \"Reconciler\", \"schedule\");\n                if (runnable.isCanceled()) {\n                    _this.logger.debugDetail(\"Runnable \" + runnable.toString() + \" is cancelled, doing nothing\", \"Reconciler\", \"schedule\");\n                    _this.removeFromWaitingList(runnable);\n                    return;\n                }\n                var currentlyRunning = _this.findConflictingInRunningList(runnable);\n                if (currentlyRunning) {\n                    // TODO add an additional short timeout parameter to launch the reschedule\n                    // at the finish of the currently running task for a short time after it.\n                    _this.logger.debugDetail(\"Conflicting to \" + runnable.toString()\n                        + \" is found in the running list: \" + currentlyRunning.toString()\n                        + \" rescheduling current one.\", \"Reconciler\", \"schedule\");\n                    _this.schedule(runnable);\n                    return;\n                }\n                _this.removeFromWaitingList(runnable);\n                _this.addToRunningList(runnable);\n                _this.logger.debugDetail(\"Executing \" + runnable.toString(), \"Reconciler\", \"schedule\");\n                _this.run(runnable).then(function (result) { resolve(result); }, function (error) { reject(error); });\n            }, _this.timeout);\n        });\n    };\n    Reconciler.prototype.run = function (runnable) {\n        var _this = this;\n        return runnable.run().then(function (result) {\n            _this.removeFromRunningList(runnable);\n            return result;\n        }, function (error) {\n            _this.removeFromRunningList(runnable);\n            throw error;\n        });\n    };\n    /**\n     * Adds item to waiting list and removes anything currently in the list,\n     * which conflicts with the new item.\n     * @param runnable\n     */\n    Reconciler.prototype.addToWaitingList = function (runnable) {\n        var _this = this;\n        this.logger.debugDetail(\"Adding runnable \" + runnable.toString() + \" to waiting list\", \"Reconciler\", \"addToWaitingList\");\n        this.waitingList = this.waitingList.filter(function (current) {\n            _this.logger.debugDetail(\"Comparing existing runnable \" + current.toString() +\n                \" to the new \" + runnable.toString(), \"Reconciler\", \"addToWaitingList\");\n            var conflicts = runnable.conflicts(current);\n            if (conflicts) {\n                _this.logger.debugDetail(\"Runnables are conflicting, canceling existing one\", \"Reconciler\", \"addToWaitingList\");\n                current.cancel();\n            }\n            return !conflicts;\n        });\n        this.waitingList.push(runnable);\n    };\n    /**\n     * Removes runnable from the list of running ones.\n     * @param runnable\n     */\n    Reconciler.prototype.removeFromWaitingList = function (runnable) {\n        this.logger.debugDetail(\"Removing \" + runnable.toString()\n            + \" from waiting list\", \"Reconciler\", \"removeFromWaitingList\");\n        var index = this.waitingList.indexOf(runnable);\n        if (index !== -1) {\n            this.waitingList.splice(index, 1);\n        }\n    };\n    /**\n     * Adds runnable to the list of running ones.\n     * @param runnable\n     */\n    Reconciler.prototype.addToRunningList = function (runnable) {\n        this.logger.debugDetail(\"Adding \" + runnable.toString()\n            + \" to running list\", \"Reconciler\", \"removeFromWaitingList\");\n        this.runningList.push(runnable);\n    };\n    /**\n     * Removes runnable from the list of running ones.\n     * @param runnable\n     */\n    Reconciler.prototype.removeFromRunningList = function (runnable) {\n        this.logger.debugDetail(\"Removing \" + runnable.toString()\n            + \" from running list\", \"Reconciler\", \"removeFromWaitingList\");\n        var index = this.runningList.indexOf(runnable);\n        if (index !== -1) {\n            this.runningList.splice(index, 1);\n        }\n    };\n    /**\n     * Finds the first conflicting runnable in the current list.\n     * @param runnable\n     * @returns {any}\n     */\n    Reconciler.prototype.findConflictingInRunningList = function (runnable) {\n        for (var _i = 0, _a = this.runningList; _i < _a.length; _i++) {\n            var current = _a[_i];\n            if (runnable.conflicts(current)) {\n                return current;\n            }\n        }\n        return null;\n    };\n    return Reconciler;\n}());\nexports.Reconciler = Reconciler;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/reconciler.js\n// module id = 18\n// module chunks = 0","module.exports = require(\"promise-polyfill\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"promise-polyfill\"\n// module id = 19\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UI = require(\"atom-ui-lib\");\nvar SC = require(\"../util/ScrollViewUI\");\nvar CompositeDisposable = UI.CompositeDisposable;\n// import details2=require(\"./details2\")\n// import contextActions = require(\"raml-actions\")\n// import commonContextActions = require(\"../context-menu/commonContextActions\")\nvar editorTools = require(\"./editor-tools\");\n// import universeHelpers = rp.universeHelpers;\n// import ramlOutline = require(\"raml-outline\")\n// import outlineCommon = require(\"./outline-common\")\nvar ramlServer = require(\"raml-language-server\");\nfunction getActiveEditor() {\n    var activeEditor = atom.workspace.getActiveTextEditor();\n    if (activeEditor) {\n        return activeEditor;\n    }\n    if (editorTools.aquireManager())\n        return editorTools.aquireManager().getCurrentEditor();\n    return null;\n}\nexports.getActiveEditor = getActiveEditor;\nvar RamlOutline = /** @class */ (function (_super) {\n    __extends(RamlOutline, _super);\n    function RamlOutline() {\n        var _this = _super.call(this) || this;\n        _this.disposables = new CompositeDisposable();\n        _this.fire = true;\n        _this.createTree(null);\n        _this.addClass('raml-outline');\n        _this.addChild(_this._rs);\n        return _this;\n    }\n    RamlOutline.prototype.createTree = function (structure /*p: hl.IParseResult*/) {\n        var _this = this;\n        this._rs = createTree(structure, function (sender) {\n            if (sender.selection && sender.selection.elements && _this.fire == true) {\n                if (sender.selection.elements.length > 0 && sender.selection.elements[0]) {\n                    var activeEditor = getActiveEditor();\n                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].start);\n                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].end);\n                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n                }\n            }\n        });\n        this._viewers = [];\n        if (structure)\n            this._viewers = [0, 1, 2, 3].map(function (i) { return _this._rs.get(i).content; });\n    };\n    RamlOutline.prototype.getTitle = function () { return \"Outline\"; };\n    RamlOutline.prototype.getNodePType = function (node) {\n        node.category;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory])\n            return 0;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory])\n            return 1;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory])\n            return 2;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory])\n            return 3;\n        return 3;\n    };\n    RamlOutline.prototype.setSelection = function (node) {\n        //if (this._selectedNode == node) return;\n        this._selectedNode = node;\n        this.fire = false;\n        try {\n            var index = this.getNodePType(node);\n            var viewer = this._viewers[index];\n            if (viewer != null) {\n                viewer.setSelection(node);\n                this._rs.setSelectedIndex(index);\n            }\n        }\n        finally {\n            this.fire = true;\n        }\n    };\n    RamlOutline.prototype.setUnit = function (unitPath /*unit:hl.IHighLevelNode*/, force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        if (this.unitPath && unitPath && unitPath != this.unitPath) {\n            this._children = [];\n        }\n        this.unitPath = unitPath;\n        var activeEditor = getActiveEditor();\n        ramlServer.getNodeClientConnection().documentChanged({\n            uri: unitPath,\n            text: activeEditor.getText()\n        });\n        var structurePromise = ramlServer.getNodeClientConnection().getStructure(unitPath);\n        if (structurePromise) {\n            structurePromise.then(function (structure) {\n                _this.createTree(structure);\n                _this.addClass('raml-outline');\n                _this._children = [];\n                _this.addChild(_this._rs);\n                _this.html(_this.innerRenderUI());\n            }).catch(function (error) {\n                //ignoring, the error is already reported to the log, and we dont need to display\n                //it to user in other way\n            });\n        }\n    };\n    RamlOutline.prototype.attach = function () {\n        if (!this._isAttached) {\n            var $this = $(this);\n            $this.html(this._rs.renderUI().outerHTML);\n            this._isAttached = true;\n        }\n    };\n    RamlOutline.prototype.forEachViewer = function (command) {\n        this._viewers.forEach(command);\n    };\n    RamlOutline.prototype.refresh = function () {\n        // var unit = this.unit;\n        // this.setUnit(null);\n        // this.setUnit(unit);\n        var unitPath = this.unitPath;\n        this.setUnit(null);\n        this.setUnit(unitPath);\n    };\n    RamlOutline.prototype.destroy = function () {\n        editorTools.aquireManager()._view = null;\n        // this._selectedNode=null;\n        // this.unit=null;\n        this.unitPath = null;\n        this._viewers = [];\n        this._rs = null;\n        this._children = [];\n        this.disposables.dispose();\n    };\n    return RamlOutline;\n}(SC.Scrollable));\nexports.RamlOutline = RamlOutline;\n/*\n *\n */\n// export function treeSection(input: hl.IParseResult,\n//                             name: string,\n//                             icon: UI.Icon,\n//                             filterFunc: (x:hl.IHighLevelNode)=>boolean,\n//                             l: UI.ISelectionListener<any>,\n//                             opener: (x:hl.IParseResult)=>void=null) : UI.TreePanel<any,any> {\n//\n//     var v = UI.treeViewerSection(name,icon,input,x=>getChildren(x).filter(x=>filterFunc(<hl.IHighLevelNode> x)),new HLRenderer(opener));\n//\n//     v.viewer.setBasicLabelFunction(x=>x ? x.name() : '');\n//     v.viewer.setKeyProvider({\n//         key:(p:hl.IParseResult):string=>{\n//             return \"\"+p.lowLevel().start();\n//         }\n//\n//     });\n//     v.viewer.addSelectionListener(l)\n//     return v;\n// }\nvar HLNodeType;\n(function (HLNodeType) {\n    HLNodeType[HLNodeType[\"Resource\"] = 0] = \"Resource\";\n    HLNodeType[HLNodeType[\"Schema\"] = 1] = \"Schema\";\n    HLNodeType[HLNodeType[\"Type\"] = 2] = \"Type\";\n    HLNodeType[HLNodeType[\"Trait\"] = 3] = \"Trait\";\n    HLNodeType[HLNodeType[\"Unknown\"] = 4] = \"Unknown\";\n})(HLNodeType || (HLNodeType = {}));\n// function getNodeType(node: hl.IHighLevelNode): HLNodeType {\n//     if (outlineCommon.isResource(node)) return HLNodeType.Resource;\n//     else if (outlineCommon.isOther(node)) return HLNodeType.Trait;\n//     else if (outlineCommon.isResourceTypeOrTrait(node)) return HLNodeType.Type;\n//     else if (outlineCommon.isSchemaOrType(node)) return HLNodeType.Schema;\n//     else return HLNodeType.Unknown;\n// }\n// function isApi(p: hl.IHighLevelNode) {\n//     var pc=p.definition().key();\n//     return pc===universes.Universe08.Api||pc===universes.Universe10.Api;\n// }\n// function isDocumentation(p: hl.IHighLevelNode) {\n//     var pc=p.definition().key();\n//     return ( pc=== universes.Universe08.DocumentationItem||pc===universes.Universe10.DocumentationItem);\n// }\nfunction fullStructurePath(model) {\n    if (!model)\n        return \"\";\n    return model.text;\n    // var node = model.getSource();\n    // return fullPath(<any>node);\n}\n//\n// function fullPath(node: hl.IParseResult) {\n//     if (node == null) return \"\";\n//     else return fullPath(node.parent()) + \"/\" + node.name();\n// }\nfunction simpleTree(input, selectionListener, categoryName, opener) {\n    if (opener === void 0) { opener = null; }\n    var viewer = UI.treeViewer(function (x) {\n        return x.children;\n    }, new HLRenderer(opener), fullStructurePath);\n    viewer.setBasicLabelFunction(function (x) { return x.text; });\n    viewer.setKeyProvider({ key: function (x) { return x.key; } });\n    viewer.addSelectionListener(selectionListener);\n    viewer.getBinding().set(input);\n    return viewer;\n}\nfunction createTree(structure, selectionListener, opener) {\n    if (opener === void 0) { opener = null; }\n    if (!structure) {\n        return new UI.TabFolder();\n    }\n    var resourcesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory]];\n    var typesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory]];\n    var traitsModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory]];\n    var otherModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory]];\n    // var resourcesModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourcesCategory):null;\n    // var typesModel = p!=null?ramlOutline.getStructure(outlineCommon.SchemasAndTypesCategory):null;\n    // var traitsModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourceTypesAndTraitsCategory):null;\n    // var otherModel = p!=null?ramlOutline.getStructure(outlineCommon.OtherCategory):null;\n    var outline = resourcesModel != null ? simpleTree(resourcesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory], opener) : null;\n    var schemas = typesModel != null ? simpleTree(typesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory], opener) : null;\n    var types = traitsModel != null ? simpleTree(traitsModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory], opener) : null;\n    var other = otherModel != null ? simpleTree(otherModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory], opener) : null;\n    var folder = new UI.TabFolder();\n    folder.add(\"Resources\", UI.Icon.SEARCH, outline, 'raml-icon-custom');\n    folder.add(\"Schemas&Types\", UI.Icon.SEARCH, schemas, 'raml-icon-custom');\n    folder.add(\"ResourceTypes&Traits\", UI.Icon.SEARCH, types, 'raml-icon-custom');\n    folder.add(\"Other\", UI.Icon.SEARCH, other, 'raml-icon-custom');\n    folder.setSelectedIndex(0);\n    folder.setOnSelected(function () {\n        var selectedTab = folder.selectedComponent();\n        if (selectedTab) {\n            var selection = selectedTab.getSelection();\n            if (selection && selection.elements && selection.elements.length > 0) {\n                selectionListener(new UI.SelectionChangedEvent(selectedTab, null, selection));\n            }\n            selectedTab.customizePanel(true);\n        }\n    });\n    return folder;\n}\nexports.createTree = createTree;\nvar HLRenderer = /** @class */ (function () {\n    function HLRenderer(opener) {\n        this.opener = opener;\n    }\n    HLRenderer.prototype.iconNameToIconEnum = function (iconName) {\n        if (!iconName)\n            return null;\n        return UI.Icon[iconName];\n    };\n    HLRenderer.prototype.textHighlightNameToTextClass = function (highlightName) {\n        if (!highlightName)\n            return null;\n        return UI.TextClasses[highlightName];\n    };\n    HLRenderer.prototype.render = function (model) {\n        try {\n            // if (ramlOutline.isTypedStructureNode(model)\n            //     && (<ramlOutline.TypedStructureNode>model).type\n            //     && (<ramlOutline.TypedStructureNode>model).type == ramlOutline.NodeType.ATTRIBUTE) {\n            //\n            //     var attr = <hl.IAttribute>(<any>model.getSource());\n            //\n            //     //TODO check if we really need custom selection here, otherwise the whole \"is attribute\" condition is redundant\n            //     return UI.hc(UI.label(model.text), UI.a(\"\", x=> {\n            //         var p1 = editorTools.aquireManager().getCurrentEditor().\n            //             getBuffer().positionForCharacterIndex(attr.lowLevel().start());\n            //         var p2 = editorTools.aquireManager().getCurrentEditor().\n            //             getBuffer().positionForCharacterIndex(attr.lowLevel().end());\n            //         editorTools.aquireManager().getCurrentEditor().setSelectedBufferRange({ start: p1, end: p1 }, {});\n            //\n            //     }, UI.Icon.ARROW_SMALL_LEFT, null, null));\n            //\n            // }\n            var icon = UI.Icon.DASH;\n            var highLight = UI.TextClasses.NORMAL;\n            if (this.iconNameToIconEnum(model.icon)) {\n                icon = this.iconNameToIconEnum(model.icon);\n            }\n            if (this.textHighlightNameToTextClass(model.textStyle)) {\n                highLight = this.textHighlightNameToTextClass(model.textStyle);\n            }\n            var extraText = \"\";\n            var extraClass = UI.TextClasses.NORMAL;\n            var hc = UI.hc(UI.label(model.text, icon, highLight));\n            if (model.typeText) {\n                hc.addChild(UI.label(model.typeText, UI.Icon.NONE, UI.TextClasses.WARNING).margin(2, 0, 0, 0));\n            }\n            // if (model.getSource().lowLevel().unit()!=model.getSource().root().lowLevel().unit()){\n            //     highLight=UI.TextClasses.SUBTLE;\n            //     hc.addChild(UI.label(\"(\"+model.getSource().lowLevel().unit().path()+\")\",UI.Icon.NONE,highLight).margin(5,0,0,0));\n            // }\n            hc.addClass(\"outline\");\n            return hc;\n        }\n        catch (e) {\n            console.log(e);\n            return UI.hc(UI.label(\"Illegal node\", UI.Icon.ARROW_SMALL_LEFT, null, null));\n        }\n    };\n    return HLRenderer;\n}());\nexports.HLRenderer = HLRenderer;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/outline-view.js\n// module id = 20\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramlServer = require(\"raml-language-server\");\nfunction markOccurences(editor, occurences) {\n    var layer = getOccurencesLayer(editor);\n    layer.clear();\n    occurences.forEach(function (occurence) {\n        layer.markBufferRange(occurence);\n    });\n    editor.decorateMarkerLayer(layer, {\n        type: 'highlight',\n        class: 'raml-occurence'\n    });\n}\nexports.markOccurences = markOccurences;\nfunction clearOccurences(editor) {\n    var layer = getOccurencesLayer(editor);\n    layer.clear();\n}\nexports.clearOccurences = clearOccurences;\nfunction getOccurencesLayer(editor) {\n    var layerId = editor.occurencesLayerId;\n    var layer = layerId && editor.getMarkerLayer(layerId);\n    if (!layer) {\n        layer = editor.addMarkerLayer();\n    }\n    editor.occurencesLayerId = layer.id;\n    return layer;\n}\nvar MarkOccurrenceRunnable = /** @class */ (function () {\n    function MarkOccurrenceRunnable(editor, position) {\n        this.editor = editor;\n        this.position = position;\n        this.cancelled = false;\n        this.offset = editor.getBuffer().characterIndexForPosition(position);\n    }\n    /**\n     * Performs the actual business logics.\n     * Should resolve the promise when finished.\n     */\n    MarkOccurrenceRunnable.prototype.run = function () {\n        var _this = this;\n        return ramlServer.getNodeClientConnection().markOccurrences(this.getMarkOccurrencesPath(), this.offset)\n            .then(function (ranges) {\n            var currentPosition = _this.editor.getCursorBufferPosition();\n            if (currentPosition.row != _this.position.row || currentPosition.column != _this.position.column) {\n                //data is outdated\n                return;\n            }\n            var bufferRanges = ranges.map(function (range) {\n                return {\n                    start: _this.editor.getBuffer().positionForCharacterIndex(range.start),\n                    end: _this.editor.getBuffer().positionForCharacterIndex(range.end),\n                };\n            });\n            markOccurences(_this.editor, bufferRanges);\n        });\n    };\n    /**\n     * Performs the actual business logics synchronously.\n     */\n    MarkOccurrenceRunnable.prototype.runSynchronously = function () {\n    };\n    /**\n     * Whether two runnable conflict with each other.\n     * Must work fast as its called often.\n     * @param other\n     */\n    MarkOccurrenceRunnable.prototype.conflicts = function (other) {\n        if (!other.getMarkOccurrencesPath)\n            return false;\n        var otherPath = other.getMarkOccurrencesPath();\n        return this.getMarkOccurrencesPath() == otherPath;\n    };\n    /**\n     * Cancels the runnable. run() method should do nothing if launched later,\n     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n     */\n    MarkOccurrenceRunnable.prototype.cancel = function () {\n        this.cancelled = true;\n    };\n    /**\n     * Whether cancel() method was called at least once.\n     */\n    MarkOccurrenceRunnable.prototype.isCanceled = function () {\n        return this.cancelled;\n    };\n    MarkOccurrenceRunnable.prototype.getMarkOccurrencesPath = function () {\n        return this.editor.getPath();\n    };\n    return MarkOccurrenceRunnable;\n}());\nexports.MarkOccurrenceRunnable = MarkOccurrenceRunnable;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1EQUFtRDs7QUFHbkQsaURBQW9EO0FBRXBELHdCQUErQixNQUF3QixFQUFFLFVBQXdCO0lBQzdFLElBQUksS0FBSyxHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVkLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO1FBQ3hCLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFFRyxNQUFPLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFO1FBQ3JDLElBQUksRUFBRSxXQUFXO1FBQ2pCLEtBQUssRUFBRSxnQkFBZ0I7S0FDMUIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWJELHdDQWFDO0FBRUQseUJBQWdDLE1BQXdCO0lBQ3BELElBQUksS0FBSyxHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQixDQUFDO0FBSkQsMENBSUM7QUFFRCw0QkFBNEIsTUFBd0I7SUFDaEQsSUFBSSxPQUFPLEdBQVMsTUFBTyxDQUFDLGlCQUFpQixDQUFDO0lBRTlDLElBQUksS0FBSyxHQUFHLE9BQU8sSUFBVSxNQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTdELEVBQUUsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNSLEtBQUssR0FBUyxNQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVLLE1BQU8sQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBRTNDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVEO0lBS0ksZ0NBQW9CLE1BQXdCLEVBQVUsUUFBb0I7UUFBdEQsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBSGxFLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFJdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUNEOzs7T0FHRztJQUNILG9DQUFHLEdBQUg7UUFBQSxpQkFrQkM7UUFqQkcsTUFBTSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ2xHLElBQUksQ0FBQyxVQUFBLE1BQU07WUFFUixJQUFJLGVBQWUsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDNUQsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDN0Ysa0JBQWtCO2dCQUNsQixNQUFNLENBQUM7WUFDWCxDQUFDO1lBRUQsSUFBSSxZQUFZLEdBQWlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO2dCQUM3QyxNQUFNLENBQUM7b0JBQ0gsS0FBSyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztvQkFDckUsR0FBRyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDcEUsQ0FBQTtZQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ0YsY0FBYyxDQUFDLEtBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxpREFBZ0IsR0FBaEI7SUFDQSxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILDBDQUFTLEdBQVQsVUFBVSxLQUErQjtRQUNyQyxFQUFFLENBQUMsQ0FBQyxDQUFPLEtBQU0sQ0FBQyxzQkFBc0IsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFdkQsSUFBSSxTQUFTLEdBQWtCLEtBQU0sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRS9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxTQUFTLENBQUM7SUFDdEQsQ0FBQztJQUNEOzs7T0FHRztJQUNILHVDQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBQ0Q7O09BRUc7SUFDSCwyQ0FBVSxHQUFWO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELHVEQUFzQixHQUF0QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDTCw2QkFBQztBQUFELENBakVBLEFBaUVDLElBQUE7QUFqRVksd0RBQXNCIiwiZmlsZSI6InNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG5pbXBvcnQgYXRvbSA9IHJlcXVpcmUoJy4uL2NvcmUvYXRvbVdyYXBwZXInKTtcbmltcG9ydCByYW1sU2VydmVyID0gcmVxdWlyZShcInJhbWwtbGFuZ3VhZ2Utc2VydmVyXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFya09jY3VyZW5jZXMoZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yLCBvY2N1cmVuY2VzOiBhdG9tLlJhbmdlW10pIHtcbiAgICB2YXIgbGF5ZXI6IGFueSA9IGdldE9jY3VyZW5jZXNMYXllcihlZGl0b3IpO1xuXG4gICAgbGF5ZXIuY2xlYXIoKTtcblxuICAgIG9jY3VyZW5jZXMuZm9yRWFjaChvY2N1cmVuY2UgPT4ge1xuICAgICAgICBsYXllci5tYXJrQnVmZmVyUmFuZ2Uob2NjdXJlbmNlKTtcbiAgICB9KTtcblxuICAgICg8YW55PmVkaXRvcikuZGVjb3JhdGVNYXJrZXJMYXllcihsYXllciwge1xuICAgICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgICAgY2xhc3M6ICdyYW1sLW9jY3VyZW5jZSdcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyT2NjdXJlbmNlcyhlZGl0b3I6IGF0b20uSVRleHRFZGl0b3IpIHtcbiAgICB2YXIgbGF5ZXI6IGFueSA9IGdldE9jY3VyZW5jZXNMYXllcihlZGl0b3IpO1xuXG4gICAgbGF5ZXIuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gZ2V0T2NjdXJlbmNlc0xheWVyKGVkaXRvcjogYXRvbS5JVGV4dEVkaXRvcik6IGFueSB7XG4gICAgdmFyIGxheWVySWQgPSAoPGFueT5lZGl0b3IpLm9jY3VyZW5jZXNMYXllcklkO1xuXG4gICAgdmFyIGxheWVyID0gbGF5ZXJJZCAmJiAoPGFueT5lZGl0b3IpLmdldE1hcmtlckxheWVyKGxheWVySWQpO1xuXG4gICAgaWYoIWxheWVyKSB7XG4gICAgICAgIGxheWVyID0gKDxhbnk+ZWRpdG9yKS5hZGRNYXJrZXJMYXllcigpO1xuICAgIH1cblxuICAgICg8YW55PmVkaXRvcikub2NjdXJlbmNlc0xheWVySWQgPSBsYXllci5pZDtcblxuICAgIHJldHVybiBsYXllcjtcbn1cblxuZXhwb3J0IGNsYXNzIE1hcmtPY2N1cnJlbmNlUnVubmFibGUgaW1wbGVtZW50cyByYW1sU2VydmVyLlJ1bm5hYmxlPHZvaWQ+IHtcblxuICAgIHByaXZhdGUgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yLCBwcml2YXRlIHBvc2l0aW9uOiBhdG9tLlBvaW50KSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gZWRpdG9yLmdldEJ1ZmZlcigpLmNoYXJhY3RlckluZGV4Rm9yUG9zaXRpb24ocG9zaXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyB0aGUgYWN0dWFsIGJ1c2luZXNzIGxvZ2ljcy5cbiAgICAgKiBTaG91bGQgcmVzb2x2ZSB0aGUgcHJvbWlzZSB3aGVuIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIHJ1bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHJhbWxTZXJ2ZXIuZ2V0Tm9kZUNsaWVudENvbm5lY3Rpb24oKS5tYXJrT2NjdXJyZW5jZXModGhpcy5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKCksIHRoaXMub2Zmc2V0KVxuICAgICAgICAgICAgLnRoZW4ocmFuZ2VzID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSB0aGlzLmVkaXRvci5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zaXRpb24ucm93ICE9IHRoaXMucG9zaXRpb24ucm93IHx8IGN1cnJlbnRQb3NpdGlvbi5jb2x1bW4gIT0gdGhpcy5wb3NpdGlvbi5jb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9kYXRhIGlzIG91dGRhdGVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgYnVmZmVyUmFuZ2VzOiBhdG9tLlJhbmdlW10gPSByYW5nZXMubWFwKHJhbmdlPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChyYW5nZS5zdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHRoaXMuZWRpdG9yLmdldEJ1ZmZlcigpLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgocmFuZ2UuZW5kKSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbWFya09jY3VyZW5jZXModGhpcy5lZGl0b3IsIGJ1ZmZlclJhbmdlcyk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHRoZSBhY3R1YWwgYnVzaW5lc3MgbG9naWNzIHN5bmNocm9ub3VzbHkuXG4gICAgICovXG4gICAgcnVuU3luY2hyb25vdXNseSgpOiB2b2lkIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0d28gcnVubmFibGUgY29uZmxpY3Qgd2l0aCBlYWNoIG90aGVyLlxuICAgICAqIE11c3Qgd29yayBmYXN0IGFzIGl0cyBjYWxsZWQgb2Z0ZW4uXG4gICAgICogQHBhcmFtIG90aGVyXG4gICAgICovXG4gICAgY29uZmxpY3RzKG90aGVyOiByYW1sU2VydmVyLlJ1bm5hYmxlPGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCEoPGFueT5vdGhlcikuZ2V0TWFya09jY3VycmVuY2VzUGF0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGxldCBvdGhlclBhdGggOiBzdHJpbmcgPSAoPGFueT5vdGhlcikuZ2V0TWFya09jY3VycmVuY2VzUGF0aCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldE1hcmtPY2N1cnJlbmNlc1BhdGgoKSA9PSBvdGhlclBhdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgdGhlIHJ1bm5hYmxlLiBydW4oKSBtZXRob2Qgc2hvdWxkIGRvIG5vdGhpbmcgaWYgbGF1bmNoZWQgbGF0ZXIsXG4gICAgICogaWYgY2FuY2VsIGlzIGNhbGxlZCBkdXJpbmcgdGhlIHJ1bigpIG1ldGhvZCBleGVjdXRpb24sIHJ1bigpIHNob3VsZCBzdG9wIGFzIHNvb24gYXMgaXQgY2FuLlxuICAgICAqL1xuICAgIGNhbmNlbCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGNhbmNlbCgpIG1ldGhvZCB3YXMgY2FsbGVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICovXG4gICAgaXNDYW5jZWxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsbGVkO1xuICAgIH1cblxuICAgIGdldE1hcmtPY2N1cnJlbmNlc1BhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRQYXRoKCk7XG4gICAgfVxufVxuXG4iXX0=\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/markOccurences.js\n// module id = 21\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar qcui = require(\"./quick-commands-ui\");\nvar atom = require(\"../core/atomWrapper\");\n// import contextActions = require(\"raml-actions\")\nvar cc = require(\"./code-commands\");\nvar et = require(\"../editor-tools/editor-tools\");\n/*\n * Quick command is a command object that stores command info, body and filtering function\n */\nvar QuickCommand = /** @class */ (function () {\n    function QuickCommand(id, title, command, priority, when) {\n        this.id = id;\n        this.title = title;\n        this.command = command;\n        this.priority = priority;\n        this.when = when;\n    }\n    QuickCommand.prototype.registerAsAtomCommand = function (target) {\n        if (this.atomCommand && this.atomCommand.disposed == false)\n            this.atomCommand.dispose();\n        this.atomCommand = atom.commands.add(target, this.id, this.command);\n    };\n    QuickCommand.prototype.dispose = function () {\n        if (this.atomCommand && this.atomCommand.disposed == false)\n            this.atomCommand.dispose();\n        cm.unregister(this);\n    };\n    return QuickCommand;\n}());\nexports.QuickCommand = QuickCommand;\n/*\n * Command manager manages quick commands.\n * All quick commands should be registered here.\n * For usage example, see registerCommands\n */\nvar CommandManager = /** @class */ (function () {\n    function CommandManager() {\n        this.commands = {};\n        this.panel = new qcui.SelectListView(function (command) { return command.command(); }, function (command) { return command.title; }, 'title');\n    }\n    CommandManager.prototype.register = function (cmd) {\n        if (this.commands[cmd.id] != null)\n            this.unregister(cmd.id);\n        this.commands[cmd.id] = cmd;\n        return cmd;\n    };\n    CommandManager.prototype.unregister = function (cmd) {\n        if (typeof (cmd) == \"string\")\n            this.unregister(this.commands[cmd]);\n        var qcmd = cmd;\n        if (qcmd == null)\n            return null;\n        delete this.commands[qcmd.id];\n        return qcmd;\n    };\n    CommandManager.prototype.add = function (id, title, command, when, priority, atomTarget) {\n        var cmd = new QuickCommand(id, title, command, priority ? priority : 0, when ? when : function () { return true; });\n        if (atomTarget)\n            cmd.registerAsAtomCommand(atomTarget);\n        this.register(cmd);\n        return cmd;\n    };\n    CommandManager.prototype.show = function (predicate) {\n        var joinedCommands = {};\n        for (var commandId in this.commands) {\n            joinedCommands[commandId] = this.commands[commandId];\n        }\n        this.getDynamicCommands().forEach(function (currentCommand) {\n            joinedCommands[currentCommand.id] = currentCommand;\n        });\n        var list = Object.keys(joinedCommands)\n            .map(function (key) { return joinedCommands[key]; })\n            .sort(function (a, b) { return b.priority - a.priority; })\n            .filter(function (cmd) { return cmd.when(); });\n        if (predicate)\n            list = list.filter(predicate);\n        this.panel.show(list);\n    };\n    CommandManager.prototype.getDynamicCommands = function () {\n        var result = [];\n        // var currentActions = contextActions.calculateCurrentActions(contextActions.TARGET_RAML_EDITOR_NODE)\n        //\n        // currentActions.forEach(action => {\n        // \tvar convertedQuickCommand : QuickCommand = new QuickCommand(action.name,\n        // \t\taction.label?action.label:action.name, action.onClick, 1, ()=>{return true})\n        //\n        // \tvar cmd : any = convertedQuickCommand\n        // \tcmd['__module__'] = 'editorTools'\n        // \tresult.push(convertedQuickCommand)\n        // })\n        return result;\n    };\n    return CommandManager;\n}());\nexports.CommandManager = CommandManager;\nvar cm;\n/*\n * Always return working copy of manager.\n */\nfunction manager() {\n    if (!cm)\n        cm = new CommandManager();\n    return cm;\n}\nexports.manager = manager;\n/*\n * function for RAML -> Show Quick Commands (^Q)\n */\nfunction showCommands() {\n    manager().show();\n}\nexports.showCommands = showCommands;\n/*\n * registerCommands is called at the plugin initialization for registering global commands\n */\nfunction registerCommands() {\n    cc.registerQuickCommands(manager());\n    cm.add('api-workbench:editor-tools', 'Show Editor Tools', function () { return et.initEditorTools(); }, function () { return et.editorToolsStatus() == false; });\n}\nexports.registerCommands = registerCommands;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/quick-commands.js\n// module id = 22\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar atom = require(\"../core/atomWrapper\");\nvar aspv = require(\"atom-space-pen-views\");\n/*\n * List viewer for commands. accepts confirmation function, label function and key for fuzzy filtering.\n */\nvar SelectListView = /** @class */ (function (_super) {\n    __extends(SelectListView, _super);\n    function SelectListView(_confirmed, label, filterKey) {\n        if (filterKey === void 0) { filterKey = ''; }\n        var _this = _super.call(this, []) || this;\n        _this._confirmed = _confirmed;\n        _this.label = label;\n        _this.filterKey = filterKey;\n        return _this;\n    }\n    SelectListView.prototype.getFilterKey = function () { return this.filterKey; };\n    SelectListView.prototype.viewForItem = function (item) {\n        return \"<li>\" + this.label(item) + \"</li>\";\n    };\n    SelectListView.prototype.cancel = function () {\n        this.panel.hide();\n        _super.prototype.cancel.call(this);\n    };\n    SelectListView.prototype.hide = function () {\n        if (!this.panel)\n            return;\n        this.panel.hide();\n    };\n    SelectListView.prototype.confirmed = function (item) {\n        this._confirmed(item);\n        this.hide();\n        return this.getSelectedItemView();\n    };\n    SelectListView.prototype.show = function (commands) {\n        this.storeFocusedElement();\n        if (!this.panel)\n            this.panel = atom.workspace.addModalPanel({ item: this });\n        this.setItems(commands);\n        this.panel.show();\n        this.focusFilterEditor();\n    };\n    return SelectListView;\n}(aspv.SelectListView));\nexports.SelectListView = SelectListView;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtREFBbUQ7Ozs7Ozs7Ozs7OztBQUVuRCwwQ0FBNkM7QUFDN0MsMkNBQThDO0FBRzlDOztHQUVHO0FBQ0g7SUFBdUMsa0NBQW1CO0lBRXhELHdCQUFtQixVQUE2QixFQUFVLEtBQXFCLEVBQVUsU0FBc0I7UUFBdEIsMEJBQUEsRUFBQSxjQUFzQjtRQUEvRyxZQUNFLGtCQUFNLEVBQUUsQ0FBQyxTQUNWO1FBRmtCLGdCQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUFVLFdBQUssR0FBTCxLQUFLLENBQWdCO1FBQVUsZUFBUyxHQUFULFNBQVMsQ0FBYTs7SUFFL0csQ0FBQztJQUVELHFDQUFZLEdBQVosY0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXpDLG9DQUFXLEdBQVgsVUFBWSxJQUFJO1FBQ2QsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUM3QyxDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEIsaUJBQU0sTUFBTSxXQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELDZCQUFJLEdBQUo7UUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLElBQUk7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBSUQsNkJBQUksR0FBSixVQUFLLFFBQWE7UUFDaEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDc0MsSUFBSSxDQUFDLGNBQWMsR0FxQ3pEO0FBckNZLHdDQUFjIiwiZmlsZSI6InNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuaW1wb3J0IGF0b20gPSByZXF1aXJlKCcuLi9jb3JlL2F0b21XcmFwcGVyJyk7XG5pbXBvcnQgYXNwdiA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5cblxuLypcbiAqIExpc3Qgdmlld2VyIGZvciBjb21tYW5kcy4gYWNjZXB0cyBjb25maXJtYXRpb24gZnVuY3Rpb24sIGxhYmVsIGZ1bmN0aW9uIGFuZCBrZXkgZm9yIGZ1enp5IGZpbHRlcmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdExpc3RWaWV3PFQ+IGV4dGVuZHMgYXNwdi5TZWxlY3RMaXN0VmlldyB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIF9jb25maXJtZWQ6IChpdGVtOiBUKSA9PiB2b2lkLCBwcml2YXRlIGxhYmVsOiAoaXRlbTogVCk9PmFueSwgcHJpdmF0ZSBmaWx0ZXJLZXk6IHN0cmluZyA9ICcnKSB7XG4gICAgc3VwZXIoW10pO1xuICB9XG5cbiAgZ2V0RmlsdGVyS2V5KCkgeyByZXR1cm4gdGhpcy5maWx0ZXJLZXk7IH1cblxuICB2aWV3Rm9ySXRlbShpdGVtKSB7XG4gICAgcmV0dXJuIFwiPGxpPlwiICsgdGhpcy5sYWJlbChpdGVtKSArIFwiPC9saT5cIjtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnBhbmVsLmhpZGUoKTtcbiAgICBzdXBlci5jYW5jZWwoKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSByZXR1cm47XG4gICAgdGhpcy5wYW5lbC5oaWRlKCk7XG4gIH1cblxuICBjb25maXJtZWQoaXRlbSkge1xuICAgIHRoaXMuX2NvbmZpcm1lZChpdGVtKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEl0ZW1WaWV3KCk7XG4gIH1cblxuICBwcml2YXRlIHBhbmVsOiBhbnk7XG5cbiAgc2hvdyhjb21tYW5kczogVFtdKSB7XG4gICAgdGhpcy5zdG9yZUZvY3VzZWRFbGVtZW50KCk7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSB0aGlzLnBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7IGl0ZW06IDxhbnk+dGhpcyB9KTtcbiAgICB0aGlzLnNldEl0ZW1zKGNvbW1hbmRzKTtcbiAgICB0aGlzLnBhbmVsLnNob3coKTtcbiAgICB0aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7XG4gIH1cbn1cbiJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/quick-commands-ui.js\n// module id = 23\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import dialogs=require(\"../dialogs/dialogs\")\n// import path=require('path')\n// import rp=require(\"raml-1-parser\")\n//\n// import hl=rp.hl;\n// import universe = rp.universes;\n// import services =rp.ds;\n//\n// import universeHelpers =rp.universeHelpers;\n//\n// class AddNewResourceStateCalculator extends contextActions.CommonASTStateCalculator {\n//     calculate () : any {\n//\n//         //usually we dont need to check the editor, CommonASTStateCalculator does this for us\n//         //but in this case we accept null generalState, so double-checking for opened file\n//         var editor=this.getEditor()\n//         if (!editor) return null\n//\n//         if (path.extname(editor.getPath()) != '.raml') return null\n//\n//         var generalState = this.getGeneralState()\n//         if (!generalState) return null;\n//\n//         var highLevelNode = <hl.IHighLevelNode><any>generalState.node;\n//\n//         if (!universeHelpers.isResourceType(highLevelNode.definition()) &&\n//             !universeHelpers.isApiType(highLevelNode.definition()))\n//             return null\n//\n//         if(!highLevelNode.lowLevel()) {\n//             return null;\n//         }\n//\n//         return highLevelNode\n//     }\n// }\n//\n// class CreateNewAPIStateCalculator extends contextActions.CommonASTStateCalculator {\n//     calculate () : any {\n//\n//         var generalState = this.getGeneralState()\n//         if (generalState) return null\n//\n//         var editor=this.getEditor()\n//         if (!editor) return null\n//\n//         if (path.extname(editor.getPath()) != '.raml') return null\n//\n//         var text = editor.getText().trim()\n//         if (text != \"\") return null\n//\n//         return {}\n//     }\n// }\n//\n//\n// export function getResourceParent(node: hl.IHighLevelNode) {\n//     if (!node || !node.property()) return null;\n//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n//     return getResourceParent(node.parent());\n// }\n// function getMethodParent(node: hl.IHighLevelNode) {\n//     if (!node || !node.property()) return null;\n//     if ((universeHelpers.isMethodType(node.definition())||universeHelpers.isTraitType(node.definition()))&&!node.definition().getAdapter(services.RAMLService).isUserDefined()){\n//         return node;\n//     }\n//     return null;\n// }\n// function getParent(node: hl.IHighLevelNode,name:string) {\n//     if (!node || !node.property()) return null;\n//     if ((node.definition().isAssignableFrom(name))){\n//         return node;\n//     }\n//     return null;\n// }\n//\n// function getResourceParentOrRoot(node: hl.IHighLevelNode) {\n//     var rp = getResourceParent(node);\n//     return rp ? rp : editorTools.aquireManager().ast;\n// }\n//\n// export function toResource(node: hl.IHighLevelNode) {\n//     if (!node || !node.property()) return null;\n//\n//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n//\n//     return null;\n// }\n//\nfunction registerQuickCommands(cm) {\n    //     if (!editorTools.aquireManager()) editorTools.initEditorTools(false);\n    //\n    //     var commands = [\n    //         //cm.add( 'raml-labs:re-parse',\n    //         //    \"Parse current file again\",\n    //         //    () => {\n    //         //        editorTools.aquireManager().doParse(editorTools.aquireManager().getCurrentEditor().getPath());\n    //         //        editorTools.aquireManager().getView().forEachViewer(viewer=>viewer.clear());\n    //         //        editorTools.aquireManager().getView().setUnit(editorTools.aquireManager().ast, true); },\n    //         //    () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && editorTools.aquireManager().ast != null,\n    //         //    -100)\n    //\n    //     ];\n    //\n    //     commands.forEach(x=>x['__module__'] = 'editorTools');\n    //\n    //     contextActions.addAction({\n    //         name : \"Add new resource\",\n    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n    //         category : [\"Add new...\"],\n    //         onClick : state=>dialogs.newResource(editorTools.aquireManager().getSelectedNode()),\n    //         stateCalculator : new AddNewResourceStateCalculator(),\n    //         shouldDisplay : state=>state != null\n    //     })\n    //\n    //     contextActions.addAction({\n    //         name : \"Create new API\",\n    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n    //         category : [\"Add new...\"],\n    //         onClick : state=>dialogs.newApi(),\n    //         stateCalculator : new CreateNewAPIStateCalculator(),\n    //         shouldDisplay : state=>state != null\n    //     })\n    //\n    //     contextActions.addSimpleAction(\"Add new method\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newMethod(toResource(editorTools.aquireManager().getSelectedNode())),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && toResource(editorTools.aquireManager().getSelectedNode()) != null);\n    //\n    //     contextActions.addSimpleAction(\"Create new URI Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(toResource(editorTools.aquireManager().getSelectedNode()),\"Create new URI Parameter\",\"uriParameters\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (toResource(editorTools.aquireManager().getSelectedNode()) != null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Query Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Query Parameter\",\"queryParameters\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Header\",\"headers\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Response Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Header\",\"headers\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n    //     contextActions.addSimpleAction(\"Create new Response Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Response Body\",\"body\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n    //     contextActions.addSimpleAction(\"Create new Property\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\"),\"Create new Property\",\"properties\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\" )!= null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Body\",\"body\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n    //     contextActions.addSimpleAction(\"Create new Response\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Response\",\"responses\",\"200\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n}\nexports.registerQuickCommands = registerQuickCommands;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/code-commands.js\n// module id = 24\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import suggestions = require('raml-suggestions');\nvar ramlServer = require(\"raml-language-server\");\n// import sharedAstInitializerInterfaces = require('../shared-ast-initializer-interfaces');\nexports.selector = '.source.raml';\nexports.disableForSelector = '.text.html .comment';\nexports.filterSuggestions = true;\nexports.inclusionPriority = 1;\nexports.excludeLowerPriority = true;\n// export function initialize(astProvider : sharedAstInitializerInterfaces.IASTProvider) {\n//     suggestions.setDefaultASTProvider(<any>astProvider);\n// }\nfunction onDidInsertSuggestion(event) {\n    var offset = event.editor.getBuffer().characterIndexForPosition(event.triggerPosition);\n    if (event.suggestion.annotation) {\n        var txt = event.editor.getBuffer().getText();\n        for (var i = offset; i < txt.length; i++) {\n            var c = txt.charAt(i);\n            if (c == ')') {\n                offset = i + 1;\n                break;\n            }\n            if (c == '\\r' || c == '\\n') {\n                return;\n            }\n        }\n        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n        event.editor.getBuffer().insert(newPos, ':');\n        return;\n    }\n    if ((event.suggestion.replacementPrefix && event.suggestion.extra) || event.suggestion.extra == \"%\") {\n        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset - event.suggestion.replacementPrefix.length);\n        event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n    }\n    else {\n        //This actually looks exactly like a previous case but typing it as a separate case for now TODO\n        if (event.suggestion.extra == \" \") {\n            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n        }\n        //FIXME\n        if (event.suggestion.extra == \" { \") {\n            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n        }\n        if (event.suggestion.extra && event.suggestion.extra.indexOf(\"!include\") != -1) {\n            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n        }\n    }\n}\nexports.onDidInsertSuggestion = onDidInsertSuggestion;\n// class FSProvider implements suggestions.IFSProvider {\n//     contentDirName(content: suggestions.IEditorStateProvider): string {\n//         var contentPath = content.getPath();\n//\n//         return path.dirname(contentPath);\n//     }\n//\n//     dirName(childPath: string): string {\n//         return path.dirname(childPath);\n//     }\n//\n//     exists(checkPath: string): boolean {\n//         return fs.existsSync(checkPath);\n//     }\n//\n//     resolve(contextPath: string, relativePath: string): string {\n//         return path.resolve(contextPath, relativePath);\n//     }\n//\n//     isDirectory(dirPath: string): boolean {\n//         var stat = fs.statSync(dirPath);\n//\n//         return stat && stat.isDirectory();\n//     }\n//\n//     readDir(dirPath: string): string[] {\n//         return fs.readdirSync(dirPath);\n//     }\n//\n//     existsAsync(path: string): Promise<boolean> {\n//         return new Promise(resolve => {\n//             fs.exists(path, (result) => {resolve(result)})\n//         });\n//     }\n//\n//     /**\n//      * Returns directory content list.\n//      * @param fullPath\n//      */\n//     readDirAsync(path: string): Promise<string[]> {\n//         return new Promise(resolve => {\n//             fs.readdir(path, (err, result) => {resolve(result)})\n//         });\n//     }\n//\n//     /**\n//      * Check whether the path points to a directory.\n//      * @param fullPath\n//      */\n//     isDirectoryAsync(path: string): Promise<boolean> {\n//         return new Promise(resolve => {\n//             fs.stat(path, (err, stats) => {resolve(stats.isDirectory())})\n//         });\n//     }\n// }\n// class AtomEditorState implements suggestions.IEditorStateProvider {\n//     textEditor: AtomCore.IEditor;\n//\n//     constructor(textEditor: AtomCore.IEditor,private request: AtomCompletionRequest) {\n//         this.textEditor = textEditor;\n//     }\n//\n//     getText(): string {\n//         return this.textEditor.getBuffer().getText();\n//     }\n//\n//     getPath(): string {\n//         return this.textEditor.getPath();\n//     }\n//\n//     getBaseName(): string {\n//         return path.basename(this.getPath());\n//     }\n//\n//     getOffset(): number {\n//         return this.request.editor.getBuffer().characterIndexForPosition(this.request.bufferPosition);\n//     }\n// }\nfunction getSuggestions(request) {\n    // var editorState = new AtomEditorState(request.editor, request);\n    var editor = request.editor;\n    var offset = editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n    ramlServer.getNodeClientConnection().documentChanged({\n        uri: request.editor.getPath(),\n        text: editor.getText()\n    });\n    return ramlServer.getNodeClientConnection().getSuggestions(request.editor.getPath(), offset);\n    // return suggestions.suggest(editorState, new FSProvider());\n}\nexports.getSuggestions = getSuggestions;\n// export function getAstNode(request: AtomCompletionRequest,clearLastChar:boolean=true,allowNull:boolean=true):highlevel.IParseResult{\n//     var p=request.editor.getPath();\n//     var prj=rp.project.createProject(path.dirname(p));\n//     var offset=request.editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n//     var text=request.editor.getBuffer().getText();\n//     var kind=search.determineCompletionKind(text,offset);\n//     if(kind==search.LocationKind.KEY_COMPLETION&&clearLastChar){\n//         var pos=offset>0?offset-1:offset;\n//         for (var i=pos;i>0;i--){\n//             var c=text[i];\n//             if (c=='\\r'||c=='\\n'){\n//                 break;\n//             }\n//             else{\n//                 if (c==' '||c=='\\t'){\n//                     ilevel++;\n//                 }\n//             }\n//         }\n//         var oldOfffset=offset;\n//\n//         text=text.substring(0,oldOfffset)+\"k:\"+text.substring(oldOfffset);\n//         //offset--;\n//     }\n//     var ilevel=0;\n//     var unit=prj.setCachedUnitContent(path.basename(p),text);\n//     var ast=<highlevel.IHighLevelNode>unit.highLevel();\n//     var cm=offset;\n//     for (var pm=offset-1;pm>=0;pm--){\n//         var c=text[pm];\n//         //if (c==' '||c=='\\t'||c=='\\r'||c=='\\n'){\n//         //    cm=pm-1;\n//         //    continue;\n//         //}\n//         if (c==' '||c=='\\t'){\n//             cm=pm-1;\n//             continue;\n//         }\n//         break;\n//     }\n//     var astNode=ast.findElementAtOffset(cm);\n//\n//     if (astNode&&astNode.parent()==null){\n//         if (ilevel>0&&kind==search.LocationKind.KEY_COMPLETION) {\n//             var attr=_.find(astNode.attrs(),attr=>{\n//                 var at=<any>attr;\n//                 return at.lowLevel().start()<offset&&at.lowLevel().end()>=offset&&!at.property().isKey()\n//             });\n//             if (!attr) {\n//                 if (allowNull) {\n//                     return null;\n//                 }\n//             }\n//         }\n//         //check if we are on correct indentation level\n//     }\n//     if (!allowNull&&!astNode){\n//         return ast;\n//     }\n//     return astNode;\n// }\n//\n// export function saveUnit(unit : lowLevel.ICompilationUnit) : void {\n//     var unitPath = unit.absolutePath()\n//     var unitText = unit.contents()\n//\n//     //first trying to find an opened text editor\n//     var openedEditor = _.find(atom.workspace.getTextEditors(), editor => {\n//         var editorPath = editor.getPath()\n//         return editorPath == unitPath\n//     })\n//\n//     if (openedEditor) {\n//         openedEditor.setText(unitText)\n//     } else {\n//         fs.writeFileSync(unitPath, unitText)\n//     }\n// }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/suggestion/provider.js\n// module id = 25\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction doPatch() {\n    var oldRegister = document.registerElement;\n    document.registerElement = function (name, options) {\n        if (name === \"atom-pane-resize-handle\") {\n            var proto = options.prototype;\n            if (proto) {\n                var oldAttachedCallback = proto.attachedCallback;\n                proto.attachedCallback = function () {\n                    if (this.parentElement) {\n                        return oldAttachedCallback.apply(this, []);\n                    }\n                };\n            }\n            document.registerElement = oldRegister;\n        }\n        return oldRegister.apply(document, [name, options]);\n    };\n}\nexports.doPatch = doPatch;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvcGF0Y2hFbGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBRUksSUFBSSxXQUFXLEdBQVMsUUFBUyxDQUFDLGVBQWUsQ0FBQztJQUU1QyxRQUFTLENBQUMsZUFBZSxHQUFHLFVBQVUsSUFBSSxFQUFFLE9BQU87UUFFckQsRUFBRSxDQUFBLENBQUMsSUFBSSxLQUFLLHlCQUF5QixDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBRTlCLEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsSUFBSSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBRWpELEtBQUssQ0FBQyxnQkFBZ0IsR0FBRztvQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO29CQUM5QyxDQUFDO2dCQUNMLENBQUMsQ0FBQTtZQUNMLENBQUM7WUFFSyxRQUFTLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQXhCRCwwQkF3QkMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9wYXRjaEVsZW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRvUGF0Y2goKTogdm9pZCB7XG5cbiAgICB2YXIgb2xkUmVnaXN0ZXIgPSAoPGFueT5kb2N1bWVudCkucmVnaXN0ZXJFbGVtZW50O1xuXG4gICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG5cbiAgICAgICAgaWYobmFtZSA9PT0gXCJhdG9tLXBhbmUtcmVzaXplLWhhbmRsZVwiKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBvcHRpb25zLnByb3RvdHlwZTtcblxuICAgICAgICAgICAgaWYocHJvdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkQXR0YWNoZWRDYWxsYmFjayA9IHByb3RvLmF0dGFjaGVkQ2FsbGJhY2s7XG5cbiAgICAgICAgICAgICAgICBwcm90by5hdHRhY2hlZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkQXR0YWNoZWRDYWxsYmFjay5hcHBseSh0aGlzLCBbXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IG9sZFJlZ2lzdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9sZFJlZ2lzdGVyLmFwcGx5KGRvY3VtZW50LCBbbmFtZSwgb3B0aW9uc10pXG4gICAgfVxufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/patchElements.js\n// module id = 26\n// module chunks = 0","module.exports = require(\"atom\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom\"\n// module id = 27\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nexports.DYNAMIC_COMMAND_TAG = \"DYNAMIC_COMMAND_TAG\";\nvar commandIdToCommandInfo = {};\nvar tagToCommands = {};\n/**\n * Adds new managed command\n * @param selector - command CSS selector\n * @param id - command id. Must be unique across the managed commands.\n * @param callBack - called on command invocation\n * @param tag - optional action tag allowing to perform batch operations\n */\nfunction addCommand(selector, id, callBack, tag) {\n    if (_.find(listCommands(), function (commandId) {\n        if (commandId == id) {\n            return true;\n        }\n        return false;\n    })) {\n        return;\n    }\n    var disposable = atom.commands.add(selector, id, callBack);\n    var commandInfo = {\n        commandId: id,\n        tag: tag,\n        disposable: disposable\n    };\n    commandIdToCommandInfo[id] = commandInfo;\n    if (tag) {\n        var tagCommands = tagToCommands[tag];\n        if (!tagCommands) {\n            tagCommands = [];\n            tagToCommands[tag] = tagCommands;\n        }\n        tagCommands.push(commandInfo);\n    }\n}\nexports.addCommand = addCommand;\n/**\n * Deletes unmanaged command.\n * Generally, should not be called for managed actions, use the managed\n * version instead.\n * @param id - command id\n */\nfunction deleteUnmanagedCommand(id) {\n    atom.commands.registeredCommands[id] = null;\n    atom.commands.selectorBasedListenersByCommandName[id] = null;\n}\nexports.deleteUnmanagedCommand = deleteUnmanagedCommand;\n/**\n * Deletes managed action by id\n * @param id\n */\nfunction deleteManagedCommand(id) {\n    var commandInfo = commandIdToCommandInfo[id];\n    if (!commandInfo)\n        return;\n    commandInfo.disposable.dispose();\n    delete commandIdToCommandInfo[id];\n    if (commandInfo.tag) {\n        var tagCommands = tagToCommands[commandInfo.tag];\n        if (!tagCommands)\n            return;\n        var infoIndex = -1;\n        _.find(tagCommands, function (currentInfo, index) {\n            if (currentInfo.commandId == id) {\n                infoIndex = index;\n                return true;\n            }\n            return false;\n        });\n        if (infoIndex != -1)\n            tagCommands.splice(infoIndex, 1);\n    }\n}\nexports.deleteManagedCommand = deleteManagedCommand;\n/**\n * Deletes all managed commands tagged the the specific tag\n * @param tag\n */\nfunction deleteCommandsByTag(tag) {\n    var tagCommands = tagToCommands[tag];\n    if (!tagCommands)\n        return;\n    for (var index in tagCommands) {\n        var currentInfo = tagCommands[index];\n        currentInfo.disposable.dispose();\n        delete commandIdToCommandInfo[currentInfo.commandId];\n    }\n    delete tagToCommands[tag];\n}\nexports.deleteCommandsByTag = deleteCommandsByTag;\n/**\n * Lists all commands, both managed and unmanaged.\n * @returns {string[]}\n */\nfunction listCommands() {\n    var result = [];\n    for (var commandName in atom.commands.selectorBasedListenersByCommandName) {\n        result.push(commandName);\n    }\n    return result;\n}\nexports.listCommands = listCommands;\nvar initialized = false;\nfunction initialize() {\n    if (initialized)\n        return;\n    initialized = true;\n    try {\n        //forcing command palette to register itself\n        atom.packages.activatePackage('command-palette');\n        //registering our own listener to command palette's command\n        var listener = function () {\n            prePanelDisplay();\n        };\n        listener.commandManager = true;\n        atom.commands.add('atom-workspace', 'command-palette:toggle', listener);\n        ////and now swapping those listeners, so our one is called first\n        //var listenersArray = (<any>atom.commands.selectorBasedListenersByCommandName)\n        //    [\"command-palette:toggle\"]\n        //listenersArray.splice(0,0,listenersArray[1])\n        //listenersArray.splice(1, 1)\n        var listenersArray = atom.commands.selectorBasedListenersByCommandName[\"command-palette:toggle\"];\n        listenersArray.forEach(function (listener) {\n            var callback = listener.callback || listener.didDispatch;\n            if (callback && callback.commandManager) {\n                listener.sequenceNumber = 100500000;\n            }\n        });\n    }\n    catch (Error) {\n        console.error(Error.message);\n    }\n}\nexports.initialize = initialize;\nvar contributors = {};\nfunction registerContributor(contributor) {\n    contributors[contributor.id] = contributor;\n}\nexports.registerContributor = registerContributor;\nfunction prePanelDisplay() {\n    deleteCommandsByTag(exports.DYNAMIC_COMMAND_TAG);\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        if (contributor.calculationStarted) {\n            contributor.calculationStarted();\n        }\n    }\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        contributor.calculateItems().forEach(function (item) {\n            addCommand(item.selector, \"api-workbench:\" + item.id, item.callBack, exports.DYNAMIC_COMMAND_TAG);\n        });\n    }\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        if (contributor.calculationFinished) {\n            contributor.calculationFinished();\n        }\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/command-manager.js\n// module id = 28\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar commandManager = require(\"../quick-commands/command-manager\");\nvar contextMenuImpl = require(\"./contextMenuImpl\");\nvar originalShowForEvent;\n/**\n * Must be called first, at startup, before the module is used.\n */\nfunction initialize() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    originalShowForEvent = atom.contextMenu.constructor.prototype.showForEvent;\n    atom.contextMenu.constructor.prototype.showForEvent = function (event) {\n        preMenuDisplay().then(function () {\n            originalShowForEvent.apply(atom.contextMenu, [event]);\n            postMenuDisplay();\n        });\n    };\n}\nexports.initialize = initialize;\nvar initialized = false;\nfunction preMenuDisplay() {\n    try {\n        return contextMenuImpl.calculateMenuItemsTree().then(function (treeRoots) {\n            var nodeSets = {};\n            cleanExistingSets();\n            commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG);\n            treeRoots.forEach(function (node) {\n                var itemSet = nodeSets[node.selector];\n                if (!itemSet) {\n                    itemSet = findOrCreateItemSet(node.selector);\n                    nodeSets[node.selector] = itemSet;\n                }\n                var menuItem = constructAtomMenuItem(node);\n                itemSet.items.push(menuItem);\n            });\n        });\n    }\n    catch (Error) {\n        console.log(Error.message);\n    }\n}\nfunction constructAtomMenuItem(node) {\n    var result = {\n        label: node.name,\n    };\n    if (node.children.length > 0) {\n        result.submenu = [];\n    }\n    else {\n        var commandName = \"api-workbench:\" + node.name;\n        var existingCommands = commandManager.listCommands();\n        commandManager.addCommand(node.selector, commandName, node.onClick, commandManager.DYNAMIC_COMMAND_TAG);\n        result.command = commandName;\n    }\n    node.children.forEach(function (child) {\n        var childMenuItem = constructAtomMenuItem(child);\n        result.submenu.push(childMenuItem);\n    });\n    return result;\n}\nvar DYNAMIC_SET_TAG = \"DYNAMIC_SET_TAG\";\n/**\n * Selector that were used at least once in the context menu\n * @type {Array}\n */\nvar usedSelectors = [];\nfunction findOrCreateItemSet(selector) {\n    var existingSet = _.find(atom.contextMenu.itemSets, function (currentSet) {\n        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n    });\n    if (!existingSet) {\n        existingSet = {\n            items: [],\n            selector: selector,\n            specificity: 11,\n            tag: DYNAMIC_SET_TAG\n        };\n        atom.contextMenu.itemSets.push(existingSet);\n        //saving used selector name\n        if (!_.find(usedSelectors, function (name) { return name == selector; })) {\n            usedSelectors.push(selector);\n        }\n    }\n    return existingSet;\n}\nfunction cleanExistingSets() {\n    var existingSets = _.filter(atom.contextMenu.itemSets, function (currentSet) {\n        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n    });\n    existingSets.forEach(function (existingSet) {\n        existingSet.items = [];\n    });\n}\nfunction postMenuDisplay() {\n    //commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG)\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/contextMenu.js\n// module id = 29\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar ramlServer = require(\"raml-language-server\");\nvar editorTools = require(\"../editor-tools/editor-tools\");\nvar uilibsModule = require(\"atom-ui-lib\");\nvar fs = require(\"fs\");\nvar mkdirp = require(\"mkdirp\");\nvar pathModule = require(\"path\");\nvar actionUIManager = require(\"./actionUIManager\");\nvar uiBuilder = require(\"../editor-tools/detailElements\");\nvar contributors = {};\n/**\n * Adds new contributor to the list. All contributors are asked for the menu items\n * before the menu is displayed.\n * @param contributor\n */\nfunction registerContributor(contributor) {\n    contributors[contributor.id] = contributor;\n}\nexports.registerContributor = registerContributor;\n/**\n * Generally it is recommended to use contributor-based architecture instead.\n * This method allows adding a single menu item manually, if needed.\n * @param name\n * @param onClick\n * @param categories\n * @param shouldDisplay\n */\nfunction addMenuItem(name, onClick, categories, shouldDisplay) {\n}\nexports.addMenuItem = addMenuItem;\n/**\n * Generally it is recommended to use contributor-based architecture instead.\n * Deletes all menu items with a given selector. Should almost never be called.\n * Can not delete contributor-based menu items.\n * @param selector\n */\nfunction deleteMenuItems(selector) {\n    //TODO implement\n}\nexports.deleteMenuItems = deleteMenuItems;\n/**\n * Generally it is recommended to use contributor-based architecture instead.\n * Deletes menu item by its selector, name, and optionally categories.\n * Can not delete contributor-based menu items.\n * @param selector\n * @param name\n * @param categories\n */\nfunction deleteMenuItem(selector, name, categories) {\n    //TODO implement\n}\nexports.deleteMenuItem = deleteMenuItem;\nvar ContextMenuItemNode = /** @class */ (function () {\n    function ContextMenuItemNode(menuItem, nameOverride) {\n        this.selector = menuItem.selector;\n        if (nameOverride) {\n            this.name = nameOverride;\n        }\n        else {\n            this.name = menuItem.name;\n        }\n        this.categories = menuItem.categories;\n        this.onClick = menuItem.onClick;\n        this.children = [];\n    }\n    return ContextMenuItemNode;\n}());\n/**\n * Calculates current menu items tree.\n * @returns {IContextMenuItemNode[]}\n */\nfunction calculateMenuItemsTree() {\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        if (contributor.calculationStarted) {\n            contributor.calculationStarted();\n        }\n    }\n    var contributorPromises = [];\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        contributorPromises.push(contributor.calculateItems());\n    }\n    return Promise.all(contributorPromises).then(function (contributorItems) {\n        var result = [];\n        contributorItems.forEach(function (items) {\n            items.forEach(function (item) {\n                addItemsTreeNode(result, item);\n            });\n        });\n        for (var contributorId in contributors) {\n            var contributor = contributors[contributorId];\n            if (contributor.calculationFinished) {\n                contributor.calculationFinished();\n            }\n        }\n        return result;\n    });\n}\nexports.calculateMenuItemsTree = calculateMenuItemsTree;\nfunction addItemsTreeNode(roots, item) {\n    var currentList = roots;\n    if (item.categories) {\n        for (var catIndex in item.categories) {\n            var currentSegment = item.categories[catIndex];\n            var existingNode = _.find(currentList, function (node) {\n                return node.name == currentSegment;\n            });\n            if (!existingNode) {\n                existingNode = new ContextMenuItemNode(item, currentSegment);\n                currentList.push(existingNode);\n            }\n            if (!existingNode.children) {\n                currentList = [];\n                existingNode.children = currentList;\n            }\n            else {\n                currentList = existingNode.children;\n            }\n        }\n    }\n    var leafNode = _.find(currentList, function (node) {\n        return node.name == item.name;\n    });\n    if (leafNode) {\n        var index = currentList.indexOf(leafNode, 0);\n        if (index != undefined) {\n            currentList.splice(index, 1);\n        }\n    }\n    leafNode = new ContextMenuItemNode(item);\n    currentList.push(leafNode);\n}\nvar actionBasedMenuInitialized = false;\nfunction onClickHandler(path, action, position) {\n    ramlServer.getNodeClientConnection().executeContextAction(path, action, position).then(function (changes) {\n        var editorManager = editorTools.aquireManager();\n        if (!editorManager)\n            return Promise.resolve([]);\n        var path = editorManager.getPath();\n        var _loop_1 = function (change) {\n            if (change.uri == path && change.text != null) {\n                editorManager.getCurrentEditor().getBuffer().setText(change.text);\n                ramlServer.getNodeClientConnection().documentChanged({\n                    uri: path,\n                    text: change.text\n                });\n            }\n            else if (change.text != null) {\n                var editorFound_1 = false;\n                atom.workspace.getTextEditors().forEach(function (currentEditor) {\n                    if (currentEditor.getPath && currentEditor.getPath() == change.uri) {\n                        currentEditor.getBuffer().setText(change.text);\n                        editorFound_1 = true;\n                    }\n                });\n                if (!editorFound_1) {\n                    mkdirp.sync(pathModule.dirname(change.uri));\n                    fs.writeFileSync(change.uri, change.text);\n                }\n            }\n        };\n        //TODO handle all cases\n        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n            var change = changes_1[_i];\n            _loop_1(change);\n        }\n    });\n}\n/**\n * Initializes and registers standard context menu contributor, based on currently available context actions.\n * @param selector - CSS selector, can be null if not used in the display.\n */\nfunction initializeActionBasedMenu(selector) {\n    var editorContextMenuContributor = {\n        id: \"editorContextActionContributor\",\n        calculateItems: function () {\n            var editorManager = editorTools.aquireManager();\n            if (!editorManager)\n                return Promise.resolve([]);\n            var path = editorManager.getPath();\n            if (!path)\n                return Promise.resolve([]);\n            var position = editorManager.getCurrentPosition();\n            return ramlServer.getNodeClientConnection()\n                .calculateEditorContextActions(path, position).then(function (currentActions) {\n                var result = [];\n                currentActions.forEach(function (action) {\n                    // if (action.hasUI) {\n                    //     return;\n                    // }\n                    result.push({\n                        selector: selector,\n                        name: action.label ? action.label : action.name,\n                        categories: action.category,\n                        onClick: function () {\n                            onClickHandler(path, action, position);\n                        },\n                        children: []\n                    });\n                });\n                return result;\n            });\n        }\n    };\n    registerContributor(editorContextMenuContributor);\n    handleActionUI();\n    configureServerActions();\n    actionBasedMenuInitialized = true;\n}\nexports.initializeActionBasedMenu = initializeActionBasedMenu;\nfunction handleActionUI() {\n    ramlServer.getNodeClientConnection().onDisplayActionUI(function (uiDisplayRequest) {\n        ramlServer.getNodeClientConnection().debug(\"Got UI display request\", \"contextActions\", \"contextMenuImpl#handleActionUI\");\n        var actionUI = actionUIManager.getUICode(uiDisplayRequest.action.id);\n        if (!actionUI) {\n            ramlServer.getNodeClientConnection().error(\"Can not find UI for action \" +\n                uiDisplayRequest.action.id, \"contextActions\", \"handleActionUI\");\n            return Promise.resolve({});\n        }\n        global.IDE = atom;\n        global.UI = uilibsModule;\n        global.UIBuilder = uiBuilder;\n        return actionUI.run(uiDisplayRequest.initialUIState).then(function (result) {\n            ramlServer.getNodeClientConnection().debugDetail(\"Client: got result on dialog finish\", \"contextActions\", \"handleActionUI\");\n            return result;\n        });\n    });\n}\nfunction configureServerActions() {\n    ramlServer.getNodeClientConnection().setServerConfiguration({\n        actionsConfiguration: {\n            enableUIActions: true\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/contextMenuImpl.js\n// module id = 30\n// module chunks = 0","module.exports = require(\"mkdirp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mkdirp\"\n// module id = 31\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar completeBodyUI = require(\"./actions/completeBody/ui\");\nvar newMethodUI = require(\"./actions/newMethod/ui\");\nvar simpleActionUi = require(\"./actions/simpleAction/ui\");\nfunction getUICode(actionID) {\n    if (actionID == \"completeBody\") {\n        return completeBodyUI;\n    }\n    if (actionID == \"newMethod\") {\n        return newMethodUI;\n    }\n    if (actionID == \"Create new Response\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new URI Parameter\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Query Parameter\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Header\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Response Header\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Response Body\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Property\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Body\") {\n        return simpleActionUi;\n    }\n    return null;\n}\nexports.getUICode = getUICode;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25VSU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNEQ7QUFDNUQsb0RBQXNEO0FBRXRELDBEQUE0RDtBQU01RCxtQkFBMEIsUUFBZ0I7SUFDdEMsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksMEJBQTBCLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksNEJBQTRCLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQTFDRCw4QkEwQ0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvblVJTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wbGV0ZUJvZHlVSSA9IHJlcXVpcmUoXCIuL2FjdGlvbnMvY29tcGxldGVCb2R5L3VpXCIpXG5pbXBvcnQgbmV3TWV0aG9kVUkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL25ld01ldGhvZC91aVwiKVxuXG5pbXBvcnQgc2ltcGxlQWN0aW9uVWkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aVwiKVxuXG5pbnRlcmZhY2UgQWN0aW9uVUkge1xuICAgIHJ1bihpbml0aWFsU3RhdGU/OiBhbnkpOiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVSUNvZGUoYWN0aW9uSUQ6IHN0cmluZyk6IEFjdGlvblVJIHtcbiAgICBpZihhY3Rpb25JRCA9PSBcImNvbXBsZXRlQm9keVwiKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZUJvZHlVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIm5ld01ldGhvZFwiKSB7XG4gICAgICAgIHJldHVybiBuZXdNZXRob2RVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgUmVzcG9uc2VcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFVSSSBQYXJhbWV0ZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFF1ZXJ5IFBhcmFtZXRlclwiKSB7XG4gICAgICAgIHJldHVybiBzaW1wbGVBY3Rpb25VaTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgSGVhZGVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBSZXNwb25zZSBIZWFkZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFJlc3BvbnNlIEJvZHlcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFByb3BlcnR5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBCb2R5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actionUIManager.js\n// module id = 32\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar JsonSchemaGenerator = /** @class */ (function () {\n    function JsonSchemaGenerator() {\n    }\n    JsonSchemaGenerator.prototype.generateSchema = function (obj) {\n        var sch = {};\n        sch['required'] = true;\n        sch['$schema'] = 'http://json-schema.org/draft-03/schema';\n        this.pass(obj, sch);\n        return sch;\n    };\n    JsonSchemaGenerator.prototype.pass = function (value, property) {\n        var valueType = this.detectType(value);\n        property['type'] = valueType;\n        if (!value || value == null) {\n        }\n        else if (Array.isArray(value)) {\n            this.passArray(value, property);\n        }\n        else if (value instanceof Object) {\n            this.passObject(value, property);\n        }\n    };\n    JsonSchemaGenerator.prototype.passObject = function (obj, sch) {\n        var _this = this;\n        Object.keys(obj).forEach(function (x) { return _this.registerProperty(x, obj[x], sch); });\n    };\n    JsonSchemaGenerator.prototype.registerProperty = function (propName, value, sch) {\n        var properties = sch['properties'];\n        if (!properties) {\n            properties = {};\n            sch['properties'] = properties;\n        }\n        var property = properties[propName];\n        if (!property) {\n            property = {};\n            properties[propName] = property;\n        }\n        property['required'] = false;\n        this.pass(value, property);\n    };\n    JsonSchemaGenerator.prototype.passArray = function (array, property) {\n        var _this = this;\n        var items = property['items'];\n        if (!items) {\n            items = [];\n            property['items'] = items;\n        }\n        var l = array.length;\n        var itemSet = [];\n        array.forEach(function (value) {\n            var item = {};\n            _this.pass(value, item);\n            itemSet.push(item);\n        });\n        items.push(itemSet[0]);\n    };\n    JsonSchemaGenerator.prototype.detectType = function (value) {\n        if (Array.isArray(value)) {\n            return 'array';\n        }\n        return typeof value;\n    };\n    return JsonSchemaGenerator;\n}());\nfunction generateSchema(text, mediaType) {\n    var generator = new JsonSchemaGenerator();\n    var obj = JSON.parse(text);\n    var schemaObject = generator.generateSchema(obj);\n    var schemaString = JSON.stringify(schemaObject, null, 2);\n    return schemaString;\n}\nexports.generateSchema = generateSchema;\nvar FillBodyDialog = /** @class */ (function () {\n    function FillBodyDialog(title) {\n        if (title === void 0) { title = \"Fill body\"; }\n        var _this = this;\n        this.title = title;\n        this.name = \"\";\n        this.needXML = true;\n        this.needJSON = true;\n        this.jsexample = '{\\n \"message\":\"Hello world\"\\n}';\n        this.xmlexample = \"\";\n        this.xmlschema = \"\";\n        this.jsschema = \"\";\n        this.resultPromise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    FillBodyDialog.prototype.extraContent = function (s) {\n    };\n    FillBodyDialog.prototype.updateButtons = function () {\n        if (!this.createButton) {\n            return;\n        }\n        if (this.name.length == 0) {\n            this.createButton.setDisabled(true);\n            this.em.setDisplay(true);\n            this.em.setText(\"Please type name of your payload\");\n            return;\n        }\n        if (this.needJSON) {\n            try {\n                JSON.parse(this.jsexample);\n            }\n            catch (e) {\n                this.createButton.setDisabled(true);\n                this.em.setDisplay(true);\n                this.em.setText(\"JSON example is not correct\");\n                return;\n            }\n            // try {\n            //     var so = su.getJSONSchema(this.jsschema, null);\n            //\n            // } catch (e) {\n            //     this.createButton.setDisabled(true);\n            //     this.em.setDisplay(true)\n            //     this.em.setText(\"JSON schema is not correct\");\n            //     return;\n            // }\n        }\n        if (this.needXML) {\n            // try {\n            //     xmlutil(this.xmlexample);\n            // } catch (e) {\n            //     this.createButton.setDisabled(true);\n            //     this.em.setDisplay(true)\n            //     this.em.setText(\"XML example is not correct\");\n            //     return;\n            // }\n            // try {\n            //     var so = su.getXMLSchema(this.xmlschema);\n            //\n            // } catch (e) {\n            //     this.createButton.setDisabled(true);\n            //     this.em.setDisplay(true)\n            //     this.em.setText(\"XML schema is not correct\");\n            //     return;\n            // }\n        }\n        this.em.setDisplay(false);\n        this.createButton.setDisabled(false);\n    };\n    FillBodyDialog.prototype.show = function () {\n        var _this = this;\n        var zz = null;\n        this.em = UI.label(\"Please type name of your payload\", UI.Icon.BUG, UI.TextClasses.ERROR, UI.HighLightClasses.NONE);\n        var section = UI.section(this.title, UI.Icon.BOOK, false, false, this.em, UI.h3(\"Please type name for your payload\")).pad(10, 10);\n        section.addChild(UI.texfField(\"\", this.name, function (x) {\n            _this.name = x.getBinding().get();\n            _this.updateButtons();\n        }));\n        var r1 = UI.checkBox(\"Create XML body\");\n        r1.setValue(this.needXML);\n        r1.getBinding().addListener(function (x) {\n            _this.needXML = r1.getValue();\n            _this.updateButtons();\n        });\n        section.addChild(r1);\n        var r2 = UI.checkBox(\"Create JSON body\");\n        r2.setValue(this.needJSON);\n        r2.getBinding().addListener(function (x) {\n            _this.needJSON = r2.getValue();\n            _this.updateButtons();\n        });\n        section.addChild(r2);\n        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) {\n            zz.destroy();\n        }).margin(10, 10));\n        this.createButton = UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n            _this.onOk(zz);\n            zz.destroy();\n        });\n        buttonBar.addChild(this.createButton);\n        var tf = new UI.TabFolder();\n        this.createButton.setDisabled(true);\n        this.createTextSection(tf, \"JSON Example\", \"source.json\", \"jsexample\");\n        this.createTextSection(tf, \"JSON Schema\", \"source.json\", \"jsschema\");\n        this.createTextSection(tf, \"XML Example\", \"text.xml\", \"xmlexample\");\n        this.createTextSection(tf, \"XML Schema\", \"text.xml\", \"xmlschema\");\n        tf.setOnSelected(function () {\n            var c = tf.selectedComponent();\n            var te = c.children()[1];\n            te.setText(_this[c.id()]);\n        });\n        section.addChild(tf);\n        section.addChild(buttonBar);\n        zz = IDE.workspace.addModalPanel({ item: section.renderUI() });\n    };\n    FillBodyDialog.prototype.createTextSection = function (tf, caption, lang, code) {\n        var _this = this;\n        var hs = UI.vc();\n        hs.setCaption(caption);\n        hs.setId(code);\n        var ts = new UI.AtomEditorElement(\"\", function (x) { return x; });\n        ts.setMini(false);\n        ts.getBinding().addListener(function (x) {\n            _this[code] = ts.getValue();\n            _this.updateButtons();\n        });\n        //ts.setCaption(code)\n        ts.setText(\"\" + this[code]);\n        ts.setCaption(caption);\n        ts.setGrammar(lang);\n        ts.setStyle(\"height\", \"400px\");\n        ts.setStyle(\"border\", \"solid\");\n        ts.setStyle(\"border-width\", \"1px\");\n        hs.addChild(UI.h3(\"Please type your example here:\"));\n        hs.addChild(ts);\n        if (code == 'jsexample') {\n            var b = UI.button(\"Generate JSON schema\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n                try {\n                    var rs = generateSchema(_this.jsexample, \"application/json\");\n                    _this.jsschema = rs;\n                    tf.setSelectedIndex(1);\n                }\n                catch (e) {\n                    _this.jsschema = e.message;\n                    tf.setSelectedIndex(1);\n                }\n            });\n            hs.addChild(b.margin(5, 5, 5, 5));\n        }\n        // if (code == 'xmlexample') {\n        //     var b = UI.button(\"Generate JSON example\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, x=> {\n        //         try {\n        //             var rs = xmlutil(this.xmlexample)\n        //             this.jsexample = JSON.stringify(rs, null, 2);\n        //             tf.setSelectedIndex(0)\n        //         }\n        //         catch (e) {\n        //             this.jsexample = e.message;\n        //             tf.setSelectedIndex(0)\n        //         }\n        //     });\n        //     hs.addChild(b.margin(5, 5, 5, 5));\n        // }\n        tf.add(caption, null, hs);\n    };\n    FillBodyDialog.prototype.onOk = function (zz) {\n        this.resolve({\n            name: this.name,\n            needJSON: this.needJSON,\n            needXML: this.needXML,\n            jsexample: this.jsexample,\n            xmlexample: this.xmlexample,\n            jsschema: this.jsschema,\n            xmlschema: this.xmlschema,\n        });\n    };\n    FillBodyDialog.prototype.getResult = function () {\n        return this.resultPromise;\n    };\n    return FillBodyDialog;\n}());\nfunction run() {\n    var dialog = new FillBodyDialog();\n    dialog.show();\n    return dialog.getResult();\n}\nexports.run = run;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25zL2NvbXBsZXRlQm9keS91aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXFEQTtJQUFBO0lBeUVBLENBQUM7SUF2RUcsNENBQWMsR0FBZCxVQUFlLEdBQU87UUFFbEIsSUFBSSxHQUFHLEdBQVUsRUFBRSxDQUFBO1FBQ25CLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDdEIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLHdDQUF3QyxDQUFBO1FBRXpELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDZCxDQUFDO0lBRU8sa0NBQUksR0FBWixVQUFhLEtBQVMsRUFBRSxRQUFlO1FBRW5DLElBQUksU0FBUyxHQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUU5QixDQUFDO1FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckMsQ0FBQztJQUNMLENBQUM7SUFFTyx3Q0FBVSxHQUFsQixVQUFtQixHQUFVLEVBQUUsR0FBVTtRQUF6QyxpQkFFQztRQURHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQW5DLENBQW1DLENBQUUsQ0FBQTtJQUN4RSxDQUFDO0lBRU8sOENBQWdCLEdBQXhCLFVBQXlCLFFBQWUsRUFBRSxLQUFTLEVBQUUsR0FBVTtRQUUzRCxJQUFJLFVBQVUsR0FBVSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDekMsRUFBRSxDQUFBLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDO1lBQ1osVUFBVSxHQUFHLEVBQUUsQ0FBQTtZQUNmLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUE7UUFDbEMsQ0FBQztRQUVELElBQUksUUFBUSxHQUFVLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMxQyxFQUFFLENBQUEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUM7WUFDVixRQUFRLEdBQUcsRUFBRSxDQUFBO1lBQ2IsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtRQUNuQyxDQUFDO1FBQ0QsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU8sdUNBQVMsR0FBakIsVUFBa0IsS0FBVyxFQUFFLFFBQWU7UUFBOUMsaUJBaUJDO1FBZkcsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzdCLEVBQUUsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQztZQUNQLEtBQUssR0FBRyxFQUFFLENBQUE7WUFDVixRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFBO1FBQzdCLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBVSxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUNoQixLQUFLLENBQUMsT0FBTyxDQUFFLFVBQUEsS0FBSztZQUVoQixJQUFJLElBQUksR0FBVSxFQUFFLENBQUE7WUFDcEIsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN0QixDQUFDLENBQUMsQ0FBQTtRQUNGLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVPLHdDQUFVLEdBQWxCLFVBQW1CLEtBQVM7UUFDeEIsRUFBRSxDQUFBLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNsQixDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sS0FBSyxDQUFBO0lBQ3ZCLENBQUM7SUFDTCwwQkFBQztBQUFELENBekVBLEFBeUVDLElBQUE7QUFDRCx3QkFBK0IsSUFBVyxFQUFDLFNBQWdCO0lBQ3ZELElBQUksU0FBUyxHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQTtJQUN6QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLElBQUksWUFBWSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDaEQsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RELE1BQU0sQ0FBQyxZQUFZLENBQUE7QUFDdkIsQ0FBQztBQU5ELHdDQU1DO0FBRUQ7SUFPSSx3QkFBc0IsS0FBMEI7UUFBMUIsc0JBQUEsRUFBQSxtQkFBMEI7UUFBaEQsaUJBT0M7UUFQcUIsVUFBSyxHQUFMLEtBQUssQ0FBcUI7UUFMdEMsU0FBSSxHQUFVLEVBQUUsQ0FBQTtRQWtCMUIsWUFBTyxHQUFXLElBQUksQ0FBQztRQUN2QixhQUFRLEdBQVcsSUFBSSxDQUFDO1FBNEd4QixjQUFTLEdBQVUsZ0NBQWdDLENBQUE7UUFDbkQsZUFBVSxHQUFVLEVBQUUsQ0FBQztRQUN2QixjQUFTLEdBQVUsRUFBRSxDQUFDO1FBQ3RCLGFBQVEsR0FBVSxFQUFFLENBQUM7UUE1SGpCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFxRCxFQUNyRCxNQUE2QjtZQUUzRCxLQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN2QixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxxQ0FBWSxHQUFaLFVBQWEsQ0FBcUI7SUFFbEMsQ0FBQztJQU1ELHNDQUFhLEdBQWI7UUFDSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDO1FBQ1gsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQztnQkFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Z0JBQy9DLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFDRCxRQUFRO1lBQ1Isc0RBQXNEO1lBQ3RELEVBQUU7WUFDRixnQkFBZ0I7WUFDaEIsMkNBQTJDO1lBQzNDLCtCQUErQjtZQUMvQixxREFBcUQ7WUFDckQsY0FBYztZQUNkLElBQUk7UUFDUixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixRQUFRO1lBQ1IsZ0NBQWdDO1lBQ2hDLGdCQUFnQjtZQUNoQiwyQ0FBMkM7WUFDM0MsK0JBQStCO1lBQy9CLHFEQUFxRDtZQUNyRCxjQUFjO1lBQ2QsSUFBSTtZQUNKLFFBQVE7WUFDUixnREFBZ0Q7WUFDaEQsRUFBRTtZQUNGLGdCQUFnQjtZQUNoQiwyQ0FBMkM7WUFDM0MsK0JBQStCO1lBQy9CLG9EQUFvRDtZQUNwRCxjQUFjO1lBQ2QsSUFBSTtRQUNSLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBSUQsNkJBQUksR0FBSjtRQUFBLGlCQWlEQztRQWhERyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDZCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0NBQWtDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BILElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNqSSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBQSxDQUFDO1lBQzFDLEtBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ0gsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBQSxDQUFDO1lBQ3pCLEtBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzdCLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBQSxDQUFDO1lBQ3pCLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzlCLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFckIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDeEUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQUEsQ0FBQztZQUMzRyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDaEIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRWxCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFBLENBQUM7WUFDdkcsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3JDLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNsRSxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQ2IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDL0IsSUFBSSxFQUFFLEdBQXdDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUUsQ0FBQztZQUMvRCxFQUFFLENBQUMsT0FBTyxDQUFPLEtBQUssQ0FBbUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2RSxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QixFQUFFLEdBQVMsR0FBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBT08sMENBQWlCLEdBQXpCLFVBQTBCLEVBQXdCLEVBQUUsT0FBYyxFQUFFLElBQVcsRUFBRSxJQUFXO1FBQTVGLGlCQWlEQztRQWhERyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDakIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0QixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2QsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLFVBQUEsQ0FBQyxJQUFFLE9BQUEsQ0FBQyxFQUFELENBQUMsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFBLENBQUM7WUFDekIsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMzQixLQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDeEIsQ0FBQyxDQUFDLENBQUE7UUFDRixxQkFBcUI7UUFDckIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQVMsSUFBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0QixFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ25CLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUE7UUFFcEQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBQSxDQUFDO2dCQUN6RyxJQUFJLENBQUM7b0JBQ0QsSUFBSSxFQUFFLEdBQUcsY0FBYyxDQUFDLEtBQUksQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtvQkFDM0QsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7b0JBQ25CLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDMUIsQ0FBQztnQkFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNQLEtBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztvQkFDMUIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUMxQixDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsOEJBQThCO1FBQzlCLHlIQUF5SDtRQUN6SCxnQkFBZ0I7UUFDaEIsZ0RBQWdEO1FBQ2hELDREQUE0RDtRQUM1RCxxQ0FBcUM7UUFDckMsWUFBWTtRQUNaLHNCQUFzQjtRQUN0QiwwQ0FBMEM7UUFDMUMscUNBQXFDO1FBQ3JDLFlBQVk7UUFDWixVQUFVO1FBQ1YseUNBQXlDO1FBQ3pDLElBQUk7UUFDSixFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVTLDZCQUFJLEdBQWQsVUFBZSxFQUFFO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNULElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQzVCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxrQ0FBUyxHQUFoQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFDTCxxQkFBQztBQUFELENBeE1BLEFBd01DLElBQUE7QUFDRDtJQUNJLElBQUksTUFBTSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRWQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBTEQsa0JBS0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvbnMvY29tcGxldGVCb2R5L3VpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgbGliVUlNb2R1bGUgPSByZXF1aXJlKFwiYXRvbS11aS1saWJcIilcblxuLyoqXG4gKiB1aS1saWJzIGluc3RhbmNlXG4gKi9cbmRlY2xhcmUgbGV0IFVJIDogdHlwZW9mIGxpYlVJTW9kdWxlXG5cbi8qKlxuICogSURFIFVJIGluc3RhbmNlXG4gKi9cbmRlY2xhcmUgbGV0IElERTogYW55O1xuXG4vKipcbiAqIE91dHB1dCBVSSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29tcGxldGVCb2R5T3V0cHV0VUlTdGF0ZSB7XG4gICAgLyoqXG4gICAgICogQm9keSBuYW1lLlxuICAgICAqL1xuICAgIG5hbWUgOiBzdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIEpTT04gY29udGVudCB0eXBlIG5lZWRzIHRvIGJlIGdlbmVyYXRlZFxuICAgICAqL1xuICAgIG5lZWRKU09OIDogYm9vbGVhbixcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgWE1MIGNvbnRlbnQgdHlwZSBuZWVkcyB0byBiZSBnZW5lcmF0ZWRcbiAgICAgKi9cbiAgICBuZWVkWE1MIDogYm9vbGVhbixcblxuICAgIC8qKlxuICAgICAqIEpTT04gZXhhbXBsZSBjb250ZW50c1xuICAgICAqL1xuICAgIGpzZXhhbXBsZSA6IHN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIFhNTCBleGFtcGxlIGNvbnRlbnRzXG4gICAgICovXG4gICAgeG1sZXhhbXBsZSA6IHN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIEpTT04gc2NoZW1hIGNvbnRlbnRzXG4gICAgICovXG4gICAganNzY2hlbWEgOiBzdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBYTUwgc2NoZW1hIGNvbnRlbnRzXG4gICAgICovXG4gICAgeG1sc2NoZW1hIDogc3RyaW5nXG59XG5cbmNsYXNzIEpzb25TY2hlbWFHZW5lcmF0b3Ige1xuXG4gICAgZ2VuZXJhdGVTY2hlbWEob2JqOmFueSk6T2JqZWN0e1xuXG4gICAgICAgIHZhciBzY2g6T2JqZWN0ID0ge31cbiAgICAgICAgc2NoWydyZXF1aXJlZCddID0gdHJ1ZVxuICAgICAgICBzY2hbJyRzY2hlbWEnXSA9ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTAzL3NjaGVtYSdcblxuICAgICAgICB0aGlzLnBhc3Mob2JqLCBzY2gpO1xuICAgICAgICByZXR1cm4gc2NoXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXNzKHZhbHVlOmFueSwgcHJvcGVydHk6T2JqZWN0KXtcblxuICAgICAgICB2YXIgdmFsdWVUeXBlOnN0cmluZyA9IHRoaXMuZGV0ZWN0VHlwZSh2YWx1ZSk7XG4gICAgICAgIHByb3BlcnR5Wyd0eXBlJ10gPSB2YWx1ZVR5cGVcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5wYXNzQXJyYXkodmFsdWUsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5wYXNzT2JqZWN0KHZhbHVlLCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhc3NPYmplY3Qob2JqOk9iamVjdCwgc2NoOk9iamVjdCkge1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goIHggPT4gdGhpcy5yZWdpc3RlclByb3BlcnR5KHgsb2JqW3hdLHNjaCkgKVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVnaXN0ZXJQcm9wZXJ0eShwcm9wTmFtZTpzdHJpbmcsIHZhbHVlOmFueSwgc2NoOk9iamVjdCl7XG5cbiAgICAgICAgdmFyIHByb3BlcnRpZXM6T2JqZWN0ID0gc2NoWydwcm9wZXJ0aWVzJ11cbiAgICAgICAgaWYoIXByb3BlcnRpZXMpe1xuICAgICAgICAgICAgcHJvcGVydGllcyA9IHt9XG4gICAgICAgICAgICBzY2hbJ3Byb3BlcnRpZXMnXSA9IHByb3BlcnRpZXNcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wZXJ0eTpPYmplY3QgPSBwcm9wZXJ0aWVzW3Byb3BOYW1lXVxuICAgICAgICBpZighcHJvcGVydHkpe1xuICAgICAgICAgICAgcHJvcGVydHkgPSB7fVxuICAgICAgICAgICAgcHJvcGVydGllc1twcm9wTmFtZV0gPSBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5WydyZXF1aXJlZCddID0gZmFsc2VcbiAgICAgICAgdGhpcy5wYXNzKHZhbHVlLCBwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXNzQXJyYXkoYXJyYXk6YW55W10sIHByb3BlcnR5Ok9iamVjdCl7XG5cbiAgICAgICAgdmFyIGl0ZW1zID0gcHJvcGVydHlbJ2l0ZW1zJ11cbiAgICAgICAgaWYoIWl0ZW1zKXtcbiAgICAgICAgICAgIGl0ZW1zID0gW11cbiAgICAgICAgICAgIHByb3BlcnR5WydpdGVtcyddID0gaXRlbXNcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsOm51bWJlciA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgdmFyIGl0ZW1TZXQgPSBbXVxuICAgICAgICBhcnJheS5mb3JFYWNoKCB2YWx1ZSA9PiB7XG5cbiAgICAgICAgICAgIHZhciBpdGVtOk9iamVjdCA9IHt9XG4gICAgICAgICAgICB0aGlzLnBhc3ModmFsdWUsaXRlbSk7XG4gICAgICAgICAgICBpdGVtU2V0LnB1c2goaXRlbSlcbiAgICAgICAgfSlcbiAgICAgICAgaXRlbXMucHVzaChpdGVtU2V0WzBdKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZWN0VHlwZSh2YWx1ZTphbnkpOnN0cmluZyB7XG4gICAgICAgIGlmKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2FycmF5J1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWVcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTY2hlbWEodGV4dDpzdHJpbmcsbWVkaWFUeXBlOnN0cmluZyk6c3RyaW5ne1xuICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgSnNvblNjaGVtYUdlbmVyYXRvcigpXG4gICAgdmFyIG9iaiA9IEpTT04ucGFyc2UodGV4dCk7XG4gICAgdmFyIHNjaGVtYU9iamVjdCA9IGdlbmVyYXRvci5nZW5lcmF0ZVNjaGVtYShvYmopXG4gICAgdmFyIHNjaGVtYVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHNjaGVtYU9iamVjdCxudWxsLDIpXG4gICAgcmV0dXJuIHNjaGVtYVN0cmluZ1xufVxuXG5jbGFzcyBGaWxsQm9keURpYWxvZyB7XG5cbiAgICBwcm90ZWN0ZWQgbmFtZTpzdHJpbmcgPSBcIlwiXG4gICAgcHJpdmF0ZSByZXNvbHZlO1xuICAgIHByaXZhdGUgcmVqZWN0O1xuICAgIHByaXZhdGUgcmVzdWx0UHJvbWlzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0aXRsZTpzdHJpbmcgPSBcIkZpbGwgYm9keVwiKSB7XG4gICAgICAgIHRoaXMucmVzdWx0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlOiAodmFsdWU/OiBJQ29tcGxldGVCb2R5T3V0cHV0VUlTdGF0ZSkgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdDogKGVycm9yPzogYW55KSA9PiB2b2lkKSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXh0cmFDb250ZW50KHM6bGliVUlNb2R1bGUuU2VjdGlvbikge1xuXG4gICAgfVxuXG4gICAgbmVlZFhNTDpib29sZWFuID0gdHJ1ZTtcbiAgICBuZWVkSlNPTjpib29sZWFuID0gdHJ1ZTtcbiAgICBjcmVhdGVCdXR0b246bGliVUlNb2R1bGUuQnV0dG9uO1xuXG4gICAgdXBkYXRlQnV0dG9ucygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNyZWF0ZUJ1dHRvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm5hbWUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5lbS5zZXREaXNwbGF5KHRydWUpXG4gICAgICAgICAgICB0aGlzLmVtLnNldFRleHQoXCJQbGVhc2UgdHlwZSBuYW1lIG9mIHlvdXIgcGF5bG9hZFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5uZWVkSlNPTikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBKU09OLnBhcnNlKHRoaXMuanNleGFtcGxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbi5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtLnNldERpc3BsYXkodHJ1ZSlcbiAgICAgICAgICAgICAgICB0aGlzLmVtLnNldFRleHQoXCJKU09OIGV4YW1wbGUgaXMgbm90IGNvcnJlY3RcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdHJ5IHtcbiAgICAgICAgICAgIC8vICAgICB2YXIgc28gPSBzdS5nZXRKU09OU2NoZW1hKHRoaXMuanNzY2hlbWEsIG51bGwpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmNyZWF0ZUJ1dHRvbi5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmVtLnNldERpc3BsYXkodHJ1ZSlcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmVtLnNldFRleHQoXCJKU09OIHNjaGVtYSBpcyBub3QgY29ycmVjdFwiKTtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubmVlZFhNTCkge1xuICAgICAgICAgICAgLy8gdHJ5IHtcbiAgICAgICAgICAgIC8vICAgICB4bWx1dGlsKHRoaXMueG1sZXhhbXBsZSk7XG4gICAgICAgICAgICAvLyB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5jcmVhdGVCdXR0b24uc2V0RGlzYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5lbS5zZXREaXNwbGF5KHRydWUpXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5lbS5zZXRUZXh0KFwiWE1MIGV4YW1wbGUgaXMgbm90IGNvcnJlY3RcIik7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy8gdHJ5IHtcbiAgICAgICAgICAgIC8vICAgICB2YXIgc28gPSBzdS5nZXRYTUxTY2hlbWEodGhpcy54bWxzY2hlbWEpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmNyZWF0ZUJ1dHRvbi5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmVtLnNldERpc3BsYXkodHJ1ZSlcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmVtLnNldFRleHQoXCJYTUwgc2NoZW1hIGlzIG5vdCBjb3JyZWN0XCIpO1xuICAgICAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtLnNldERpc3BsYXkoZmFsc2UpO1xuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbi5zZXREaXNhYmxlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgZW06bGliVUlNb2R1bGUuTGFiZWw7XG5cbiAgICBzaG93KCkge1xuICAgICAgICB2YXIgenogPSBudWxsO1xuICAgICAgICB0aGlzLmVtID0gVUkubGFiZWwoXCJQbGVhc2UgdHlwZSBuYW1lIG9mIHlvdXIgcGF5bG9hZFwiLCBVSS5JY29uLkJVRywgVUkuVGV4dENsYXNzZXMuRVJST1IsIFVJLkhpZ2hMaWdodENsYXNzZXMuTk9ORSk7XG4gICAgICAgIHZhciBzZWN0aW9uID0gVUkuc2VjdGlvbih0aGlzLnRpdGxlLCBVSS5JY29uLkJPT0ssIGZhbHNlLCBmYWxzZSwgdGhpcy5lbSwgVUkuaDMoXCJQbGVhc2UgdHlwZSBuYW1lIGZvciB5b3VyIHBheWxvYWRcIikpLnBhZCgxMCwgMTApXG4gICAgICAgIHNlY3Rpb24uYWRkQ2hpbGQoVUkudGV4ZkZpZWxkKFwiXCIsIHRoaXMubmFtZSwgeD0+IHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHguZ2V0QmluZGluZygpLmdldCgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVCdXR0b25zKCk7XG4gICAgICAgIH0pKVxuICAgICAgICB2YXIgcjEgPSBVSS5jaGVja0JveChcIkNyZWF0ZSBYTUwgYm9keVwiKTtcbiAgICAgICAgcjEuc2V0VmFsdWUodGhpcy5uZWVkWE1MKTtcbiAgICAgICAgcjEuZ2V0QmluZGluZygpLmFkZExpc3RlbmVyKHg9PiB7XG4gICAgICAgICAgICB0aGlzLm5lZWRYTUwgPSByMS5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVCdXR0b25zKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWN0aW9uLmFkZENoaWxkKHIxKTtcbiAgICAgICAgdmFyIHIyID0gVUkuY2hlY2tCb3goXCJDcmVhdGUgSlNPTiBib2R5XCIpO1xuICAgICAgICByMi5zZXRWYWx1ZSh0aGlzLm5lZWRKU09OKTtcbiAgICAgICAgcjIuZ2V0QmluZGluZygpLmFkZExpc3RlbmVyKHg9PiB7XG4gICAgICAgICAgICB0aGlzLm5lZWRKU09OID0gcjIuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQnV0dG9ucygpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VjdGlvbi5hZGRDaGlsZChyMik7XG5cbiAgICAgICAgdmFyIGJ1dHRvbkJhciA9IFVJLmhjKCkuc2V0UGVyY2VudFdpZHRoKDEwMCkuc2V0U3R5bGUoXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcbiAgICAgICAgYnV0dG9uQmFyLmFkZENoaWxkKFVJLmxhYmVsKFwiXCIsIG51bGwsIG51bGwsIG51bGwpLnNldFN0eWxlKFwiZmxleFwiLCBcIjFcIikpXG4gICAgICAgIGJ1dHRvbkJhci5hZGRDaGlsZChVSS5idXR0b24oXCJDYW5jZWxcIiwgVUkuQnV0dG9uU2l6ZXMuTk9STUFMLCBVSS5CdXR0b25IaWdobGlnaHRzLk5PX0hJR0hMSUdIVCwgVUkuSWNvbi5OT05FLCB4PT4ge1xuICAgICAgICAgICAgenouZGVzdHJveSgpXG4gICAgICAgIH0pLm1hcmdpbigxMCwgMTApKVxuXG4gICAgICAgIHRoaXMuY3JlYXRlQnV0dG9uID0gVUkuYnV0dG9uKFwiQ3JlYXRlXCIsIFVJLkJ1dHRvblNpemVzLk5PUk1BTCwgVUkuQnV0dG9uSGlnaGxpZ2h0cy5TVUNDRVNTLCBVSS5JY29uLk5PTkUsIHg9PiB7XG4gICAgICAgICAgICB0aGlzLm9uT2soenopO1xuICAgICAgICAgICAgenouZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnV0dG9uQmFyLmFkZENoaWxkKHRoaXMuY3JlYXRlQnV0dG9uKVxuICAgICAgICB2YXIgdGYgPSBuZXcgVUkuVGFiRm9sZGVyKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQnV0dG9uLnNldERpc2FibGVkKHRydWUpXG4gICAgICAgIHRoaXMuY3JlYXRlVGV4dFNlY3Rpb24odGYsIFwiSlNPTiBFeGFtcGxlXCIsIFwic291cmNlLmpzb25cIiwgXCJqc2V4YW1wbGVcIik7XG4gICAgICAgIHRoaXMuY3JlYXRlVGV4dFNlY3Rpb24odGYsIFwiSlNPTiBTY2hlbWFcIiwgXCJzb3VyY2UuanNvblwiLCBcImpzc2NoZW1hXCIpO1xuICAgICAgICB0aGlzLmNyZWF0ZVRleHRTZWN0aW9uKHRmLCBcIlhNTCBFeGFtcGxlXCIsIFwidGV4dC54bWxcIiwgXCJ4bWxleGFtcGxlXCIpO1xuICAgICAgICB0aGlzLmNyZWF0ZVRleHRTZWN0aW9uKHRmLCBcIlhNTCBTY2hlbWFcIiwgXCJ0ZXh0LnhtbFwiLCBcInhtbHNjaGVtYVwiKTtcbiAgICAgICAgdGYuc2V0T25TZWxlY3RlZCgoKT0+IHtcbiAgICAgICAgICAgIHZhciBjID0gdGYuc2VsZWN0ZWRDb21wb25lbnQoKTtcbiAgICAgICAgICAgIHZhciB0ZSA9ICg8bGliVUlNb2R1bGUuQXRvbUVkaXRvckVsZW1lbnQ+PGFueT5jLmNoaWxkcmVuKClbMV0pO1xuICAgICAgICAgICAgdGUuc2V0VGV4dCgoPGFueT50aGlzKVsoPGxpYlVJTW9kdWxlLkJhc2ljQ29tcG9uZW50PGFueT4+YykuaWQoKV0pO1xuXG4gICAgICAgIH0pXG4gICAgICAgIHNlY3Rpb24uYWRkQ2hpbGQodGYpO1xuICAgICAgICBzZWN0aW9uLmFkZENoaWxkKGJ1dHRvbkJhcik7XG4gICAgICAgIHp6ID0gKDxhbnk+SURFKS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7aXRlbTogc2VjdGlvbi5yZW5kZXJVSSgpfSk7XG4gICAgfVxuXG4gICAganNleGFtcGxlOnN0cmluZyA9ICd7XFxuIFwibWVzc2FnZVwiOlwiSGVsbG8gd29ybGRcIlxcbn0nXG4gICAgeG1sZXhhbXBsZTpzdHJpbmcgPSBcIlwiO1xuICAgIHhtbHNjaGVtYTpzdHJpbmcgPSBcIlwiO1xuICAgIGpzc2NoZW1hOnN0cmluZyA9IFwiXCI7XG5cbiAgICBwcml2YXRlIGNyZWF0ZVRleHRTZWN0aW9uKHRmOmxpYlVJTW9kdWxlLlRhYkZvbGRlciwgY2FwdGlvbjpzdHJpbmcsIGxhbmc6c3RyaW5nLCBjb2RlOnN0cmluZykge1xuICAgICAgICB2YXIgaHMgPSBVSS52YygpO1xuICAgICAgICBocy5zZXRDYXB0aW9uKGNhcHRpb24pXG4gICAgICAgIGhzLnNldElkKGNvZGUpXG4gICAgICAgIHZhciB0cyA9IG5ldyBVSS5BdG9tRWRpdG9yRWxlbWVudChcIlwiLCB4PT54KTtcbiAgICAgICAgdHMuc2V0TWluaShmYWxzZSk7XG4gICAgICAgIHRzLmdldEJpbmRpbmcoKS5hZGRMaXN0ZW5lcih4PT4ge1xuICAgICAgICAgICAgdGhpc1tjb2RlXSA9IHRzLmdldFZhbHVlKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUJ1dHRvbnMoKVxuICAgICAgICB9KVxuICAgICAgICAvL3RzLnNldENhcHRpb24oY29kZSlcbiAgICAgICAgdHMuc2V0VGV4dChcIlwiICsgKDxhbnk+dGhpcylbY29kZV0pO1xuICAgICAgICB0cy5zZXRDYXB0aW9uKGNhcHRpb24pXG4gICAgICAgIHRzLnNldEdyYW1tYXIobGFuZylcbiAgICAgICAgdHMuc2V0U3R5bGUoXCJoZWlnaHRcIiwgXCI0MDBweFwiKTtcbiAgICAgICAgdHMuc2V0U3R5bGUoXCJib3JkZXJcIiwgXCJzb2xpZFwiKTtcbiAgICAgICAgdHMuc2V0U3R5bGUoXCJib3JkZXItd2lkdGhcIiwgXCIxcHhcIik7XG4gICAgICAgIGhzLmFkZENoaWxkKFVJLmgzKFwiUGxlYXNlIHR5cGUgeW91ciBleGFtcGxlIGhlcmU6XCIpKVxuXG4gICAgICAgIGhzLmFkZENoaWxkKHRzKTtcbiAgICAgICAgaWYgKGNvZGUgPT0gJ2pzZXhhbXBsZScpIHtcbiAgICAgICAgICAgIHZhciBiID0gVUkuYnV0dG9uKFwiR2VuZXJhdGUgSlNPTiBzY2hlbWFcIiwgVUkuQnV0dG9uU2l6ZXMuTk9STUFMLCBVSS5CdXR0b25IaWdobGlnaHRzLlNVQ0NFU1MsIFVJLkljb24uTk9ORSwgeD0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnMgPSBnZW5lcmF0ZVNjaGVtYSh0aGlzLmpzZXhhbXBsZSwgXCJhcHBsaWNhdGlvbi9qc29uXCIpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuanNzY2hlbWEgPSBycztcbiAgICAgICAgICAgICAgICAgICAgdGYuc2V0U2VsZWN0ZWRJbmRleCgxKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmpzc2NoZW1hID0gZS5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB0Zi5zZXRTZWxlY3RlZEluZGV4KDEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBocy5hZGRDaGlsZChiLm1hcmdpbig1LCA1LCA1LCA1KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKGNvZGUgPT0gJ3htbGV4YW1wbGUnKSB7XG4gICAgICAgIC8vICAgICB2YXIgYiA9IFVJLmJ1dHRvbihcIkdlbmVyYXRlIEpTT04gZXhhbXBsZVwiLCBVSS5CdXR0b25TaXplcy5OT1JNQUwsIFVJLkJ1dHRvbkhpZ2hsaWdodHMuU1VDQ0VTUywgVUkuSWNvbi5OT05FLCB4PT4ge1xuICAgICAgICAvLyAgICAgICAgIHRyeSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHZhciBycyA9IHhtbHV0aWwodGhpcy54bWxleGFtcGxlKVxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmpzZXhhbXBsZSA9IEpTT04uc3RyaW5naWZ5KHJzLCBudWxsLCAyKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgdGYuc2V0U2VsZWN0ZWRJbmRleCgwKVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmpzZXhhbXBsZSA9IGUubWVzc2FnZTtcbiAgICAgICAgLy8gICAgICAgICAgICAgdGYuc2V0U2VsZWN0ZWRJbmRleCgwKVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyAgICAgaHMuYWRkQ2hpbGQoYi5tYXJnaW4oNSwgNSwgNSwgNSkpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRmLmFkZChjYXB0aW9uLCBudWxsLCBocyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uT2soenopIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIG5lZWRKU09OOiB0aGlzLm5lZWRKU09OLFxuICAgICAgICAgICAgbmVlZFhNTDogdGhpcy5uZWVkWE1MLFxuICAgICAgICAgICAganNleGFtcGxlOiB0aGlzLmpzZXhhbXBsZSxcbiAgICAgICAgICAgIHhtbGV4YW1wbGU6IHRoaXMueG1sZXhhbXBsZSxcbiAgICAgICAgICAgIGpzc2NoZW1hOiB0aGlzLmpzc2NoZW1hLFxuICAgICAgICAgICAgeG1sc2NoZW1hOiB0aGlzLnhtbHNjaGVtYSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlc3VsdCgpIDogUHJvbWlzZTxJQ29tcGxldGVCb2R5T3V0cHV0VUlTdGF0ZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRQcm9taXNlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBydW4oKSA6IFByb21pc2U8YW55PiB7XG4gICAgbGV0IGRpYWxvZyA9IG5ldyBGaWxsQm9keURpYWxvZygpO1xuICAgIGRpYWxvZy5zaG93KCk7XG5cbiAgICByZXR1cm4gZGlhbG9nLmdldFJlc3VsdCgpO1xufVxuIl19\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actions/completeBody/ui.js\n// module id = 33\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _dialogPanels = [];\nvar mdp = null;\nfunction _dialog(panel, onDone, toFocus, stretch) {\n    if (stretch === void 0) { stretch = false; }\n    return _dialog2(panel, [\n        { name: \"Ok\", isPrimary: true, highlight: UI.ButtonHighlights.PRIMARY, action: onDone },\n        { name: \"Cancel\", highlight: UI.ButtonHighlights.NO_HIGHLIGHT, action: function () { return true; } }\n    ], toFocus, stretch);\n}\nfunction _dialog2(panel, actions, toFocus, stretch) {\n    if (stretch === void 0) { stretch = false; }\n    var buttonBar = UI.hc().setPercentWidth(100);\n    actions.reverse().forEach(function (a) {\n        var button = UI.button(a.name, UI.ButtonSizes.NORMAL, a.highlight, UI.Icon.NONE, function (x) { if (a.action())\n            _closeDialog(); });\n        if (a.isPrimary) {\n            var st = panel.getBinding().status();\n            if (st) {\n                if (st.code == UI.StatusCode.ERROR) {\n                    button.setDisabled(true);\n                }\n            }\n            panel.getBinding().addStatusListener(function (x) {\n                var st = panel.getBinding().status();\n                if (st) {\n                    if (st.code != UI.StatusCode.ERROR) {\n                        button.setDisabled(false);\n                    }\n                    else {\n                        button.setDisabled(true);\n                    }\n                }\n            });\n        }\n        button.setStyle(\"float\", \"right\")\n            .margin(4, 10);\n        buttonBar.addChild(button);\n    });\n    panel.addChild(buttonBar);\n    var ui = panel.ui();\n    return function (e) {\n        _dialogPanels.push(panel);\n        var eventListener = function () {\n            if (!stretch) {\n                return;\n            }\n            var parent = ui.parentElement;\n            var height = document.body.clientHeight;\n            if (!parent) {\n                return;\n            }\n            var style = window.getComputedStyle(parent);\n            [\"paddingBottom\", \"paddingTop\", \"marginBottom\", \"marginTop\"].forEach(function (property) {\n                height -= parseFloat(style[property] || 0);\n            });\n            ui.style.height = height + \"px\";\n            ui.style.overflowY = \"scroll\";\n        };\n        window.addEventListener('resize', eventListener);\n        mdp = IDE.workspace.addModalPanel({ item: ui });\n        mdp.onDidDestroy(function () {\n            window.removeEventListener('resize', eventListener);\n        });\n        eventListener();\n        if (toFocus)\n            toFocus.ui().focus();\n    };\n}\nfunction _closeDialog() {\n    _dialogPanels.pop();\n    if (_dialogPanels.length == 0)\n        mdp.destroy();\n    else\n        mdp = IDE.workspace.addModalPanel({ item: _dialogPanels[_dialogPanels.length - 1].ui() });\n}\nfunction newMethod(inputState, method) {\n    var mdesc = inputState.methodDescriptions;\n    var cdesc = inputState.statusCodeDescriptions;\n    var NO_RESPONCE = \"No response\";\n    var NO_RESPONCE_BT = \"No response body type\";\n    var code = null, bodyType = null;\n    if (method == null)\n        method = \"get\";\n    var mdescLabel = new UI.LabelField();\n    var cdescLabel = new UI.LabelField();\n    [mdescLabel, cdescLabel].forEach(function (x) { return x.addClass('wizard-description'); });\n    mdescLabel.getActualField().margin(0, 0, 18, 8);\n    cdescLabel.getActualField().margin(0, 0, 8, 8);\n    var methodSelect = new UI.SelectField(\"Method:\", function (e, v) {\n        method = v;\n        mdescLabel.setText(\"Method \" + v + \" \" + mdesc[v]);\n    }, null);\n    methodSelect.getActualField().setOptions(Object.keys(mdesc));\n    methodSelect.getActualField().setValue(method, true);\n    var responseSelect = new UI.SelectField(\"Status code:\", function (e, v) {\n        if (v == NO_RESPONCE) {\n            v = null;\n            responseTypeSelect.getActualField().setValue(NO_RESPONCE_BT);\n        }\n        code = v;\n        responseTypeSelect.setDisabled(v == null);\n        cdescLabel.setText(v ? \"Status code \" + v + \" \" + cdesc[v] : '');\n    }, null);\n    responseSelect.getActualField().setOptions([NO_RESPONCE].concat(Object.keys(cdesc)));\n    var responseTypeSelect = new UI.SelectField(\"Generate default response with media type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT) {\n            v = null;\n            typeOfValue.setDisabled(true);\n        }\n        else\n            typeOfValue.setDisabled(false);\n        bodyType = v;\n    }, null);\n    responseTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n    responseTypeSelect.setDisabled(true);\n    responseTypeSelect.margin(0, 0, 0, 12);\n    var realBodyType = null;\n    var bodyTypeSelect = new UI.SelectField(\"Generate default body with media type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT) {\n            v = null;\n            bodyTypeOfValue.setDisabled(true);\n        }\n        else\n            bodyTypeOfValue.setDisabled(false);\n        realBodyType = v;\n    }, null);\n    bodyTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n    bodyTypeSelect.margin(0, 0, 0, 12);\n    var actualType = null;\n    var bodyTypeString = null;\n    var typeOfValue = new UI.SelectField(\"Generate default response body with type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT)\n            v = null;\n        actualType = v;\n    }, null);\n    typeOfValue.setDisabled(true);\n    typeOfValue.margin(0, 0, 0, 12);\n    var __ret = inputState.typeValues;\n    var isSchema = __ret.isSchema;\n    var types = __ret.types;\n    if (types) {\n        types = [\"\"].concat(types);\n        typeOfValue.getActualField().setOptions(types);\n    }\n    var bodyTypeOfValue = new UI.SelectField(\"Generate default body with type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT)\n            v = null;\n        bodyTypeString = v;\n    }, null);\n    bodyTypeOfValue.setDisabled(true);\n    bodyTypeOfValue.margin(0, 0, 0, 12);\n    var isSchema = __ret.isSchema;\n    var types = __ret.types;\n    if (types) {\n        types = [\"\"].concat(types);\n        bodyTypeOfValue.getActualField().setOptions(types);\n    }\n    var responseSection = UI.section(\"\");\n    responseSection.addChild(UI.h3(\"Body\"));\n    responseSection.addChild(bodyTypeSelect);\n    responseSection.addChild(bodyTypeOfValue);\n    responseSection.addChild(UI.h3(\"Response\"));\n    responseSection.addChild(responseSelect);\n    responseSection.addChild(cdescLabel);\n    responseSection.addChild(responseTypeSelect);\n    responseSection.addChild(typeOfValue);\n    responseSection.ui();\n    var panel = UI.section(\"Creating a new method\", UI.Icon.CODE, false, false, methodSelect, mdescLabel, responseSection);\n    var __ret = inputState.typeValues;\n    //panel.addChild(typeOfValue)\n    var savedResolve;\n    var savedReject;\n    var resultPromise = new Promise(function (resolve, reject) {\n        savedResolve = resolve;\n        savedReject = reject;\n    });\n    _dialog(panel, function () {\n        savedResolve({\n            method: method,\n            realBodyType: realBodyType,\n            code: code,\n            bodyTypeString: bodyTypeString,\n            bodyType: bodyType,\n            actualType: actualType,\n            isSchema: isSchema\n        });\n        return true;\n    })(this);\n    return resultPromise;\n}\nexports.newMethod = newMethod;\nfunction run(inputState) {\n    return newMethod(inputState);\n}\nexports.run = run;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actions/newMethod/ui.js\n// module id = 34\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction run(initialState) {\n    if (initialState.isParentNull) {\n        return Promise.resolve({\n            canceled: true\n        });\n    }\n    var changes = {};\n    var item = UIBuilder.buildItem(initialState.detailsTree, {\n        uri: \"localchanges\",\n        position: -1,\n        reconciler: {\n            schedule: function (runnable) { return runnable.run(); }\n        },\n        localModel: changes\n    });\n    item.setTitle(initialState.title);\n    var panel = item.render({\n        showDescription: true\n    });\n    panel.margin(8, 8, 8, 8);\n    return new Promise(function (resolve) {\n        UI.simpleModalDialog(panel, function () {\n            resolve(changes);\n            return true;\n        }, function () {\n            resolve({\n                canceled: true\n            });\n            return true;\n        });\n    });\n}\nexports.run = run;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLGFBQW9CLFlBQVk7SUFDNUIsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDbkIsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztJQUV0QixJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7UUFDckQsR0FBRyxFQUFFLGNBQWM7UUFDbkIsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNaLFVBQVUsRUFBRTtZQUNSLFFBQVEsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBZCxDQUFjO1NBQ3ZDO1FBQ0QsVUFBVSxFQUFFLE9BQU87S0FDdEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwQixlQUFlLEVBQUUsSUFBSTtLQUN4QixDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDdkIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQUU7WUFDQyxPQUFPLENBQUM7Z0JBQ0osUUFBUSxFQUFFLElBQUk7YUFDakIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQXZDRCxrQkF1Q0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvbnMvc2ltcGxlQWN0aW9uL3VpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpYlVJTW9kdWxlID0gcmVxdWlyZShcImF0b20tdWktbGliXCIpXG5cbmRlY2xhcmUgbGV0IFVJOiBhbnk7XG5kZWNsYXJlIGxldCBJREU6IGFueTtcbmRlY2xhcmUgbGV0IFVJQnVpbGRlcjogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuKGluaXRpYWxTdGF0ZSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYoaW5pdGlhbFN0YXRlLmlzUGFyZW50TnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB2YXIgY2hhbmdlczogYW55ID0ge307XG5cbiAgICB2YXIgaXRlbSA9IFVJQnVpbGRlci5idWlsZEl0ZW0oaW5pdGlhbFN0YXRlLmRldGFpbHNUcmVlLCB7XG4gICAgICAgIHVyaTogXCJsb2NhbGNoYW5nZXNcIixcbiAgICAgICAgcG9zaXRpb246IC0xLFxuICAgICAgICByZWNvbmNpbGVyOiB7XG4gICAgICAgICAgICBzY2hlZHVsZTogcnVubmFibGUgPT4gcnVubmFibGUucnVuKClcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYWxNb2RlbDogY2hhbmdlc1xuICAgIH0pO1xuXG4gICAgaXRlbS5zZXRUaXRsZShpbml0aWFsU3RhdGUudGl0bGUpO1xuXG4gICAgdmFyIHBhbmVsID0gaXRlbS5yZW5kZXIoe1xuICAgICAgICBzaG93RGVzY3JpcHRpb246IHRydWVcbiAgICB9KTtcblxuICAgIHBhbmVsLm1hcmdpbig4LCA4LCA4LCA4KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBVSS5zaW1wbGVNb2RhbERpYWxvZyhwYW5lbCwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShjaGFuZ2VzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actions/simpleAction/ui.js\n// module id = 35\n// module chunks = 0","module.exports = require(\"atom-package-deps\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom-package-deps\"\n// module id = 36\n// module chunks = 0"],"sourceRoot":""}